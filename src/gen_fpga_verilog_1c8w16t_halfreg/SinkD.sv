// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module SinkD(	// ventus/src/L2cache/SinkD.scala:37:7
  input           clock,	// ventus/src/L2cache/SinkD.scala:37:7
                  reset,	// ventus/src/L2cache/SinkD.scala:37:7
  output          io_resp_valid,	// ventus/src/L2cache/SinkD.scala:39:14
  output [2:0]    io_resp_bits_opcode,	// ventus/src/L2cache/SinkD.scala:39:14
  output [14:0]   io_resp_bits_source,	// ventus/src/L2cache/SinkD.scala:39:14
  output [1023:0] io_resp_bits_data,	// ventus/src/L2cache/SinkD.scala:39:14
  input           io_d_valid,	// ventus/src/L2cache/SinkD.scala:39:14
  input  [2:0]    io_d_bits_opcode,	// ventus/src/L2cache/SinkD.scala:39:14
  input  [14:0]   io_d_bits_source,	// ventus/src/L2cache/SinkD.scala:39:14
  input  [1023:0] io_d_bits_data	// ventus/src/L2cache/SinkD.scala:39:14
);

  reg          io_resp_valid_REG;	// ventus/src/L2cache/SinkD.scala:65:33
  reg [2:0]    io_resp_bits_opcode_REG;	// ventus/src/L2cache/SinkD.scala:68:33
  reg [14:0]   io_resp_bits_source_REG;	// ventus/src/L2cache/SinkD.scala:69:33
  reg [1023:0] io_resp_bits_data_REG;	// ventus/src/L2cache/SinkD.scala:70:33
  always @(posedge clock) begin	// ventus/src/L2cache/SinkD.scala:37:7
    if (reset)	// ventus/src/L2cache/SinkD.scala:37:7
      io_resp_valid_REG <= 1'h0;	// ventus/src/L2cache/SinkD.scala:65:33
    else	// ventus/src/L2cache/SinkD.scala:37:7
      io_resp_valid_REG <= io_d_valid;	// ventus/src/L2cache/SinkD.scala:65:33
    io_resp_bits_opcode_REG <= io_d_bits_opcode;	// ventus/src/L2cache/SinkD.scala:68:33
    io_resp_bits_source_REG <= io_d_bits_source;	// ventus/src/L2cache/SinkD.scala:69:33
    io_resp_bits_data_REG <= io_d_bits_data;	// ventus/src/L2cache/SinkD.scala:70:33
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// ventus/src/L2cache/SinkD.scala:37:7
    `ifdef FIRRTL_BEFORE_INITIAL	// ventus/src/L2cache/SinkD.scala:37:7
      `FIRRTL_BEFORE_INITIAL	// ventus/src/L2cache/SinkD.scala:37:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// ventus/src/L2cache/SinkD.scala:37:7
      automatic logic [31:0] _RANDOM[0:33];	// ventus/src/L2cache/SinkD.scala:37:7
      `ifdef INIT_RANDOM_PROLOG_	// ventus/src/L2cache/SinkD.scala:37:7
        `INIT_RANDOM_PROLOG_	// ventus/src/L2cache/SinkD.scala:37:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// ventus/src/L2cache/SinkD.scala:37:7
        for (logic [5:0] i = 6'h0; i < 6'h22; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;	// ventus/src/L2cache/SinkD.scala:37:7
        end	// ventus/src/L2cache/SinkD.scala:37:7
        io_resp_valid_REG = _RANDOM[6'h0][15];	// ventus/src/L2cache/SinkD.scala:37:7, :65:33
        io_resp_bits_opcode_REG = _RANDOM[6'h0][18:16];	// ventus/src/L2cache/SinkD.scala:37:7, :65:33, :68:33
        io_resp_bits_source_REG = {_RANDOM[6'h0][31:19], _RANDOM[6'h1][1:0]};	// ventus/src/L2cache/SinkD.scala:37:7, :65:33, :69:33
        io_resp_bits_data_REG =
          {_RANDOM[6'h1][31:2],
           _RANDOM[6'h2],
           _RANDOM[6'h3],
           _RANDOM[6'h4],
           _RANDOM[6'h5],
           _RANDOM[6'h6],
           _RANDOM[6'h7],
           _RANDOM[6'h8],
           _RANDOM[6'h9],
           _RANDOM[6'hA],
           _RANDOM[6'hB],
           _RANDOM[6'hC],
           _RANDOM[6'hD],
           _RANDOM[6'hE],
           _RANDOM[6'hF],
           _RANDOM[6'h10],
           _RANDOM[6'h11],
           _RANDOM[6'h12],
           _RANDOM[6'h13],
           _RANDOM[6'h14],
           _RANDOM[6'h15],
           _RANDOM[6'h16],
           _RANDOM[6'h17],
           _RANDOM[6'h18],
           _RANDOM[6'h19],
           _RANDOM[6'h1A],
           _RANDOM[6'h1B],
           _RANDOM[6'h1C],
           _RANDOM[6'h1D],
           _RANDOM[6'h1E],
           _RANDOM[6'h1F],
           _RANDOM[6'h20],
           _RANDOM[6'h21][1:0]};	// ventus/src/L2cache/SinkD.scala:37:7, :69:33, :70:33
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// ventus/src/L2cache/SinkD.scala:37:7
      `FIRRTL_AFTER_INITIAL	// ventus/src/L2cache/SinkD.scala:37:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_resp_valid = io_resp_valid_REG;	// ventus/src/L2cache/SinkD.scala:37:7, :65:33
  assign io_resp_bits_opcode = io_resp_bits_opcode_REG;	// ventus/src/L2cache/SinkD.scala:37:7, :68:33
  assign io_resp_bits_source = io_resp_bits_source_REG;	// ventus/src/L2cache/SinkD.scala:37:7, :69:33
  assign io_resp_bits_data = io_resp_bits_data_REG;	// ventus/src/L2cache/SinkD.scala:37:7, :70:33
endmodule

