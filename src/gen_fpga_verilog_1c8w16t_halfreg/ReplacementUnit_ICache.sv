// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module ReplacementUnit_ICache(	// ventus/src/L1Cache/L1TagAccess.scala:510:7
  input        clock,	// ventus/src/L1Cache/L1TagAccess.scala:510:7
               reset,	// ventus/src/L1Cache/L1TagAccess.scala:510:7
  input  [1:0] io_validbits_of_set,	// ventus/src/L1Cache/L1TagAccess.scala:511:14
  output [1:0] io_waymask,	// ventus/src/L1Cache/L1TagAccess.scala:511:14
  output       io_Set_is_full	// ventus/src/L1Cache/L1TagAccess.scala:511:14
);

  reg [1:0] victim_1Hidx;	// ventus/src/L1Cache/L1TagAccess.scala:516:40
  reg [1:0] victim_1Hidx_r;	// ventus/src/L1Cache/L1TagAccess.scala:521:39
  always @(posedge clock) begin	// ventus/src/L1Cache/L1TagAccess.scala:510:7
    if (reset)	// ventus/src/L1Cache/L1TagAccess.scala:510:7
      victim_1Hidx <= 2'h1;	// ventus/src/L1Cache/L1TagAccess.scala:516:40
    else	// ventus/src/L1Cache/L1TagAccess.scala:510:7
      victim_1Hidx <= victim_1Hidx_r;	// ventus/src/L1Cache/L1TagAccess.scala:516:40, :521:39
    if (&io_validbits_of_set)	// ventus/src/L1Cache/L1TagAccess.scala:517:41
      victim_1Hidx_r <= {victim_1Hidx[0], victim_1Hidx[1]};	// ventus/src/L1Cache/L1TagAccess.scala:516:40, :521:{39,43,56,78}
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// ventus/src/L1Cache/L1TagAccess.scala:510:7
    `ifdef FIRRTL_BEFORE_INITIAL	// ventus/src/L1Cache/L1TagAccess.scala:510:7
      `FIRRTL_BEFORE_INITIAL	// ventus/src/L1Cache/L1TagAccess.scala:510:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// ventus/src/L1Cache/L1TagAccess.scala:510:7
      automatic logic [31:0] _RANDOM[0:0];	// ventus/src/L1Cache/L1TagAccess.scala:510:7
      `ifdef INIT_RANDOM_PROLOG_	// ventus/src/L1Cache/L1TagAccess.scala:510:7
        `INIT_RANDOM_PROLOG_	// ventus/src/L1Cache/L1TagAccess.scala:510:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// ventus/src/L1Cache/L1TagAccess.scala:510:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// ventus/src/L1Cache/L1TagAccess.scala:510:7
        victim_1Hidx = _RANDOM[/*Zero width*/ 1'b0][1:0];	// ventus/src/L1Cache/L1TagAccess.scala:510:7, :516:40
        victim_1Hidx_r = _RANDOM[/*Zero width*/ 1'b0][3:2];	// ventus/src/L1Cache/L1TagAccess.scala:510:7, :516:40, :521:39
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// ventus/src/L1Cache/L1TagAccess.scala:510:7
      `FIRRTL_AFTER_INITIAL	// ventus/src/L1Cache/L1TagAccess.scala:510:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_waymask =
    (&io_validbits_of_set) ? victim_1Hidx : 2'h1 << io_validbits_of_set[0];	// src/main/scala/chisel3/util/OneHot.scala:58:35, ventus/src/L1Cache/L1TagAccess.scala:510:7, :516:40, :517:41, :518:{20,88}
  assign io_Set_is_full = &io_validbits_of_set;	// ventus/src/L1Cache/L1TagAccess.scala:510:7, :517:41
endmodule

