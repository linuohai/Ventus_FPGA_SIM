// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module IntDivMod(	// ventus/src/pipeline/IntDivMod.scala:15:7
  input         clock,	// ventus/src/pipeline/IntDivMod.scala:15:7
                reset,	// ventus/src/pipeline/IntDivMod.scala:15:7
  output        io_in_ready,	// ventus/src/pipeline/IntDivMod.scala:16:14
  input         io_in_valid,	// ventus/src/pipeline/IntDivMod.scala:16:14
  input  [31:0] io_in_bits_a,	// ventus/src/pipeline/IntDivMod.scala:16:14
                io_in_bits_d,	// ventus/src/pipeline/IntDivMod.scala:16:14
  input         io_in_bits_signed,	// ventus/src/pipeline/IntDivMod.scala:16:14
                io_out_ready,	// ventus/src/pipeline/IntDivMod.scala:16:14
  output        io_out_valid,	// ventus/src/pipeline/IntDivMod.scala:16:14
  output [31:0] io_out_bits_q,	// ventus/src/pipeline/IntDivMod.scala:16:14
                io_out_bits_r	// ventus/src/pipeline/IntDivMod.scala:16:14
);

  reg  [2:0]  state;	// ventus/src/pipeline/IntDivMod.scala:26:22
  reg         qSignReg;	// ventus/src/pipeline/IntDivMod.scala:30:27
  reg         rSignReg;	// ventus/src/pipeline/IntDivMod.scala:31:27
  reg  [31:0] rawAReg;	// ventus/src/pipeline/IntDivMod.scala:38:26
  reg  [31:0] unsignedAReg;	// ventus/src/pipeline/IntDivMod.scala:39:31
  reg  [31:0] unsignedDReg;	// ventus/src/pipeline/IntDivMod.scala:40:31
  reg         overflowReg;	// ventus/src/pipeline/IntDivMod.scala:41:30
  reg         divByZeroReg;	// ventus/src/pipeline/IntDivMod.scala:42:31
  reg  [33:0] aReg;	// ventus/src/pipeline/IntDivMod.scala:48:21
  reg  [33:0] dReg;	// ventus/src/pipeline/IntDivMod.scala:49:21
  reg         zeroQReg;	// ventus/src/pipeline/IntDivMod.scala:54:27
  reg  [4:0]  cnt;	// ventus/src/pipeline/IntDivMod.scala:56:20
  reg  [31:0] Q;	// ventus/src/pipeline/IntDivMod.scala:59:18
  reg  [31:0] QN;	// ventus/src/pipeline/IntDivMod.scala:60:19
  reg  [31:0] commonQReg;	// ventus/src/pipeline/IntDivMod.scala:69:29
  reg  [31:0] commonRReg;	// ventus/src/pipeline/IntDivMod.scala:71:29
  wire        _io_out_bits_r_T = divByZeroReg | zeroQReg;	// ventus/src/pipeline/IntDivMod.scala:42:31, :54:27, :77:34
  wire        io_out_valid_0 = state == 3'h4;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/IntDivMod.scala:26:22, :81:24
  always @(posedge clock) begin	// ventus/src/pipeline/IntDivMod.scala:15:7
    automatic logic       _divByZeroReg_T;	// src/main/scala/chisel3/util/Decoupled.scala:51:35
    automatic logic       overflow;	// ventus/src/pipeline/IntDivMod.scala:35:96
    automatic logic       divByZero;	// ventus/src/pipeline/IntDivMod.scala:36:32
    automatic logic [4:0] dLez;	// src/main/scala/chisel3/util/Mux.scala:50:70
    automatic logic       _zeroQReg_T;	// ventus/src/pipeline/IntDivMod.scala:54:41
    _divByZeroReg_T = ~(|state) & io_in_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/pipeline/IntDivMod.scala:26:22, :82:23
    overflow =
      io_in_bits_signed & io_in_bits_a[31] & io_in_bits_a[30:0] == 31'h0
      & (&io_in_bits_d);	// ventus/src/pipeline/IntDivMod.scala:28:53, :35:{88,92,96,112}
    divByZero = io_in_bits_d == 32'h0;	// ventus/src/pipeline/IntDivMod.scala:36:32, :59:18
    dLez =
      unsignedDReg[31]
        ? 5'h0
        : unsignedDReg[30]
            ? 5'h1
            : unsignedDReg[29]
                ? 5'h2
                : unsignedDReg[28]
                    ? 5'h3
                    : unsignedDReg[27]
                        ? 5'h4
                        : unsignedDReg[26]
                            ? 5'h5
                            : unsignedDReg[25]
                                ? 5'h6
                                : unsignedDReg[24]
                                    ? 5'h7
                                    : unsignedDReg[23]
                                        ? 5'h8
                                        : unsignedDReg[22]
                                            ? 5'h9
                                            : unsignedDReg[21]
                                                ? 5'hA
                                                : unsignedDReg[20]
                                                    ? 5'hB
                                                    : unsignedDReg[19]
                                                        ? 5'hC
                                                        : unsignedDReg[18]
                                                            ? 5'hD
                                                            : unsignedDReg[17]
                                                                ? 5'hE
                                                                : unsignedDReg[16]
                                                                    ? 5'hF
                                                                    : unsignedDReg[15]
                                                                        ? 5'h10
                                                                        : unsignedDReg[14]
                                                                            ? 5'h11
                                                                            : unsignedDReg[13]
                                                                                ? 5'h12
                                                                                : unsignedDReg[12]
                                                                                    ? 5'h13
                                                                                    : unsignedDReg[11]
                                                                                        ? 5'h14
                                                                                        : unsignedDReg[10]
                                                                                            ? 5'h15
                                                                                            : unsignedDReg[9]
                                                                                                ? 5'h16
                                                                                                : unsignedDReg[8]
                                                                                                    ? 5'h17
                                                                                                    : unsignedDReg[7]
                                                                                                        ? 5'h18
                                                                                                        : unsignedDReg[6]
                                                                                                            ? 5'h19
                                                                                                            : unsignedDReg[5]
                                                                                                                ? 5'h1A
                                                                                                                : unsignedDReg[4]
                                                                                                                    ? 5'h1B
                                                                                                                    : unsignedDReg[3]
                                                                                                                        ? 5'h1C
                                                                                                                        : unsignedDReg[2]
                                                                                                                            ? 5'h1D
                                                                                                                            : {4'hF,
                                                                                                                               ~(unsignedDReg[1])};	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/IntDivMod.scala:40:31, :45:43, :56:20
    _zeroQReg_T = unsignedAReg < unsignedDReg;	// ventus/src/pipeline/IntDivMod.scala:39:31, :40:31, :54:41
    if (reset) begin	// ventus/src/pipeline/IntDivMod.scala:15:7
      state <= 3'h0;	// ventus/src/pipeline/IntDivMod.scala:26:22
      aReg <= 34'h0;	// ventus/src/pipeline/IntDivMod.scala:48:21
      dReg <= 34'h0;	// ventus/src/pipeline/IntDivMod.scala:48:21, :49:21
      cnt <= 5'h0;	// ventus/src/pipeline/IntDivMod.scala:56:20
      Q <= 32'h0;	// ventus/src/pipeline/IntDivMod.scala:59:18
      QN <= 32'h0;	// ventus/src/pipeline/IntDivMod.scala:59:18, :60:19
    end
    else if (|state) begin	// ventus/src/pipeline/IntDivMod.scala:26:22, :82:23
      automatic logic [62:0] _GEN;	// ventus/src/pipeline/IntDivMod.scala:51:42
      automatic logic [62:0] _dNorm_T;	// ventus/src/pipeline/IntDivMod.scala:51:42
      automatic logic        _GEN_0;	// ventus/src/pipeline/IntDivMod.scala:85:16
      _GEN = {58'h0, dLez};	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/IntDivMod.scala:50:42, :51:42
      _dNorm_T = {31'h0, unsignedDReg} << _GEN;	// ventus/src/pipeline/IntDivMod.scala:35:92, :40:31, :51:42
      _GEN_0 = state == 3'h1;	// ventus/src/pipeline/IntDivMod.scala:26:22, :53:38, :85:16
      if (_GEN_0) begin	// ventus/src/pipeline/IntDivMod.scala:85:16
        automatic logic [4:0] aLez;	// src/main/scala/chisel3/util/Mux.scala:50:70
        aLez =
          unsignedAReg[31]
            ? 5'h0
            : unsignedAReg[30]
                ? 5'h1
                : unsignedAReg[29]
                    ? 5'h2
                    : unsignedAReg[28]
                        ? 5'h3
                        : unsignedAReg[27]
                            ? 5'h4
                            : unsignedAReg[26]
                                ? 5'h5
                                : unsignedAReg[25]
                                    ? 5'h6
                                    : unsignedAReg[24]
                                        ? 5'h7
                                        : unsignedAReg[23]
                                            ? 5'h8
                                            : unsignedAReg[22]
                                                ? 5'h9
                                                : unsignedAReg[21]
                                                    ? 5'hA
                                                    : unsignedAReg[20]
                                                        ? 5'hB
                                                        : unsignedAReg[19]
                                                            ? 5'hC
                                                            : unsignedAReg[18]
                                                                ? 5'hD
                                                                : unsignedAReg[17]
                                                                    ? 5'hE
                                                                    : unsignedAReg[16]
                                                                        ? 5'hF
                                                                        : unsignedAReg[15]
                                                                            ? 5'h10
                                                                            : unsignedAReg[14]
                                                                                ? 5'h11
                                                                                : unsignedAReg[13]
                                                                                    ? 5'h12
                                                                                    : unsignedAReg[12]
                                                                                        ? 5'h13
                                                                                        : unsignedAReg[11]
                                                                                            ? 5'h14
                                                                                            : unsignedAReg[10]
                                                                                                ? 5'h15
                                                                                                : unsignedAReg[9]
                                                                                                    ? 5'h16
                                                                                                    : unsignedAReg[8]
                                                                                                        ? 5'h17
                                                                                                        : unsignedAReg[7]
                                                                                                            ? 5'h18
                                                                                                            : unsignedAReg[6]
                                                                                                                ? 5'h19
                                                                                                                : unsignedAReg[5]
                                                                                                                    ? 5'h1A
                                                                                                                    : unsignedAReg[4]
                                                                                                                        ? 5'h1B
                                                                                                                        : unsignedAReg[3]
                                                                                                                            ? 5'h1C
                                                                                                                            : unsignedAReg[2]
                                                                                                                                ? 5'h1D
                                                                                                                                : {4'hF,
                                                                                                                                   ~(unsignedAReg[1])};	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/IntDivMod.scala:39:31, :44:43, :56:20
        state <= _zeroQReg_T ? 3'h4 : 3'h2;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/IntDivMod.scala:26:22, :54:41, :93:{40,48}, :94:26
        if (~_zeroQReg_T) begin	// ventus/src/pipeline/IntDivMod.scala:54:41
          automatic logic [62:0] _aNorm_T;	// ventus/src/pipeline/IntDivMod.scala:50:42
          _aNorm_T = {31'h0, unsignedAReg} << aLez;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/IntDivMod.scala:35:92, :39:31, :50:42
          aReg <= {2'h0, _aNorm_T[31:0]};	// ventus/src/pipeline/IntDivMod.scala:48:21, :50:{18,42,49}
          Q <= 32'h0;	// ventus/src/pipeline/IntDivMod.scala:59:18
          QN <= 32'h0;	// ventus/src/pipeline/IntDivMod.scala:59:18, :60:19
        end
        cnt <= _zeroQReg_T | aLez > dLez ? 5'h0 : dLez - aLez + 5'h1;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/IntDivMod.scala:46:{17,23,41,48}, :54:41, :56:20, :113:40, :114:13, :118:13
      end
      else if (state == 3'h2) begin	// ventus/src/pipeline/IntDivMod.scala:26:22, :85:16, :94:26
        automatic logic        _cnt_next_T;	// ventus/src/pipeline/IntDivMod.scala:57:25
        automatic logic [4:0]  _cnt_next_T_1;	// ventus/src/pipeline/IntDivMod.scala:57:42
        automatic logic        sel_pos;	// ventus/src/pipeline/IntDivMod.scala:62:37
        automatic logic        sel_neg;	// ventus/src/pipeline/IntDivMod.scala:63:37
        automatic logic [33:0] _GEN_1;	// ventus/src/pipeline/IntDivMod.scala:66:35
        _cnt_next_T = cnt == 5'h0;	// ventus/src/pipeline/IntDivMod.scala:56:20, :57:25
        _cnt_next_T_1 = cnt - 5'h1;	// ventus/src/pipeline/IntDivMod.scala:56:20, :57:42
        sel_pos = aReg[32:31] == 2'h1;	// ventus/src/pipeline/IntDivMod.scala:48:21, :62:{26,34,37}
        sel_neg = aReg[32:31] == 2'h2;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/IntDivMod.scala:48:21, :62:26, :63:{34,37}
        _GEN_1 = {aReg[32:0], 1'h0};	// ventus/src/pipeline/IntDivMod.scala:35:70, :48:21, :65:30, :66:35
        state <= {2'h1, (_cnt_next_T ? 5'h0 : _cnt_next_T_1) == 5'h0};	// ventus/src/pipeline/IntDivMod.scala:26:22, :56:20, :57:{21,25,42}, :62:37, :97:{21,29,37}, :98:26
        if (sel_pos) begin	// ventus/src/pipeline/IntDivMod.scala:62:37
          automatic logic [62:0] _dNegNorm_T_3;	// ventus/src/pipeline/IntDivMod.scala:52:63
          _dNegNorm_T_3 = {31'h0, ~unsignedDReg + 32'h1} << _GEN;	// ventus/src/pipeline/IntDivMod.scala:32:52, :35:92, :40:31, :51:42, :52:{35,57,63}
          aReg <= _GEN_1 + {1'h1, _dNegNorm_T_3[31:0], 1'h0};	// ventus/src/pipeline/IntDivMod.scala:32:52, :35:70, :48:21, :52:{63,70}, :66:35
        end
        else if (sel_neg)	// ventus/src/pipeline/IntDivMod.scala:63:37
          aReg <= _GEN_1 + {1'h0, _dNorm_T[31:0], 1'h0};	// ventus/src/pipeline/IntDivMod.scala:35:70, :48:21, :51:{42,49}, :66:{35,67}
        else	// ventus/src/pipeline/IntDivMod.scala:63:37
          aReg <= {aReg[32:0], 1'h0};	// ventus/src/pipeline/IntDivMod.scala:35:70, :48:21, :65:30
        if (_cnt_next_T)	// ventus/src/pipeline/IntDivMod.scala:57:25
          cnt <= 5'h0;	// ventus/src/pipeline/IntDivMod.scala:56:20
        else	// ventus/src/pipeline/IntDivMod.scala:57:25
          cnt <= _cnt_next_T_1;	// ventus/src/pipeline/IntDivMod.scala:56:20, :57:42
        Q <= {Q[30:0], sel_pos};	// ventus/src/pipeline/IntDivMod.scala:59:18, :62:37, :126:{15,22}
        QN <= {QN[30:0], sel_neg};	// ventus/src/pipeline/IntDivMod.scala:60:19, :63:37, :127:{16,24}
      end
      else begin	// ventus/src/pipeline/IntDivMod.scala:85:16
        automatic logic _GEN_2;	// ventus/src/pipeline/IntDivMod.scala:85:16
        automatic logic _GEN_3;	// ventus/src/pipeline/IntDivMod.scala:85:16
        _GEN_2 = state == 3'h3;	// ventus/src/pipeline/IntDivMod.scala:26:22, :69:83, :85:16
        _GEN_3 = state == 3'h4;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/IntDivMod.scala:26:22, :85:16
        if (_GEN_2)	// ventus/src/pipeline/IntDivMod.scala:85:16
          state <= 3'h4;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/IntDivMod.scala:26:22
        else if (_GEN_3 & io_out_ready & io_out_valid_0)	// ventus/src/pipeline/IntDivMod.scala:26:22, :81:24, :85:16, :102:{24,32}
          state <= 3'h0;	// ventus/src/pipeline/IntDivMod.scala:26:22
        if (_GEN_2 | _GEN_3)	// ventus/src/pipeline/IntDivMod.scala:56:20, :85:16, :106:16, :130:11, :133:11
          cnt <= 5'h0;	// ventus/src/pipeline/IntDivMod.scala:56:20
      end
      if (~_GEN_0 | _zeroQReg_T) begin	// ventus/src/pipeline/IntDivMod.scala:49:21, :54:41, :85:16, :106:16, :113:40
      end
      else	// ventus/src/pipeline/IntDivMod.scala:49:21, :106:16, :113:40
        dReg <= {1'h0, _dNorm_T[31:0], 1'h0};	// ventus/src/pipeline/IntDivMod.scala:35:70, :49:21, :51:{18,42,49}
    end
    else begin	// ventus/src/pipeline/IntDivMod.scala:82:23
      if (_divByZeroReg_T)	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        state <= overflow | divByZero ? 3'h4 : 3'h1;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/IntDivMod.scala:26:22, :35:96, :36:32, :53:38, :88:{23,36,44}, :89:28
      aReg <= 34'h0;	// ventus/src/pipeline/IntDivMod.scala:48:21
      dReg <= 34'h0;	// ventus/src/pipeline/IntDivMod.scala:48:21, :49:21
      cnt <= 5'h0;	// ventus/src/pipeline/IntDivMod.scala:56:20
    end
    if (_divByZeroReg_T) begin	// src/main/scala/chisel3/util/Decoupled.scala:51:35
      automatic logic aSign = io_in_bits_signed & io_in_bits_a[31];	// ventus/src/pipeline/IntDivMod.scala:28:{33,53}
      automatic logic dSign = io_in_bits_signed & io_in_bits_d[31];	// ventus/src/pipeline/IntDivMod.scala:29:{33,53}
      qSignReg <= aSign ^ dSign;	// ventus/src/pipeline/IntDivMod.scala:28:33, :29:33, :30:{27,34}
      rSignReg <= aSign;	// ventus/src/pipeline/IntDivMod.scala:28:33, :31:27
      rawAReg <= io_in_bits_a;	// ventus/src/pipeline/IntDivMod.scala:38:26
      unsignedAReg <= aSign ? ~io_in_bits_a + 32'h1 : io_in_bits_a;	// ventus/src/pipeline/IntDivMod.scala:28:33, :32:{22,31,52}, :39:31
      unsignedDReg <= dSign ? ~io_in_bits_d + 32'h1 : io_in_bits_d;	// ventus/src/pipeline/IntDivMod.scala:29:33, :32:52, :33:{22,31,52}, :40:31
      overflowReg <= overflow;	// ventus/src/pipeline/IntDivMod.scala:35:96, :41:30
      divByZeroReg <= divByZero;	// ventus/src/pipeline/IntDivMod.scala:36:32, :42:31
    end
    if (state == 3'h1)	// ventus/src/pipeline/IntDivMod.scala:26:22, :53:38
      zeroQReg <= _zeroQReg_T;	// ventus/src/pipeline/IntDivMod.scala:54:{27,41}
    if (state == 3'h3) begin	// ventus/src/pipeline/IntDivMod.scala:26:22, :69:83
      commonQReg <= aReg[33] ? Q + ~QN : Q - QN;	// ventus/src/pipeline/IntDivMod.scala:48:21, :59:18, :60:19, :68:27, :69:{29,33,53,56,71}
      commonRReg <= (aReg[33] ? aReg[32:1] + dReg[32:1] : aReg[32:1]) >> dLez;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/IntDivMod.scala:48:21, :49:21, :62:26, :68:27, :70:{22,57,63,73,81,106}, :71:{29,40}
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// ventus/src/pipeline/IntDivMod.scala:15:7
    `ifdef FIRRTL_BEFORE_INITIAL	// ventus/src/pipeline/IntDivMod.scala:15:7
      `FIRRTL_BEFORE_INITIAL	// ventus/src/pipeline/IntDivMod.scala:15:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// ventus/src/pipeline/IntDivMod.scala:15:7
      automatic logic [31:0] _RANDOM[0:9];	// ventus/src/pipeline/IntDivMod.scala:15:7
      `ifdef INIT_RANDOM_PROLOG_	// ventus/src/pipeline/IntDivMod.scala:15:7
        `INIT_RANDOM_PROLOG_	// ventus/src/pipeline/IntDivMod.scala:15:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// ventus/src/pipeline/IntDivMod.scala:15:7
        for (logic [3:0] i = 4'h0; i < 4'hA; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;	// ventus/src/pipeline/IntDivMod.scala:15:7
        end	// ventus/src/pipeline/IntDivMod.scala:15:7
        state = _RANDOM[4'h0][2:0];	// ventus/src/pipeline/IntDivMod.scala:15:7, :26:22
        qSignReg = _RANDOM[4'h0][3];	// ventus/src/pipeline/IntDivMod.scala:15:7, :26:22, :30:27
        rSignReg = _RANDOM[4'h0][4];	// ventus/src/pipeline/IntDivMod.scala:15:7, :26:22, :31:27
        rawAReg = {_RANDOM[4'h0][31:5], _RANDOM[4'h1][4:0]};	// ventus/src/pipeline/IntDivMod.scala:15:7, :26:22, :38:26
        unsignedAReg = {_RANDOM[4'h1][31:5], _RANDOM[4'h2][4:0]};	// ventus/src/pipeline/IntDivMod.scala:15:7, :38:26, :39:31
        unsignedDReg = {_RANDOM[4'h2][31:5], _RANDOM[4'h3][4:0]};	// ventus/src/pipeline/IntDivMod.scala:15:7, :39:31, :40:31
        overflowReg = _RANDOM[4'h3][5];	// ventus/src/pipeline/IntDivMod.scala:15:7, :40:31, :41:30
        divByZeroReg = _RANDOM[4'h3][6];	// ventus/src/pipeline/IntDivMod.scala:15:7, :40:31, :42:31
        aReg = {_RANDOM[4'h3][31:7], _RANDOM[4'h4][8:0]};	// ventus/src/pipeline/IntDivMod.scala:15:7, :40:31, :48:21
        dReg = {_RANDOM[4'h4][31:9], _RANDOM[4'h5][10:0]};	// ventus/src/pipeline/IntDivMod.scala:15:7, :48:21, :49:21
        zeroQReg = _RANDOM[4'h5][16];	// ventus/src/pipeline/IntDivMod.scala:15:7, :49:21, :54:27
        cnt = _RANDOM[4'h5][21:17];	// ventus/src/pipeline/IntDivMod.scala:15:7, :49:21, :56:20
        Q = {_RANDOM[4'h5][31:22], _RANDOM[4'h6][21:0]};	// ventus/src/pipeline/IntDivMod.scala:15:7, :49:21, :59:18
        QN = {_RANDOM[4'h6][31:22], _RANDOM[4'h7][21:0]};	// ventus/src/pipeline/IntDivMod.scala:15:7, :59:18, :60:19
        commonQReg = {_RANDOM[4'h7][31:22], _RANDOM[4'h8][21:0]};	// ventus/src/pipeline/IntDivMod.scala:15:7, :60:19, :69:29
        commonRReg = {_RANDOM[4'h8][31:22], _RANDOM[4'h9][21:0]};	// ventus/src/pipeline/IntDivMod.scala:15:7, :69:29, :71:29
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// ventus/src/pipeline/IntDivMod.scala:15:7
      `FIRRTL_AFTER_INITIAL	// ventus/src/pipeline/IntDivMod.scala:15:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = ~(|state);	// ventus/src/pipeline/IntDivMod.scala:15:7, :26:22, :82:23
  assign io_out_valid = io_out_valid_0;	// ventus/src/pipeline/IntDivMod.scala:15:7, :81:24
  assign io_out_bits_q =
    _io_out_bits_r_T | overflowReg
      ? (divByZeroReg ? 32'hFFFFFFFF : {overflowReg, 31'h0})
      : qSignReg ? ~commonQReg + 32'h1 : commonQReg;	// ventus/src/pipeline/IntDivMod.scala:15:7, :30:27, :32:52, :35:92, :41:30, :42:31, :69:29, :73:{20,32,52}, :75:{21,51,62}, :77:34, :79:{23,46}
  assign io_out_bits_r =
    _io_out_bits_r_T | overflowReg
      ? (_io_out_bits_r_T ? rawAReg : 32'h0)
      : rSignReg ? ~commonRReg + 32'h1 : commonRReg;	// ventus/src/pipeline/IntDivMod.scala:15:7, :31:27, :32:52, :38:26, :41:30, :59:18, :71:29, :74:{20,32,52}, :77:{21,34}, :80:{23,46}
endmodule

