// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module cluster2L2Arbiter(	// ventus/src/top/GPGPU_top.scala:589:7
  output          io_memReqVecIn_0_ready,	// ventus/src/top/GPGPU_top.scala:590:14
  input           io_memReqVecIn_0_valid,	// ventus/src/top/GPGPU_top.scala:590:14
  input  [2:0]    io_memReqVecIn_0_bits_opcode,	// ventus/src/top/GPGPU_top.scala:590:14
  input  [14:0]   io_memReqVecIn_0_bits_source,	// ventus/src/top/GPGPU_top.scala:590:14
  input  [31:0]   io_memReqVecIn_0_bits_address,	// ventus/src/top/GPGPU_top.scala:590:14
  input  [127:0]  io_memReqVecIn_0_bits_mask,	// ventus/src/top/GPGPU_top.scala:590:14
  input  [1023:0] io_memReqVecIn_0_bits_data,	// ventus/src/top/GPGPU_top.scala:590:14
  input  [2:0]    io_memReqVecIn_0_bits_param,	// ventus/src/top/GPGPU_top.scala:590:14
  input  [31:0]   io_memReqVecIn_0_bits_spike_info_pc,	// ventus/src/top/GPGPU_top.scala:590:14
                  io_memReqVecIn_0_bits_spike_info_vaddr,	// ventus/src/top/GPGPU_top.scala:590:14
  input           io_memReqOut_ready,	// ventus/src/top/GPGPU_top.scala:590:14
  output          io_memReqOut_valid,	// ventus/src/top/GPGPU_top.scala:590:14
  output [2:0]    io_memReqOut_bits_opcode,	// ventus/src/top/GPGPU_top.scala:590:14
  output [14:0]   io_memReqOut_bits_source,	// ventus/src/top/GPGPU_top.scala:590:14
  output [31:0]   io_memReqOut_bits_address,	// ventus/src/top/GPGPU_top.scala:590:14
  output [127:0]  io_memReqOut_bits_mask,	// ventus/src/top/GPGPU_top.scala:590:14
  output [1023:0] io_memReqOut_bits_data,	// ventus/src/top/GPGPU_top.scala:590:14
  output [2:0]    io_memReqOut_bits_param,	// ventus/src/top/GPGPU_top.scala:590:14
  output [31:0]   io_memReqOut_bits_spike_info_pc,	// ventus/src/top/GPGPU_top.scala:590:14
                  io_memReqOut_bits_spike_info_vaddr,	// ventus/src/top/GPGPU_top.scala:590:14
  output          io_memRspIn_ready,	// ventus/src/top/GPGPU_top.scala:590:14
  input           io_memRspIn_valid,	// ventus/src/top/GPGPU_top.scala:590:14
  input  [2:0]    io_memRspIn_bits_opcode,	// ventus/src/top/GPGPU_top.scala:590:14
  input  [14:0]   io_memRspIn_bits_source,	// ventus/src/top/GPGPU_top.scala:590:14
  input  [1023:0] io_memRspIn_bits_data,	// ventus/src/top/GPGPU_top.scala:590:14
  input  [31:0]   io_memRspIn_bits_address,	// ventus/src/top/GPGPU_top.scala:590:14
  input           io_memRspVecOut_0_ready,	// ventus/src/top/GPGPU_top.scala:590:14
  output          io_memRspVecOut_0_valid,	// ventus/src/top/GPGPU_top.scala:590:14
  output [2:0]    io_memRspVecOut_0_bits_opcode,	// ventus/src/top/GPGPU_top.scala:590:14
  output [14:0]   io_memRspVecOut_0_bits_source,	// ventus/src/top/GPGPU_top.scala:590:14
  output [1023:0] io_memRspVecOut_0_bits_data,	// ventus/src/top/GPGPU_top.scala:590:14
  output [31:0]   io_memRspVecOut_0_bits_address	// ventus/src/top/GPGPU_top.scala:590:14
);

  Arbiter1_TLBundleA_lite memReqArb (	// ventus/src/top/GPGPU_top.scala:593:25
    .io_in_0_ready                 (io_memReqVecIn_0_ready),
    .io_in_0_valid                 (io_memReqVecIn_0_valid),
    .io_in_0_bits_opcode           (io_memReqVecIn_0_bits_opcode),
    .io_in_0_bits_source           (io_memReqVecIn_0_bits_source),
    .io_in_0_bits_address          (io_memReqVecIn_0_bits_address),
    .io_in_0_bits_mask             (io_memReqVecIn_0_bits_mask),
    .io_in_0_bits_data             (io_memReqVecIn_0_bits_data),
    .io_in_0_bits_param            (io_memReqVecIn_0_bits_param),
    .io_in_0_bits_spike_info_pc    (io_memReqVecIn_0_bits_spike_info_pc),
    .io_in_0_bits_spike_info_vaddr (io_memReqVecIn_0_bits_spike_info_vaddr),
    .io_out_ready                  (io_memReqOut_ready),
    .io_out_valid                  (io_memReqOut_valid),
    .io_out_bits_opcode            (io_memReqOut_bits_opcode),
    .io_out_bits_source            (io_memReqOut_bits_source),
    .io_out_bits_address           (io_memReqOut_bits_address),
    .io_out_bits_mask              (io_memReqOut_bits_mask),
    .io_out_bits_data              (io_memReqOut_bits_data),
    .io_out_bits_param             (io_memReqOut_bits_param),
    .io_out_bits_spike_info_pc     (io_memReqOut_bits_spike_info_pc),
    .io_out_bits_spike_info_vaddr  (io_memReqOut_bits_spike_info_vaddr)
  );
  assign io_memRspIn_ready = io_memRspVecOut_0_ready;	// ventus/src/top/GPGPU_top.scala:589:7
  assign io_memRspVecOut_0_valid = io_memRspIn_valid;	// ventus/src/top/GPGPU_top.scala:589:7
  assign io_memRspVecOut_0_bits_opcode = io_memRspIn_bits_opcode;	// ventus/src/top/GPGPU_top.scala:589:7
  assign io_memRspVecOut_0_bits_source = {1'h0, io_memRspIn_bits_source[13:0]};	// ventus/src/top/GPGPU_top.scala:589:7, :621:{35,60}
  assign io_memRspVecOut_0_bits_data = io_memRspIn_bits_data;	// ventus/src/top/GPGPU_top.scala:589:7
  assign io_memRspVecOut_0_bits_address = io_memRspIn_bits_address;	// ventus/src/top/GPGPU_top.scala:589:7
endmodule

