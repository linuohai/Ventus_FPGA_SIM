// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module genControl(	// ventus/src/L1Cache/DCache/DCache.scala:40:7
  input  [2:0] io_opcode,	// ventus/src/L1Cache/DCache/DCache.scala:41:14
  input  [3:0] io_param,	// ventus/src/L1Cache/DCache/DCache.scala:41:14
  output       io_control_isRead,	// ventus/src/L1Cache/DCache/DCache.scala:41:14
               io_control_isWrite,	// ventus/src/L1Cache/DCache/DCache.scala:41:14
               io_control_isLR,	// ventus/src/L1Cache/DCache/DCache.scala:41:14
               io_control_isSC,	// ventus/src/L1Cache/DCache/DCache.scala:41:14
               io_control_isAMO,	// ventus/src/L1Cache/DCache/DCache.scala:41:14
               io_control_isFlush,	// ventus/src/L1Cache/DCache/DCache.scala:41:14
               io_control_isInvalidate,	// ventus/src/L1Cache/DCache/DCache.scala:41:14
               io_control_isWaitMSHR	// ventus/src/L1Cache/DCache/DCache.scala:41:14
);

  wire _GEN = io_opcode == 3'h0;	// ventus/src/L1Cache/DCache/DCache.scala:55:20
  wire _GEN_0 = io_param == 4'h0;	// ventus/src/L1Cache/DCache/DCache.scala:57:21
  wire _GEN_1 = io_param == 4'h1;	// ventus/src/L1Cache/DCache/DCache.scala:59:27
  wire _GEN_2 = ~_GEN_0 & _GEN_1;	// ventus/src/L1Cache/DCache/DCache.scala:48:19, :57:{21,29}, :59:{27,36}
  wire _GEN_3 = io_opcode == 3'h1;	// ventus/src/L1Cache/DCache/DCache.scala:55:20
  wire _GEN_4 = io_opcode == 3'h2;	// ventus/src/L1Cache/DCache/DCache.scala:55:20
  wire _GEN_5 = io_opcode == 3'h3;	// ventus/src/L1Cache/DCache/DCache.scala:55:20
  wire _GEN_6 = _GEN | _GEN_3 | _GEN_4;	// ventus/src/L1Cache/DCache/DCache.scala:52:27, :55:20
  assign io_control_isRead = _GEN & _GEN_0;	// ventus/src/L1Cache/DCache/DCache.scala:40:7, :46:21, :55:20, :57:{21,29}
  assign io_control_isWrite = ~_GEN & _GEN_3 & _GEN_0;	// ventus/src/L1Cache/DCache/DCache.scala:40:7, :47:22, :55:20, :57:21
  assign io_control_isLR = _GEN & _GEN_2;	// ventus/src/L1Cache/DCache/DCache.scala:40:7, :48:19, :55:20, :57:29, :59:36
  assign io_control_isSC = ~_GEN & _GEN_3 & _GEN_2;	// ventus/src/L1Cache/DCache/DCache.scala:40:7, :47:22, :48:19, :49:19, :55:20, :57:29, :59:36
  assign io_control_isAMO = ~(_GEN | _GEN_3) & _GEN_4;	// ventus/src/L1Cache/DCache/DCache.scala:40:7, :50:20, :55:20
  assign io_control_isFlush = ~_GEN_6 & _GEN_5 & _GEN_2;	// ventus/src/L1Cache/DCache/DCache.scala:40:7, :48:19, :51:22, :52:27, :55:20, :57:29, :59:36
  assign io_control_isInvalidate = ~_GEN_6 & _GEN_5 & _GEN_0;	// ventus/src/L1Cache/DCache/DCache.scala:40:7, :52:27, :55:20, :57:21
  assign io_control_isWaitMSHR = ~_GEN_6 & _GEN_5 & ~(_GEN_0 | _GEN_1) & io_param == 4'h2;	// ventus/src/L1Cache/DCache/DCache.scala:40:7, :52:27, :53:25, :55:20, :57:21, :59:27, :74:30, :76:36, :78:{27,35}
endmodule

