// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module DCacheWSHR(	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
  input         clock,	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
                reset,	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
  output        io_pushReq_ready,	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:13:14
  input         io_pushReq_valid,	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:13:14
  input  [26:0] io_pushReq_bits_blockAddr,	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:13:14
  output        io_conflict,	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:13:14
  output [1:0]  io_pushedIdx,	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:13:14
  output        io_empty,	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:13:14
  input         io_popReq_valid,	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:13:14
  input  [1:0]  io_popReq_bits	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:13:14
);

  reg  [26:0] blockAddrEntries_0;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:33
  reg  [26:0] blockAddrEntries_1;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:33
  reg  [26:0] blockAddrEntries_2;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:33
  reg  [26:0] blockAddrEntries_3;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:33
  reg         valid_0;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:33
  reg         valid_1;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:33
  reg         valid_2;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:33
  reg         valid_3;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:33
  wire        _pushMatchMask_T_1 =
    blockAddrEntries_0 == io_pushReq_bits_blockAddr & valid_0;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:33, :26:33, :32:{27,58}
  wire        _pushMatchMask_T_3 =
    blockAddrEntries_1 == io_pushReq_bits_blockAddr & valid_1;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:33, :26:33, :32:{27,58}
  wire        _pushMatchMask_T_5 =
    blockAddrEntries_2 == io_pushReq_bits_blockAddr & valid_2;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:33, :26:33, :32:{27,58}
  wire        _pushMatchMask_T_7 =
    blockAddrEntries_3 == io_pushReq_bits_blockAddr & valid_3;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:33, :26:33, :32:{27,58}
  `ifndef SYNTHESIS	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:33:9
    always @(posedge clock) begin	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:33:9
      automatic logic [2:0] _GEN =
        {1'h0, {1'h0, _pushMatchMask_T_1} + {1'h0, _pushMatchMask_T_3}}
        + {1'h0, {1'h0, _pushMatchMask_T_5} + {1'h0, _pushMatchMask_T_7}};	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:41, :32:58, :33:18
      if (~reset & (|(_GEN[2:1]))) begin	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:33:{9,18,34}
        if (`ASSERT_VERBOSE_COND_)	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:33:9
          $error("Assertion failed: WSHR dont store same bA in 2 entries\n    at DCacheWSHR.scala:33 assert(PopCount(pushMatchMask) <= 1.U,\"WSHR dont store same bA in 2 entries\")\n");	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:33:9
        if (`STOP_COND_)	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:33:9
          $fatal;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:33:9
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _io_pushReq_ready_T_2 = valid_0 & valid_1 & valid_2 & valid_3;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:33, :37:43
  wire [1:0]  nextEntryIdx = valid_0 ? (valid_1 ? {1'h1, valid_2} : 2'h1) : 2'h0;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :26:33, :33:34, :39:38
  wire        _PopPushInSameCycle_T = ~_io_pushReq_ready_T_2 & io_pushReq_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/L1Cache/DCache/DCacheWSHR.scala:37:{23,43}
  always @(posedge clock) begin	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
    if (reset) begin	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
      blockAddrEntries_0 <= 27'h0;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:{33,41}
      blockAddrEntries_1 <= 27'h0;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:{33,41}
      blockAddrEntries_2 <= 27'h0;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:{33,41}
      blockAddrEntries_3 <= 27'h0;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:{33,41}
      valid_0 <= 1'h0;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:{33,41}
      valid_1 <= 1'h0;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:{33,41}
      valid_2 <= 1'h0;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:{33,41}
      valid_3 <= 1'h0;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:{33,41}
    end
    else begin	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
      automatic logic _GEN_0 = _PopPushInSameCycle_T & io_popReq_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/L1Cache/DCache/DCacheWSHR.scala:42:24
      automatic logic _GEN_1;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:43:38
      automatic logic _GEN_2;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:43:38
      automatic logic _GEN_3;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:43:38
      automatic logic _GEN_4;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:46:36
      automatic logic _GEN_5;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:46:36
      automatic logic _GEN_6;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:46:36
      _GEN_1 = io_popReq_bits == 2'h0;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :43:38
      _GEN_2 = io_popReq_bits == 2'h1;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :43:38
      _GEN_3 = io_popReq_bits == 2'h2;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :43:38
      _GEN_4 = nextEntryIdx == 2'h0;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :39:38, :46:36
      _GEN_5 = nextEntryIdx == 2'h1;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :39:38, :46:36
      _GEN_6 = nextEntryIdx == 2'h2;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :39:38, :46:36
      if (_GEN_0 ? _GEN_1 : _PopPushInSameCycle_T & _GEN_4)	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:33, :42:{24,42}, :43:38, :45:30, :46:36
        blockAddrEntries_0 <= io_pushReq_bits_blockAddr;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:33
      if (_GEN_0 ? _GEN_2 : _PopPushInSameCycle_T & _GEN_5)	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:33, :42:{24,42}, :43:38, :45:30, :46:36
        blockAddrEntries_1 <= io_pushReq_bits_blockAddr;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:33
      if (_GEN_0 ? _GEN_3 : _PopPushInSameCycle_T & _GEN_6)	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:33, :42:{24,42}, :43:38, :45:30, :46:36
        blockAddrEntries_2 <= io_pushReq_bits_blockAddr;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:33
      if (_GEN_0 ? (&io_popReq_bits) : _PopPushInSameCycle_T & (&nextEntryIdx))	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:33, :39:38, :42:{24,42}, :43:38, :45:30, :46:36
        blockAddrEntries_3 <= io_pushReq_bits_blockAddr;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:25:33
      if (_GEN_0) begin	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:42:24
        valid_0 <= _GEN_1 | valid_0;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:33, :43:38, :44:27
        valid_1 <= _GEN_2 | valid_1;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:33, :43:38, :44:27
        valid_2 <= _GEN_3 | valid_2;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:33, :43:38, :44:27
        valid_3 <= (&io_popReq_bits) | valid_3;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:33, :43:38, :44:27
      end
      else if (_PopPushInSameCycle_T) begin	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        valid_0 <= _GEN_4 | valid_0;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:33, :46:36, :47:25
        valid_1 <= _GEN_5 | valid_1;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:33, :46:36, :47:25
        valid_2 <= _GEN_6 | valid_2;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:33, :46:36, :47:25
        valid_3 <= (&nextEntryIdx) | valid_3;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:33, :39:38, :46:36, :47:25
      end
      else begin	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        valid_0 <= ~(io_popReq_valid & _GEN_1) & valid_0;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:33, :43:38, :48:30, :49:27
        valid_1 <= ~(io_popReq_valid & _GEN_2) & valid_1;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:33, :43:38, :48:30, :49:27
        valid_2 <= ~(io_popReq_valid & _GEN_3) & valid_2;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:33, :43:38, :48:30, :49:27
        valid_3 <= ~(io_popReq_valid & (&io_popReq_bits)) & valid_3;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:26:33, :43:38, :48:30, :49:27
      end
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
    `ifdef FIRRTL_BEFORE_INITIAL	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
      `FIRRTL_BEFORE_INITIAL	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
      automatic logic [31:0] _RANDOM[0:3];	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
      `ifdef INIT_RANDOM_PROLOG_	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
        `INIT_RANDOM_PROLOG_	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
        end	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
        blockAddrEntries_0 = _RANDOM[2'h0][26:0];	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :25:33
        blockAddrEntries_1 = {_RANDOM[2'h0][31:27], _RANDOM[2'h1][21:0]};	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :25:33
        blockAddrEntries_2 = {_RANDOM[2'h1][31:22], _RANDOM[2'h2][16:0]};	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :25:33
        blockAddrEntries_3 = {_RANDOM[2'h2][31:17], _RANDOM[2'h3][11:0]};	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :25:33
        valid_0 = _RANDOM[2'h3][12];	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :25:33, :26:33
        valid_1 = _RANDOM[2'h3][13];	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :25:33, :26:33
        valid_2 = _RANDOM[2'h3][14];	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :25:33, :26:33
        valid_3 = _RANDOM[2'h3][15];	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :25:33, :26:33
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
      `FIRRTL_AFTER_INITIAL	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_pushReq_ready = ~_io_pushReq_ready_T_2;	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :37:{23,43}
  assign io_conflict =
    |{_pushMatchMask_T_7, _pushMatchMask_T_5, _pushMatchMask_T_3, _pushMatchMask_T_1};	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :31:27, :32:58, :34:32
  assign io_pushedIdx =
    _PopPushInSameCycle_T & io_popReq_valid ? io_popReq_bits : nextEntryIdx;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :39:38, :40:44, :41:22
  assign io_empty = ~(valid_0 | valid_1 | valid_2 | valid_3);	// ventus/src/L1Cache/DCache/DCacheWSHR.scala:12:7, :26:33, :27:{15,34}
endmodule

