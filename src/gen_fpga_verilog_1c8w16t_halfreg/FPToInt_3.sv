// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module FPToInt_3(	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
  input         clock,	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
                reset,	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
                io_in_valid,	// dependencies/fpuv2/src/main/scala/utils/FPUSubModule.scala:70:14
  input  [2:0]  io_in_bits_op,	// dependencies/fpuv2/src/main/scala/utils/FPUSubModule.scala:70:14
  input  [63:0] io_in_bits_a,	// dependencies/fpuv2/src/main/scala/utils/FPUSubModule.scala:70:14
  input  [2:0]  io_in_bits_rm,	// dependencies/fpuv2/src/main/scala/utils/FPUSubModule.scala:70:14
  input         io_out_ready,	// dependencies/fpuv2/src/main/scala/utils/FPUSubModule.scala:70:14
  output        io_out_valid,	// dependencies/fpuv2/src/main/scala/utils/FPUSubModule.scala:70:14
  output [63:0] io_out_bits_result	// dependencies/fpuv2/src/main/scala/utils/FPUSubModule.scala:70:14
);

  wire [63:0] _F2ICore_io_result;	// dependencies/fpuv2/src/main/scala/FPToInt.scala:14:23
  reg         REG;	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:16:58
  reg         REG_1;	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:16:58
  reg         isSingle;	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
  reg  [1:0]  coreOp;	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
  reg  [63:0] src;	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
  reg  [2:0]  rm;	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
  reg         io_out_bits_result_r;	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
  reg  [63:0] io_out_bits_result_r_1;	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
  always @(posedge clock) begin	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
    automatic logic _rm_T_1;	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:18:53
    _rm_T_1 = REG & REG_1;	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:16:58, :18:53
    if (reset) begin	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
      REG <= 1'h0;	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:16:58
      REG_1 <= 1'h0;	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:16:58
    end
    else begin	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
      if (~(~io_out_ready & _rm_T_1))	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:18:{12,26,53}
        REG <= io_in_valid;	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:16:58
      if (~(~io_out_ready & REG_1))	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:16:58, :18:{12,26}
        REG_1 <= REG;	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:16:58
    end
    if (io_in_valid & ~(~io_out_ready & _rm_T_1))	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:18:{12,53}, :26:{79,82,98}
      isSingle <= ~(io_in_bits_op[2]);	// dependencies/fpuv2/src/main/scala/FPToInt.scala:16:24, dependencies/fpuv2/src/main/scala/utils/FPUOps.scala:105:41, dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
    if (io_in_valid & ~(~io_out_ready & _rm_T_1))	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:18:{12,53}, :26:{79,82,98}
      coreOp <= io_in_bits_op[1:0];	// dependencies/fpuv2/src/main/scala/FPToInt.scala:17:35, dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
    if (io_in_valid & ~(~io_out_ready & _rm_T_1))	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:18:{12,53}, :26:{79,82,98}
      src <= io_in_bits_a;	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
    if (io_in_valid & ~(~io_out_ready & _rm_T_1))	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:18:{12,53}, :26:{79,82,98}
      rm <= io_in_bits_rm;	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
    if (REG & ~(~io_out_ready & REG_1))	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:16:58, :18:12, :26:{79,82,98}
      io_out_bits_result_r <= isSingle;	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
    if (REG & ~(~io_out_ready & REG_1))	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:16:58, :18:12, :26:{79,82,98}
      io_out_bits_result_r_1 <= _F2ICore_io_result;	// dependencies/fpuv2/src/main/scala/FPToInt.scala:14:23, dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
    `ifdef FIRRTL_BEFORE_INITIAL	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
      `FIRRTL_BEFORE_INITIAL	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
      automatic logic [31:0] _RANDOM[0:4];	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
      `ifdef INIT_RANDOM_PROLOG_	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
        `INIT_RANDOM_PROLOG_	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
        end	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
        REG = _RANDOM[3'h0][0];	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7, dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:16:58
        REG_1 = _RANDOM[3'h0][1];	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7, dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:16:58
        isSingle = _RANDOM[3'h0][2];	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7, dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:16:58, :26:58
        coreOp = _RANDOM[3'h0][4:3];	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7, dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:16:58, :26:58
        src = {_RANDOM[3'h0][31:5], _RANDOM[3'h1], _RANDOM[3'h2][4:0]};	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7, dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:16:58, :26:58
        rm = _RANDOM[3'h2][7:5];	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7, dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
        io_out_bits_result_r = _RANDOM[3'h2][14];	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7, dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
        io_out_bits_result_r_1 =
          {_RANDOM[3'h2][31:15], _RANDOM[3'h3], _RANDOM[3'h4][14:0]};	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7, dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
      `FIRRTL_AFTER_INITIAL	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  FPToInt F2ICore (	// dependencies/fpuv2/src/main/scala/FPToInt.scala:14:23
    .io_a      (isSingle ? src[31:0] : 32'h0),	// dependencies/fpuv2/src/main/scala/FPToInt.scala:22:{22,36}, dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
    .io_rm     (rm),	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
    .io_op     (coreOp),	// dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
    .io_result (_F2ICore_io_result)
  );
  assign io_out_valid = REG_1;	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7, dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:16:58
  assign io_out_bits_result = io_out_bits_result_r ? io_out_bits_result_r_1 : 64'h0;	// dependencies/fpuv2/src/main/scala/FPToInt.scala:10:7, :26:28, dependencies/fpuv2/src/main/scala/utils/HasPipelineReg.scala:26:58
endmodule

