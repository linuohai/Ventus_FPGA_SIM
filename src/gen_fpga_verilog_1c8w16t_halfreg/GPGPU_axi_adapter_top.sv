// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module GPGPU_axi_adapter_top(	// ventus/src/top/GPGPU_top.scala:137:7
  input         clock,	// ventus/src/top/GPGPU_top.scala:137:7
                reset,	// ventus/src/top/GPGPU_top.scala:137:7
  input  [31:0] io_s_aw_awaddr,	// ventus/src/top/GPGPU_top.scala:140:12
  input  [2:0]  io_s_aw_awprot,	// ventus/src/top/GPGPU_top.scala:140:12
  input         io_s_aw_awvalid,	// ventus/src/top/GPGPU_top.scala:140:12
  output        io_s_aw_awready,	// ventus/src/top/GPGPU_top.scala:140:12
  input  [11:0] io_s_aw_awid,	// ventus/src/top/GPGPU_top.scala:140:12
  input  [31:0] io_s_w_wdata,	// ventus/src/top/GPGPU_top.scala:140:12
  input  [3:0]  io_s_w_wstrb,	// ventus/src/top/GPGPU_top.scala:140:12
  input         io_s_w_wvalid,	// ventus/src/top/GPGPU_top.scala:140:12
  output        io_s_w_wready,	// ventus/src/top/GPGPU_top.scala:140:12
  input  [11:0] io_s_w_wid,	// ventus/src/top/GPGPU_top.scala:140:12
  output [1:0]  io_s_b_bresp,	// ventus/src/top/GPGPU_top.scala:140:12
  output        io_s_b_bvalid,	// ventus/src/top/GPGPU_top.scala:140:12
  input         io_s_b_bready,	// ventus/src/top/GPGPU_top.scala:140:12
  output [11:0] io_s_b_bid,	// ventus/src/top/GPGPU_top.scala:140:12
  input  [31:0] io_s_ar_araddr,	// ventus/src/top/GPGPU_top.scala:140:12
  input  [2:0]  io_s_ar_arprot,	// ventus/src/top/GPGPU_top.scala:140:12
  input         io_s_ar_arvalid,	// ventus/src/top/GPGPU_top.scala:140:12
  output        io_s_ar_arready,	// ventus/src/top/GPGPU_top.scala:140:12
  input  [11:0] io_s_ar_arid,	// ventus/src/top/GPGPU_top.scala:140:12
  output [31:0] io_s_r_rdata,	// ventus/src/top/GPGPU_top.scala:140:12
  output [1:0]  io_s_r_rresp,	// ventus/src/top/GPGPU_top.scala:140:12
  output        io_s_r_rvalid,	// ventus/src/top/GPGPU_top.scala:140:12
  input         io_s_r_rready,	// ventus/src/top/GPGPU_top.scala:140:12
  output [11:0] io_s_r_rid,	// ventus/src/top/GPGPU_top.scala:140:12
  input         io_m_aw_ready,	// ventus/src/top/GPGPU_top.scala:140:12
  output        io_m_aw_valid,	// ventus/src/top/GPGPU_top.scala:140:12
  output [4:0]  io_m_aw_bits_id,	// ventus/src/top/GPGPU_top.scala:140:12
  output [31:0] io_m_aw_bits_addr,	// ventus/src/top/GPGPU_top.scala:140:12
  output [7:0]  io_m_aw_bits_len,	// ventus/src/top/GPGPU_top.scala:140:12
  output [2:0]  io_m_aw_bits_size,	// ventus/src/top/GPGPU_top.scala:140:12
  output [1:0]  io_m_aw_bits_burst,	// ventus/src/top/GPGPU_top.scala:140:12
  output        io_m_aw_bits_lock,	// ventus/src/top/GPGPU_top.scala:140:12
  output [3:0]  io_m_aw_bits_cache,	// ventus/src/top/GPGPU_top.scala:140:12
  output [2:0]  io_m_aw_bits_prot,	// ventus/src/top/GPGPU_top.scala:140:12
  output [3:0]  io_m_aw_bits_qos,	// ventus/src/top/GPGPU_top.scala:140:12
  input         io_m_w_ready,	// ventus/src/top/GPGPU_top.scala:140:12
  output        io_m_w_valid,	// ventus/src/top/GPGPU_top.scala:140:12
  output [63:0] io_m_w_bits_data,	// ventus/src/top/GPGPU_top.scala:140:12
  output [7:0]  io_m_w_bits_strb,	// ventus/src/top/GPGPU_top.scala:140:12
  output        io_m_w_bits_last,	// ventus/src/top/GPGPU_top.scala:140:12
                io_m_b_ready,	// ventus/src/top/GPGPU_top.scala:140:12
  input         io_m_b_valid,	// ventus/src/top/GPGPU_top.scala:140:12
  input  [4:0]  io_m_b_bits_id,	// ventus/src/top/GPGPU_top.scala:140:12
  input  [1:0]  io_m_b_bits_resp,	// ventus/src/top/GPGPU_top.scala:140:12
  input         io_m_ar_ready,	// ventus/src/top/GPGPU_top.scala:140:12
  output        io_m_ar_valid,	// ventus/src/top/GPGPU_top.scala:140:12
  output [4:0]  io_m_ar_bits_id,	// ventus/src/top/GPGPU_top.scala:140:12
  output [31:0] io_m_ar_bits_addr,	// ventus/src/top/GPGPU_top.scala:140:12
  output [7:0]  io_m_ar_bits_len,	// ventus/src/top/GPGPU_top.scala:140:12
  output [2:0]  io_m_ar_bits_size,	// ventus/src/top/GPGPU_top.scala:140:12
  output [1:0]  io_m_ar_bits_burst,	// ventus/src/top/GPGPU_top.scala:140:12
  output        io_m_ar_bits_lock,	// ventus/src/top/GPGPU_top.scala:140:12
  output [3:0]  io_m_ar_bits_cache,	// ventus/src/top/GPGPU_top.scala:140:12
  output [2:0]  io_m_ar_bits_prot,	// ventus/src/top/GPGPU_top.scala:140:12
  output [3:0]  io_m_ar_bits_qos,	// ventus/src/top/GPGPU_top.scala:140:12
  output        io_m_r_ready,	// ventus/src/top/GPGPU_top.scala:140:12
  input         io_m_r_valid,	// ventus/src/top/GPGPU_top.scala:140:12
  input  [4:0]  io_m_r_bits_id,	// ventus/src/top/GPGPU_top.scala:140:12
  input  [63:0] io_m_r_bits_data,	// ventus/src/top/GPGPU_top.scala:140:12
  input  [1:0]  io_m_r_bits_resp,	// ventus/src/top/GPGPU_top.scala:140:12
  input         io_m_r_bits_last	// ventus/src/top/GPGPU_top.scala:140:12
);

  wire [14:0] _gpgpu_axi_top_io_m_aw_bits_id;	// ventus/src/top/GPGPU_top.scala:144:27
  wire [14:0] _gpgpu_axi_top_io_m_ar_bits_id;	// ventus/src/top/GPGPU_top.scala:144:27
  GPGPU_axi_top gpgpu_axi_top (	// ventus/src/top/GPGPU_top.scala:144:27
    .clock             (clock),
    .reset             (reset),
    .io_s_aw_awaddr    (io_s_aw_awaddr),
    .io_s_aw_awvalid   (io_s_aw_awvalid),
    .io_s_aw_awready   (io_s_aw_awready),
    .io_s_aw_awid      (io_s_aw_awid),
    .io_s_w_wdata      (io_s_w_wdata),
    .io_s_w_wvalid     (io_s_w_wvalid),
    .io_s_w_wready     (io_s_w_wready),
    .io_s_b_bvalid     (io_s_b_bvalid),
    .io_s_b_bready     (io_s_b_bready),
    .io_s_b_bid        (io_s_b_bid),
    .io_s_ar_araddr    (io_s_ar_araddr),
    .io_s_ar_arvalid   (io_s_ar_arvalid),
    .io_s_ar_arready   (io_s_ar_arready),
    .io_s_ar_arid      (io_s_ar_arid),
    .io_s_r_rdata      (io_s_r_rdata),
    .io_s_r_rvalid     (io_s_r_rvalid),
    .io_s_r_rready     (io_s_r_rready),
    .io_s_r_rid        (io_s_r_rid),
    .io_m_aw_ready     (io_m_aw_ready),
    .io_m_aw_valid     (io_m_aw_valid),
    .io_m_aw_bits_id   (_gpgpu_axi_top_io_m_aw_bits_id),
    .io_m_aw_bits_addr (io_m_aw_bits_addr),
    .io_m_w_ready      (io_m_w_ready),
    .io_m_w_valid      (io_m_w_valid),
    .io_m_w_bits_data  (io_m_w_bits_data),
    .io_m_w_bits_strb  (io_m_w_bits_strb),
    .io_m_w_bits_last  (io_m_w_bits_last),
    .io_m_b_valid      (io_m_b_valid),
    .io_m_b_bits_id    ({10'h0, io_m_b_bits_id}),	// ventus/src/top/GPGPU_top.scala:146:7
    .io_m_ar_ready     (io_m_ar_ready),
    .io_m_ar_valid     (io_m_ar_valid),
    .io_m_ar_bits_id   (_gpgpu_axi_top_io_m_ar_bits_id),
    .io_m_ar_bits_addr (io_m_ar_bits_addr),
    .io_m_r_valid      (io_m_r_valid),
    .io_m_r_bits_id    ({10'h0, io_m_r_bits_id}),	// ventus/src/top/GPGPU_top.scala:146:7
    .io_m_r_bits_data  (io_m_r_bits_data),
    .io_m_r_bits_last  (io_m_r_bits_last)
  );
  assign io_s_b_bresp = 2'h0;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
  assign io_s_r_rresp = 2'h0;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
  assign io_m_aw_bits_id = _gpgpu_axi_top_io_m_aw_bits_id[4:0];	// ventus/src/top/GPGPU_top.scala:137:7, :144:27, :146:7
  assign io_m_aw_bits_len = 8'hF;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
  assign io_m_aw_bits_size = 3'h3;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
  assign io_m_aw_bits_burst = 2'h1;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
  assign io_m_aw_bits_lock = 1'h0;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
  assign io_m_aw_bits_cache = 4'h6;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
  assign io_m_aw_bits_prot = 3'h0;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
  assign io_m_aw_bits_qos = 4'h0;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
  assign io_m_b_ready = 1'h1;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
  assign io_m_ar_bits_id = _gpgpu_axi_top_io_m_ar_bits_id[4:0];	// ventus/src/top/GPGPU_top.scala:137:7, :144:27, :146:7
  assign io_m_ar_bits_len = 8'hF;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
  assign io_m_ar_bits_size = 3'h3;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
  assign io_m_ar_bits_burst = 2'h1;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
  assign io_m_ar_bits_lock = 1'h0;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
  assign io_m_ar_bits_cache = 4'h6;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
  assign io_m_ar_bits_prot = 3'h0;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
  assign io_m_ar_bits_qos = 4'h0;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
  assign io_m_r_ready = 1'h1;	// ventus/src/top/GPGPU_top.scala:137:7, :144:27
endmodule

