// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Classify(	// ventus/src/pipeline/Classify.scala:15:7
  input  [31:0] io_in,	// ventus/src/pipeline/Classify.scala:16:14
  output        io_isPosInf,	// ventus/src/pipeline/Classify.scala:16:14
                io_isSNaN,	// ventus/src/pipeline/Classify.scala:16:14
                io_isNaN,	// ventus/src/pipeline/Classify.scala:16:14
                io_isInf,	// ventus/src/pipeline/Classify.scala:16:14
                io_isInfOrNaN,	// ventus/src/pipeline/Classify.scala:16:14
                io_isSubnormal,	// ventus/src/pipeline/Classify.scala:16:14
                io_isZero,	// ventus/src/pipeline/Classify.scala:16:14
                io_isSubnormalOrZero	// ventus/src/pipeline/Classify.scala:16:14
);

  wire io_isInf_0;	// ventus/src/pipeline/Classify.scala:58:26
  wire io_isNaN_0;	// ventus/src/pipeline/Classify.scala:57:26
  wire isSubnormalOrZero = io_in[30:23] == 8'h0;	// ventus/src/pipeline/Classify.scala:37:28, :40:31
  assign io_isNaN_0 = (&(io_in[30:23])) & (|(io_in[22:0]));	// ventus/src/pipeline/Classify.scala:37:28, :41:25, :42:34, :57:26
  assign io_isInf_0 = (&(io_in[30:23])) & ~(|(io_in[22:0]));	// ventus/src/pipeline/Classify.scala:37:28, :41:25, :42:34, :58:26
  assign io_isPosInf = ~(io_in[31]) & io_isInf_0;	// ventus/src/pipeline/Classify.scala:15:7, :37:28, :49:{18,24}, :58:26
  assign io_isSNaN = io_isNaN_0 & ~(io_in[22]);	// ventus/src/pipeline/Classify.scala:15:7, :54:{25,28,38}, :57:26
  assign io_isNaN = io_isNaN_0;	// ventus/src/pipeline/Classify.scala:15:7, :57:26
  assign io_isInf = io_isInf_0;	// ventus/src/pipeline/Classify.scala:15:7, :58:26
  assign io_isInfOrNaN = &(io_in[30:23]);	// ventus/src/pipeline/Classify.scala:15:7, :37:28, :42:34
  assign io_isSubnormal = isSubnormalOrZero & (|(io_in[22:0]));	// ventus/src/pipeline/Classify.scala:15:7, :37:28, :40:31, :41:25, :61:39
  assign io_isZero = isSubnormalOrZero & ~(|(io_in[22:0]));	// ventus/src/pipeline/Classify.scala:15:7, :37:28, :40:31, :41:25, :62:34
  assign io_isSubnormalOrZero = isSubnormalOrZero;	// ventus/src/pipeline/Classify.scala:15:7, :40:31
endmodule

