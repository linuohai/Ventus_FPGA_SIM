// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module SrtTable(	// ventus/src/pipeline/fpu_utils.scala:178:7
  input  [2:0] io_d,	// ventus/src/pipeline/fpu_utils.scala:179:14
  input  [7:0] io_y,	// ventus/src/pipeline/fpu_utils.scala:179:14
  output [2:0] io_q	// ventus/src/pipeline/fpu_utils.scala:179:14
);

  wire            _GEN = $signed(io_y) > 8'sh7;	// ventus/src/pipeline/fpu_utils.scala:197:56
  wire            _GEN_0 = $signed(io_y) > 8'sh1F;	// ventus/src/pipeline/fpu_utils.scala:197:56
  wire            _GEN_1 = $signed(io_y) > -8'shD;	// ventus/src/pipeline/fpu_utils.scala:197:56
  wire            _GEN_2 = $signed(io_y) > 8'shB;	// ventus/src/pipeline/fpu_utils.scala:197:56
  wire            _GEN_3 = $signed(io_y) > 8'sh27;	// ventus/src/pipeline/fpu_utils.scala:197:56
  wire            _GEN_4 = $signed(io_y) > -8'sh11;	// ventus/src/pipeline/fpu_utils.scala:197:56
  wire            _GEN_5 = $signed(io_y) > 8'shF;	// ventus/src/pipeline/fpu_utils.scala:197:56
  wire [7:0][2:0] _GEN_6 =
    {{$signed(io_y) > 8'sh2F
        ? 3'h2
        : _GEN_5 ? 3'h1 : _GEN_4 ? 3'h0 : {2'h3, $signed(io_y) > -8'sh2F}},
     {_GEN_3 ? 3'h2 : _GEN_5 ? 3'h1 : _GEN_4 ? 3'h0 : {2'h3, $signed(io_y) > -8'sh2D}},
     {_GEN_3 ? 3'h2 : _GEN_2 ? 3'h1 : _GEN_4 ? 3'h0 : {2'h3, $signed(io_y) > -8'sh29}},
     {$signed(io_y) > 8'sh23
        ? 3'h2
        : _GEN_2 ? 3'h1 : _GEN_1 ? 3'h0 : {2'h3, $signed(io_y) > -8'sh25}},
     {_GEN_0 ? 3'h2 : _GEN ? 3'h1 : _GEN_1 ? 3'h0 : {2'h3, $signed(io_y) > -8'sh23}},
     {_GEN_0 ? 3'h2 : _GEN ? 3'h1 : _GEN_1 ? 3'h0 : {2'h3, $signed(io_y) > -8'sh21}},
     {$signed(io_y) > 8'sh1B
        ? 3'h2
        : _GEN ? 3'h1 : $signed(io_y) > -8'shB ? 3'h0 : {2'h3, $signed(io_y) > -8'sh1D}},
     {$signed(io_y) > 8'sh17
        ? 3'h2
        : _GEN ? 3'h1 : $signed(io_y) > -8'sh9 ? 3'h0 : {2'h3, $signed(io_y) > -8'sh1B}}};	// src/main/scala/chisel3/util/Mux.scala:126:16, ventus/src/pipeline/fpu_utils.scala:197:56, :200:31
  assign io_q = _GEN_6[io_d];	// ventus/src/pipeline/fpu_utils.scala:178:7, :200:31
endmodule

