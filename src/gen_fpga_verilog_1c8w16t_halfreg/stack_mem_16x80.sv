// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// VCS coverage exclude_file
module stack_mem_16x80(	// ventus/src/pipeline/branch_join.scala:38:22
  input  [3:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [79:0] R0_data,
  input  [3:0]  R1_addr,
  input         R1_en,
                R1_clk,
  output [79:0] R1_data,
  input  [3:0]  R2_addr,
  input         R2_en,
                R2_clk,
  output [79:0] R2_data,
  input  [3:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [79:0] W0_data,
  input  [4:0]  W0_mask,
  input  [3:0]  W1_addr,
  input         W1_en,
                W1_clk,
  input  [79:0] W1_data,
  input  [4:0]  W1_mask,
  input  [3:0]  W2_addr,
  input         W2_en,
                W2_clk,
  input  [79:0] W2_data,
  input  [4:0]  W2_mask,
  input  [3:0]  W3_addr,
  input         W3_en,
                W3_clk,
  input  [79:0] W3_data,
  input  [4:0]  W3_mask,
  input  [3:0]  W4_addr,
  input         W4_en,
                W4_clk,
  input  [79:0] W4_data,
  input  [4:0]  W4_mask,
  input  [3:0]  W5_addr,
  input         W5_en,
                W5_clk,
  input  [79:0] W5_data,
  input  [4:0]  W5_mask
);

  reg [79:0] Memory[0:15];	// ventus/src/pipeline/branch_join.scala:38:22
  always @(posedge W0_clk) begin	// ventus/src/pipeline/branch_join.scala:38:22
    if (W0_en & W0_mask[0])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W0_addr][32'h0 +: 16] <= W0_data[15:0];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W0_en & W0_mask[1])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W0_addr][32'h10 +: 16] <= W0_data[31:16];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W0_en & W0_mask[2])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W0_addr][32'h20 +: 16] <= W0_data[47:32];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W0_en & W0_mask[3])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W0_addr][32'h30 +: 16] <= W0_data[63:48];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W0_en & W0_mask[4])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W0_addr][32'h40 +: 16] <= W0_data[79:64];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W1_en & W1_mask[0])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W1_addr][32'h0 +: 16] <= W1_data[15:0];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W1_en & W1_mask[1])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W1_addr][32'h10 +: 16] <= W1_data[31:16];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W1_en & W1_mask[2])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W1_addr][32'h20 +: 16] <= W1_data[47:32];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W1_en & W1_mask[3])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W1_addr][32'h30 +: 16] <= W1_data[63:48];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W1_en & W1_mask[4])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W1_addr][32'h40 +: 16] <= W1_data[79:64];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W2_en & W2_mask[0])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W2_addr][32'h0 +: 16] <= W2_data[15:0];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W2_en & W2_mask[1])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W2_addr][32'h10 +: 16] <= W2_data[31:16];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W2_en & W2_mask[2])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W2_addr][32'h20 +: 16] <= W2_data[47:32];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W2_en & W2_mask[3])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W2_addr][32'h30 +: 16] <= W2_data[63:48];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W2_en & W2_mask[4])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W2_addr][32'h40 +: 16] <= W2_data[79:64];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W3_en & W3_mask[0])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W3_addr][32'h0 +: 16] <= W3_data[15:0];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W3_en & W3_mask[1])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W3_addr][32'h10 +: 16] <= W3_data[31:16];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W3_en & W3_mask[2])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W3_addr][32'h20 +: 16] <= W3_data[47:32];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W3_en & W3_mask[3])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W3_addr][32'h30 +: 16] <= W3_data[63:48];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W3_en & W3_mask[4])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W3_addr][32'h40 +: 16] <= W3_data[79:64];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W4_en & W4_mask[0])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W4_addr][32'h0 +: 16] <= W4_data[15:0];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W4_en & W4_mask[1])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W4_addr][32'h10 +: 16] <= W4_data[31:16];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W4_en & W4_mask[2])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W4_addr][32'h20 +: 16] <= W4_data[47:32];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W4_en & W4_mask[3])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W4_addr][32'h30 +: 16] <= W4_data[63:48];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W4_en & W4_mask[4])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W4_addr][32'h40 +: 16] <= W4_data[79:64];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W5_en & W5_mask[0])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W5_addr][32'h0 +: 16] <= W5_data[15:0];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W5_en & W5_mask[1])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W5_addr][32'h10 +: 16] <= W5_data[31:16];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W5_en & W5_mask[2])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W5_addr][32'h20 +: 16] <= W5_data[47:32];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W5_en & W5_mask[3])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W5_addr][32'h30 +: 16] <= W5_data[63:48];	// ventus/src/pipeline/branch_join.scala:38:22
    if (W5_en & W5_mask[4])	// ventus/src/pipeline/branch_join.scala:38:22
      Memory[W5_addr][32'h40 +: 16] <= W5_data[79:64];	// ventus/src/pipeline/branch_join.scala:38:22
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// ventus/src/pipeline/branch_join.scala:38:22
    reg [95:0] _RANDOM_MEM;	// ventus/src/pipeline/branch_join.scala:38:22
    initial begin	// ventus/src/pipeline/branch_join.scala:38:22
      `INIT_RANDOM_PROLOG_	// ventus/src/pipeline/branch_join.scala:38:22
      `ifdef RANDOMIZE_MEM_INIT	// ventus/src/pipeline/branch_join.scala:38:22
        for (logic [4:0] i = 5'h0; i < 5'h10; i += 5'h1) begin
          for (logic [6:0] j = 7'h0; j < 7'h60; j += 7'h20) begin
            _RANDOM_MEM[j +: 32] = `RANDOM;	// ventus/src/pipeline/branch_join.scala:38:22
          end	// ventus/src/pipeline/branch_join.scala:38:22
          Memory[i[3:0]] = _RANDOM_MEM[79:0];	// ventus/src/pipeline/branch_join.scala:38:22
        end	// ventus/src/pipeline/branch_join.scala:38:22
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 80'bx;	// ventus/src/pipeline/branch_join.scala:38:22
  assign R1_data = R1_en ? Memory[R1_addr] : 80'bx;	// ventus/src/pipeline/branch_join.scala:38:22
  assign R2_data = R2_en ? Memory[R2_addr] : 80'bx;	// ventus/src/pipeline/branch_join.scala:38:22
endmodule

