// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module RRPriorityEncoder(	// ventus/src/cta/utils.scala:15:7
  input        clock,	// ventus/src/cta/utils.scala:15:7
               reset,	// ventus/src/cta/utils.scala:15:7
               io_in_0,	// ventus/src/cta/utils.scala:16:14
               io_in_1,	// ventus/src/cta/utils.scala:16:14
               io_in_2,	// ventus/src/cta/utils.scala:16:14
               io_in_3,	// ventus/src/cta/utils.scala:16:14
               io_in_4,	// ventus/src/cta/utils.scala:16:14
               io_in_5,	// ventus/src/cta/utils.scala:16:14
               io_in_6,	// ventus/src/cta/utils.scala:16:14
               io_in_7,	// ventus/src/cta/utils.scala:16:14
               io_out_ready,	// ventus/src/cta/utils.scala:16:14
  output       io_out_valid,	// ventus/src/cta/utils.scala:16:14
  output [2:0] io_out_bits	// ventus/src/cta/utils.scala:16:14
);

  reg  [2:0]  last;	// ventus/src/cta/utils.scala:23:21
  wire [7:0]  in =
    {io_in_7, io_in_6, io_in_5, io_in_4, io_in_3, io_in_2, io_in_1, io_in_0};	// ventus/src/cta/utils.scala:25:15
  wire [2:0]  _shift_T = last + 3'h1;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/cta/utils.scala:23:21, :27:20
  wire [7:0]  _in_RR_T = in >> _shift_T;	// ventus/src/cta/utils.scala:25:15, :27:20, :28:16
  wire [22:0] _in_RR_T_3 =
    {15'h0, io_in_7, io_in_6, io_in_5, io_in_4, io_in_3, io_in_2, io_in_1, io_in_0}
    << 4'h8 - {1'h0, _shift_T};	// ventus/src/cta/utils.scala:15:7, :27:20, :28:{32,40}
  wire [6:0]  _in_RR_T_4 = _in_RR_T[6:0] | _in_RR_T_3[6:0];	// ventus/src/cta/utils.scala:28:{16,26,32}
  always @(posedge clock) begin	// ventus/src/cta/utils.scala:15:7
    if (reset)	// ventus/src/cta/utils.scala:15:7
      last <= 3'h7;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/cta/utils.scala:23:21
    else if (io_out_ready & (|in))	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/utils.scala:25:15, :30:22
      last <=
        (_in_RR_T_4[0]
           ? 3'h0
           : _in_RR_T_4[1]
               ? 3'h1
               : _in_RR_T_4[2]
                   ? 3'h2
                   : _in_RR_T_4[3]
                       ? 3'h3
                       : _in_RR_T_4[4]
                           ? 3'h4
                           : _in_RR_T_4[5] ? 3'h5 : {2'h3, ~(_in_RR_T_4[6])}) + _shift_T;	// src/main/scala/chisel3/util/Mux.scala:50:70, src/main/scala/chisel3/util/OneHot.scala:48:45, ventus/src/cta/utils.scala:23:21, :27:20, :28:26, :31:21, :34:36
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// ventus/src/cta/utils.scala:15:7
    `ifdef FIRRTL_BEFORE_INITIAL	// ventus/src/cta/utils.scala:15:7
      `FIRRTL_BEFORE_INITIAL	// ventus/src/cta/utils.scala:15:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// ventus/src/cta/utils.scala:15:7
      automatic logic [31:0] _RANDOM[0:0];	// ventus/src/cta/utils.scala:15:7
      `ifdef INIT_RANDOM_PROLOG_	// ventus/src/cta/utils.scala:15:7
        `INIT_RANDOM_PROLOG_	// ventus/src/cta/utils.scala:15:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// ventus/src/cta/utils.scala:15:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// ventus/src/cta/utils.scala:15:7
        last = _RANDOM[/*Zero width*/ 1'b0][2:0];	// ventus/src/cta/utils.scala:15:7, :23:21
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// ventus/src/cta/utils.scala:15:7
      `FIRRTL_AFTER_INITIAL	// ventus/src/cta/utils.scala:15:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_valid = |in;	// ventus/src/cta/utils.scala:15:7, :25:15, :30:22
  assign io_out_bits =
    (|in)
      ? (_in_RR_T_4[0]
           ? 3'h0
           : _in_RR_T_4[1]
               ? 3'h1
               : _in_RR_T_4[2]
                   ? 3'h2
                   : _in_RR_T_4[3]
                       ? 3'h3
                       : _in_RR_T_4[4]
                           ? 3'h4
                           : _in_RR_T_4[5] ? 3'h5 : {2'h3, ~(_in_RR_T_4[6])}) + _shift_T
      : 3'h0;	// src/main/scala/chisel3/util/Mux.scala:50:70, src/main/scala/chisel3/util/OneHot.scala:48:45, ventus/src/cta/utils.scala:15:7, :25:15, :27:20, :28:26, :30:22, :31:{21,53}
endmodule

