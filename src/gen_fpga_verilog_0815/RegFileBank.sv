// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module RegFileBank(	// ventus/src/pipeline/regfile.scala:17:7
  input         clock,	// ventus/src/pipeline/regfile.scala:17:7
  output [31:0] io_rs,	// ventus/src/pipeline/regfile.scala:18:14
  input  [7:0]  io_rsidx,	// ventus/src/pipeline/regfile.scala:18:14
  input  [31:0] io_rd,	// ventus/src/pipeline/regfile.scala:18:14
  input  [7:0]  io_rdidx,	// ventus/src/pipeline/regfile.scala:18:14
  input         io_rdwen	// ventus/src/pipeline/regfile.scala:18:14
);

  wire [31:0] _regs_R0_data;	// ventus/src/pipeline/regfile.scala:19:25
  reg         bypassSignal_REG;	// ventus/src/pipeline/regfile.scala:21:26
  reg  [31:0] io_rs_REG;	// ventus/src/pipeline/regfile.scala:22:36
  always @(posedge clock) begin	// ventus/src/pipeline/regfile.scala:17:7
    bypassSignal_REG <= io_rsidx == io_rdidx & io_rdwen;	// ventus/src/pipeline/regfile.scala:21:{26,36,48}
    io_rs_REG <= io_rd;	// ventus/src/pipeline/regfile.scala:22:36
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// ventus/src/pipeline/regfile.scala:17:7
    `ifdef FIRRTL_BEFORE_INITIAL	// ventus/src/pipeline/regfile.scala:17:7
      `FIRRTL_BEFORE_INITIAL	// ventus/src/pipeline/regfile.scala:17:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// ventus/src/pipeline/regfile.scala:17:7
      automatic logic [31:0] _RANDOM[0:1];	// ventus/src/pipeline/regfile.scala:17:7
      `ifdef INIT_RANDOM_PROLOG_	// ventus/src/pipeline/regfile.scala:17:7
        `INIT_RANDOM_PROLOG_	// ventus/src/pipeline/regfile.scala:17:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// ventus/src/pipeline/regfile.scala:17:7
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// ventus/src/pipeline/regfile.scala:17:7
        end	// ventus/src/pipeline/regfile.scala:17:7
        bypassSignal_REG = _RANDOM[1'h0][0];	// ventus/src/pipeline/regfile.scala:17:7, :21:26
        io_rs_REG = {_RANDOM[1'h0][31:1], _RANDOM[1'h1][0]};	// ventus/src/pipeline/regfile.scala:17:7, :21:26, :22:36
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// ventus/src/pipeline/regfile.scala:17:7
      `FIRRTL_AFTER_INITIAL	// ventus/src/pipeline/regfile.scala:17:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  regs_0 regs (	// ventus/src/pipeline/regfile.scala:19:25
    .R0_addr (io_rsidx),
    .R0_clk  (clock),
    .R0_data (_regs_R0_data),
    .W0_addr (io_rdidx),
    .W0_en   (io_rdwen),
    .W0_clk  (clock),
    .W0_data (io_rd)
  );
  assign io_rs = bypassSignal_REG ? io_rs_REG : _regs_R0_data;	// ventus/src/pipeline/regfile.scala:17:7, :19:25, :21:26, :22:{15,36}
endmodule

