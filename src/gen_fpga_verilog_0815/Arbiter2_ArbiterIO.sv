// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Arbiter2_ArbiterIO(	// src/main/scala/chisel3/util/Arbiter.scala:133:7
  output        io_in_0_ready,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  input         io_in_0_valid,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  input  [4:0]  io_in_0_bits_ctrl_regIndex,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  input  [1:0]  io_in_0_bits_ctrl_warpID,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  input  [7:0]  io_in_0_bits_ctrl_vecMask,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  input         io_in_0_bits_ctrl_wvd,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
                io_in_0_bits_ctrl_wxd,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  input  [7:0]  io_in_0_bits_ctrl_spike_info_sm_id,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  input  [31:0] io_in_0_bits_ctrl_spike_info_pc,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
                io_in_0_bits_ctrl_spike_info_inst,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  input  [2:0]  io_in_0_bits_op,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  output        io_in_1_ready,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  input         io_in_1_valid,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  input  [4:0]  io_in_1_bits_ctrl_regIndex,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  input  [1:0]  io_in_1_bits_ctrl_warpID,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  input  [7:0]  io_in_1_bits_ctrl_vecMask,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  input         io_in_1_bits_ctrl_wvd,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
                io_in_1_bits_ctrl_wxd,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  input  [7:0]  io_in_1_bits_ctrl_spike_info_sm_id,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  input  [31:0] io_in_1_bits_ctrl_spike_info_pc,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
                io_in_1_bits_ctrl_spike_info_inst,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  input  [2:0]  io_in_1_bits_op,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  input         io_out_ready,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  output        io_out_valid,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  output [4:0]  io_out_bits_ctrl_regIndex,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  output [1:0]  io_out_bits_ctrl_warpID,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  output [7:0]  io_out_bits_ctrl_vecMask,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  output        io_out_bits_ctrl_wvd,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
                io_out_bits_ctrl_wxd,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  output [7:0]  io_out_bits_ctrl_spike_info_sm_id,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  output [31:0] io_out_bits_ctrl_spike_info_pc,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
                io_out_bits_ctrl_spike_info_inst,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  output [2:0]  io_out_bits_op	// src/main/scala/chisel3/util/Arbiter.scala:140:14
);

  assign io_in_0_ready = io_out_ready;	// src/main/scala/chisel3/util/Arbiter.scala:133:7
  assign io_in_1_ready = ~io_in_0_valid & io_out_ready;	// src/main/scala/chisel3/util/Arbiter.scala:45:78, :133:7, :153:19
  assign io_out_valid = io_in_0_valid | io_in_1_valid;	// src/main/scala/chisel3/util/Arbiter.scala:133:7, :154:31
  assign io_out_bits_ctrl_regIndex =
    io_in_0_valid ? io_in_0_bits_ctrl_regIndex : io_in_1_bits_ctrl_regIndex;	// src/main/scala/chisel3/util/Arbiter.scala:133:7, :143:15, :145:26, :147:19
  assign io_out_bits_ctrl_warpID =
    io_in_0_valid ? io_in_0_bits_ctrl_warpID : io_in_1_bits_ctrl_warpID;	// src/main/scala/chisel3/util/Arbiter.scala:133:7, :143:15, :145:26, :147:19
  assign io_out_bits_ctrl_vecMask =
    io_in_0_valid ? io_in_0_bits_ctrl_vecMask : io_in_1_bits_ctrl_vecMask;	// src/main/scala/chisel3/util/Arbiter.scala:133:7, :143:15, :145:26, :147:19
  assign io_out_bits_ctrl_wvd =
    io_in_0_valid ? io_in_0_bits_ctrl_wvd : io_in_1_bits_ctrl_wvd;	// src/main/scala/chisel3/util/Arbiter.scala:133:7, :143:15, :145:26, :147:19
  assign io_out_bits_ctrl_wxd =
    io_in_0_valid ? io_in_0_bits_ctrl_wxd : io_in_1_bits_ctrl_wxd;	// src/main/scala/chisel3/util/Arbiter.scala:133:7, :143:15, :145:26, :147:19
  assign io_out_bits_ctrl_spike_info_sm_id =
    io_in_0_valid
      ? io_in_0_bits_ctrl_spike_info_sm_id
      : io_in_1_bits_ctrl_spike_info_sm_id;	// src/main/scala/chisel3/util/Arbiter.scala:133:7, :143:15, :145:26, :147:19
  assign io_out_bits_ctrl_spike_info_pc =
    io_in_0_valid ? io_in_0_bits_ctrl_spike_info_pc : io_in_1_bits_ctrl_spike_info_pc;	// src/main/scala/chisel3/util/Arbiter.scala:133:7, :143:15, :145:26, :147:19
  assign io_out_bits_ctrl_spike_info_inst =
    io_in_0_valid ? io_in_0_bits_ctrl_spike_info_inst : io_in_1_bits_ctrl_spike_info_inst;	// src/main/scala/chisel3/util/Arbiter.scala:133:7, :143:15, :145:26, :147:19
  assign io_out_bits_op = io_in_0_valid ? io_in_0_bits_op : io_in_1_bits_op;	// src/main/scala/chisel3/util/Arbiter.scala:133:7, :143:15, :145:26, :147:19
endmodule

