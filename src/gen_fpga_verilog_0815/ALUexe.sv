// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module ALUexe(	// ventus/src/pipeline/execution.scala:26:7
  input         clock,	// ventus/src/pipeline/execution.scala:26:7
                reset,	// ventus/src/pipeline/execution.scala:26:7
  output        io_in_ready,	// ventus/src/pipeline/execution.scala:27:14
  input         io_in_valid,	// ventus/src/pipeline/execution.scala:27:14
  input  [31:0] io_in_bits_in1,	// ventus/src/pipeline/execution.scala:27:14
                io_in_bits_in2,	// ventus/src/pipeline/execution.scala:27:14
                io_in_bits_in3,	// ventus/src/pipeline/execution.scala:27:14
  input  [1:0]  io_in_bits_ctrl_wid,	// ventus/src/pipeline/execution.scala:27:14
                io_in_bits_ctrl_branch,	// ventus/src/pipeline/execution.scala:27:14
  input  [5:0]  io_in_bits_ctrl_alu_fn,	// ventus/src/pipeline/execution.scala:27:14
  input  [7:0]  io_in_bits_ctrl_reg_idxw,	// ventus/src/pipeline/execution.scala:27:14
  input         io_in_bits_ctrl_wxd,	// ventus/src/pipeline/execution.scala:27:14
  input  [7:0]  io_in_bits_ctrl_spike_info_sm_id,	// ventus/src/pipeline/execution.scala:27:14
  input  [31:0] io_in_bits_ctrl_spike_info_pc,	// ventus/src/pipeline/execution.scala:27:14
                io_in_bits_ctrl_spike_info_inst,	// ventus/src/pipeline/execution.scala:27:14
  output        io_out_valid,	// ventus/src/pipeline/execution.scala:27:14
  output [31:0] io_out_bits_wb_wxd_rd,	// ventus/src/pipeline/execution.scala:27:14
  output        io_out_bits_wxd,	// ventus/src/pipeline/execution.scala:27:14
  output [7:0]  io_out_bits_reg_idxw,	// ventus/src/pipeline/execution.scala:27:14
  output [1:0]  io_out_bits_warp_id,	// ventus/src/pipeline/execution.scala:27:14
  output [7:0]  io_out_bits_spike_info_sm_id,	// ventus/src/pipeline/execution.scala:27:14
  output [31:0] io_out_bits_spike_info_pc,	// ventus/src/pipeline/execution.scala:27:14
                io_out_bits_spike_info_inst,	// ventus/src/pipeline/execution.scala:27:14
  input         io_out2br_ready,	// ventus/src/pipeline/execution.scala:27:14
  output        io_out2br_valid,	// ventus/src/pipeline/execution.scala:27:14
  output [1:0]  io_out2br_bits_wid,	// ventus/src/pipeline/execution.scala:27:14
  output        io_out2br_bits_jump,	// ventus/src/pipeline/execution.scala:27:14
  output [31:0] io_out2br_bits_new_pc,	// ventus/src/pipeline/execution.scala:27:14
  output [7:0]  io_out2br_bits_spike_info_sm_id,	// ventus/src/pipeline/execution.scala:27:14
  output [31:0] io_out2br_bits_spike_info_pc,	// ventus/src/pipeline/execution.scala:27:14
                io_out2br_bits_spike_info_inst	// ventus/src/pipeline/execution.scala:27:14
);

  wire        _result_br_io_enq_ready;	// ventus/src/pipeline/execution.scala:38:23
  wire        _result_io_enq_ready;	// ventus/src/pipeline/execution.scala:37:20
  wire [31:0] _alu_io_out;	// ventus/src/pipeline/execution.scala:32:17
  wire        _alu_io_cmp_out;	// ventus/src/pipeline/execution.scala:32:17
  wire        _result_br_io_enq_bits_jump_T = io_in_bits_ctrl_branch == 2'h1;	// ventus/src/pipeline/execution.scala:50:92
  ScalarALU alu (	// ventus/src/pipeline/execution.scala:32:17
    .io_func    (io_in_bits_ctrl_alu_fn[4:0]),	// ventus/src/pipeline/execution.scala:36:38
    .io_in2     (io_in_bits_in2),
    .io_in1     (io_in_bits_in1),
    .io_out     (_alu_io_out),
    .io_cmp_out (_alu_io_cmp_out)
  );
  Queue1_WriteScalarCtrl result (	// ventus/src/pipeline/execution.scala:37:20
    .clock                        (clock),
    .reset                        (reset),
    .io_enq_ready                 (_result_io_enq_ready),
    .io_enq_valid                 (io_in_valid & io_in_bits_ctrl_wxd),	// ventus/src/pipeline/execution.scala:57:35
    .io_enq_bits_wb_wxd_rd        (_alu_io_out),	// ventus/src/pipeline/execution.scala:32:17
    .io_enq_bits_wxd              (io_in_bits_ctrl_wxd),
    .io_enq_bits_reg_idxw         (io_in_bits_ctrl_reg_idxw),
    .io_enq_bits_warp_id          (io_in_bits_ctrl_wid),
    .io_enq_bits_spike_info_sm_id (io_in_bits_ctrl_spike_info_sm_id),
    .io_enq_bits_spike_info_pc    (io_in_bits_ctrl_spike_info_pc),
    .io_enq_bits_spike_info_inst  (io_in_bits_ctrl_spike_info_inst),
    .io_deq_ready                 (1'h1),	// ventus/src/pipeline/execution.scala:27:14, :37:20
    .io_deq_valid                 (io_out_valid),
    .io_deq_bits_wb_wxd_rd        (io_out_bits_wb_wxd_rd),
    .io_deq_bits_wxd              (io_out_bits_wxd),
    .io_deq_bits_reg_idxw         (io_out_bits_reg_idxw),
    .io_deq_bits_warp_id          (io_out_bits_warp_id),
    .io_deq_bits_spike_info_sm_id (io_out_bits_spike_info_sm_id),
    .io_deq_bits_spike_info_pc    (io_out_bits_spike_info_pc),
    .io_deq_bits_spike_info_inst  (io_out_bits_spike_info_inst)
  );
  Queue1_BranchCtrl result_br (	// ventus/src/pipeline/execution.scala:38:23
    .clock                        (clock),
    .reset                        (reset),
    .io_enq_ready                 (_result_br_io_enq_ready),
    .io_enq_valid                 (io_in_valid & (|io_in_bits_ctrl_branch)),	// ventus/src/pipeline/execution.scala:56:{38,62}
    .io_enq_bits_wid              (io_in_bits_ctrl_wid),
    .io_enq_bits_jump
      ((&io_in_bits_ctrl_branch) | io_in_bits_ctrl_branch == 2'h2
       | _result_br_io_enq_bits_jump_T & _alu_io_cmp_out),	// ventus/src/pipeline/execution.scala:32:17, :50:92, :54:72
    .io_enq_bits_new_pc           (io_in_bits_in3),
    .io_enq_bits_spike_info_sm_id (io_in_bits_ctrl_spike_info_sm_id),
    .io_enq_bits_spike_info_pc    (io_in_bits_ctrl_spike_info_pc),
    .io_enq_bits_spike_info_inst  (io_in_bits_ctrl_spike_info_inst),
    .io_deq_ready                 (io_out2br_ready),
    .io_deq_valid                 (io_out2br_valid),
    .io_deq_bits_wid              (io_out2br_bits_wid),
    .io_deq_bits_jump             (io_out2br_bits_jump),
    .io_deq_bits_new_pc           (io_out2br_bits_new_pc),
    .io_deq_bits_spike_info_sm_id (io_out2br_bits_spike_info_sm_id),
    .io_deq_bits_spike_info_pc    (io_out2br_bits_spike_info_pc),
    .io_deq_bits_spike_info_inst  (io_out2br_bits_spike_info_inst)
  );
  assign io_in_ready =
    io_in_bits_ctrl_branch == 2'h0
      ? _result_io_enq_ready
      : (_result_br_io_enq_bits_jump_T | _result_io_enq_ready) & _result_br_io_enq_ready;	// ventus/src/pipeline/execution.scala:26:7, :37:20, :38:23, :50:92
endmodule

