// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module OnTheFlyConv(	// ventus/src/pipeline/fpu_utils.scala:212:7
  input         clock,	// ventus/src/pipeline/fpu_utils.scala:212:7
                io_resetSqrt,	// ventus/src/pipeline/fpu_utils.scala:213:14
                io_resetDiv,	// ventus/src/pipeline/fpu_utils.scala:213:14
                io_enable,	// ventus/src/pipeline/fpu_utils.scala:213:14
  input  [2:0]  io_qi,	// ventus/src/pipeline/fpu_utils.scala:213:14
  output [30:0] io_QM,	// ventus/src/pipeline/fpu_utils.scala:213:14
                io_Q,	// ventus/src/pipeline/fpu_utils.scala:213:14
                io_F	// ventus/src/pipeline/fpu_utils.scala:213:14
);

  reg  [30:0] Q;	// ventus/src/pipeline/fpu_utils.scala:222:18
  reg  [30:0] QM;	// ventus/src/pipeline/fpu_utils.scala:222:18
  reg  [30:0] mask;	// ventus/src/pipeline/fpu_utils.scala:224:17
  reg  [30:0] b_111;	// ventus/src/pipeline/fpu_utils.scala:225:26
  reg  [30:0] b_1100;	// ventus/src/pipeline/fpu_utils.scala:225:26
  reg  [27:0] b_01;	// ventus/src/pipeline/fpu_utils.scala:235:35
  reg  [27:0] b_10;	// ventus/src/pipeline/fpu_utils.scala:235:35
  reg  [27:0] b_11;	// ventus/src/pipeline/fpu_utils.scala:235:35
  wire [33:0] _GEN = {3'h0, ~Q};	// ventus/src/pipeline/fpu_utils.scala:222:18, :247:14, :255:18
  wire [33:0] _sqrtToCsaMap_T_2 = _GEN << (io_qi[0] ? 2'h1 : 2'h2);	// ventus/src/pipeline/fpu_utils.scala:239:16, :255:{18,24,30}
  wire [30:0] _GEN_0 = {30'h0, io_qi[0]};	// ventus/src/pipeline/fpu_utils.scala:255:{30,61}
  wire [33:0] _sqrtToCsaMap_T_9 = _GEN << (io_qi[0] ? 2'h1 : 2'h2);	// ventus/src/pipeline/fpu_utils.scala:239:16, :255:{18,24,30}
  wire [33:0] _GEN_1 = {3'h0, QM};	// ventus/src/pipeline/fpu_utils.scala:222:18, :255:18
  wire [33:0] _sqrtToCsaMap_T_16 = _GEN_1 << (io_qi[0] ? 2'h1 : 2'h2);	// ventus/src/pipeline/fpu_utils.scala:239:16, :255:{18,24,30}
  wire [33:0] _sqrtToCsaMap_T_23 = _GEN_1 << (io_qi[0] ? 2'h1 : 2'h2);	// ventus/src/pipeline/fpu_utils.scala:239:16, :255:{18,24,30}
  always @(posedge clock) begin	// ventus/src/pipeline/fpu_utils.scala:212:7
    automatic logic [30:0] Q_load_01;	// ventus/src/pipeline/fpu_utils.scala:261:21
    automatic logic [30:0] QM_load_10;	// ventus/src/pipeline/fpu_utils.scala:264:23
    automatic logic [30:0] QM_load_11;	// ventus/src/pipeline/fpu_utils.scala:265:23
    Q_load_01 = {Q[30:28], Q[27:0] | b_01};	// ventus/src/pipeline/fpu_utils.scala:222:18, :235:35, :261:21
    QM_load_10 = {QM[30:28], QM[27:0] | b_10};	// ventus/src/pipeline/fpu_utils.scala:222:18, :235:35, :263:23, :264:23
    QM_load_11 = {QM[30:28], QM[27:0] | b_11};	// ventus/src/pipeline/fpu_utils.scala:222:18, :235:35, :263:23, :265:23
    if (io_resetSqrt) begin	// ventus/src/pipeline/fpu_utils.scala:212:7
      Q <= 31'h10000000;	// ventus/src/pipeline/fpu_utils.scala:222:18, :268:13
      mask <= 31'h40000000;	// ventus/src/pipeline/fpu_utils.scala:224:17, :227:46
      b_111 <= 31'h1C000000;	// ventus/src/pipeline/fpu_utils.scala:225:26, :228:11
      b_1100 <= 31'h30000000;	// ventus/src/pipeline/fpu_utils.scala:225:26, :229:12
    end
    else begin	// ventus/src/pipeline/fpu_utils.scala:212:7
      if (io_resetDiv)	// ventus/src/pipeline/fpu_utils.scala:213:14
        Q <= 31'h0;	// ventus/src/pipeline/fpu_utils.scala:222:18, :269:8
      else if (io_enable) begin	// ventus/src/pipeline/fpu_utils.scala:213:14
        if (io_qi == 3'h6)	// ventus/src/pipeline/fpu_utils.scala:254:22, :288:38
          Q <= QM_load_10;	// ventus/src/pipeline/fpu_utils.scala:222:18, :264:23
        else if (&io_qi)	// ventus/src/pipeline/fpu_utils.scala:258:35, :288:38
          Q <= QM_load_11;	// ventus/src/pipeline/fpu_utils.scala:222:18, :265:23
        else if (io_qi == 3'h2)	// ventus/src/pipeline/fpu_utils.scala:254:22, :288:38
          Q <= {Q[30:28], Q[27:0] | b_10};	// ventus/src/pipeline/fpu_utils.scala:222:18, :235:35, :261:21, :262:21
        else if (io_qi == 3'h1)	// ventus/src/pipeline/fpu_utils.scala:254:22, :288:38
          Q <= Q_load_01;	// ventus/src/pipeline/fpu_utils.scala:222:18, :261:21
        else if (|io_qi)	// ventus/src/pipeline/fpu_utils.scala:258:35, :288:38
          Q <= 31'h0;	// ventus/src/pipeline/fpu_utils.scala:222:18, :269:8
      end
      if (io_enable) begin	// ventus/src/pipeline/fpu_utils.scala:213:14
        mask <= {{2{mask[30]}}, mask[30:2]};	// ventus/src/pipeline/fpu_utils.scala:224:17, :231:{10,18}
        b_111 <= {2'h0, b_111[30:2]};	// ventus/src/pipeline/fpu_utils.scala:225:26, :232:{11,20}
        b_1100 <= {2'h0, b_1100[30:2]};	// ventus/src/pipeline/fpu_utils.scala:225:26, :232:11, :233:{12,22}
      end
    end
    if (io_resetSqrt | io_resetDiv) begin	// ventus/src/pipeline/fpu_utils.scala:237:21
      QM <= 31'h0;	// ventus/src/pipeline/fpu_utils.scala:222:18, :269:8
      b_01 <= 28'h4000000;	// ventus/src/pipeline/fpu_utils.scala:235:35, :238:16
      b_10 <= 28'h8000000;	// ventus/src/pipeline/fpu_utils.scala:235:35, :239:16
      b_11 <= 28'hC000000;	// ventus/src/pipeline/fpu_utils.scala:235:35, :240:16
    end
    else if (io_enable) begin	// ventus/src/pipeline/fpu_utils.scala:213:14
      if (io_qi == 3'h6)	// ventus/src/pipeline/fpu_utils.scala:254:22, :289:39
        QM <= {QM[30:28], QM[27:0] | b_01};	// ventus/src/pipeline/fpu_utils.scala:222:18, :235:35, :263:23
      else if (&io_qi)	// ventus/src/pipeline/fpu_utils.scala:258:35, :289:39
        QM <= QM_load_10;	// ventus/src/pipeline/fpu_utils.scala:222:18, :264:23
      else if (|io_qi)	// ventus/src/pipeline/fpu_utils.scala:258:35, :288:38
        QM <= io_qi == 3'h2 ? Q_load_01 : io_qi == 3'h1 ? Q : 31'h0;	// ventus/src/pipeline/fpu_utils.scala:222:18, :254:22, :261:21, :269:8, :289:39
      else	// ventus/src/pipeline/fpu_utils.scala:258:35, :288:38
        QM <= QM_load_11;	// ventus/src/pipeline/fpu_utils.scala:222:18, :265:23
      b_01 <= {2'h0, b_01[27:2]};	// ventus/src/pipeline/fpu_utils.scala:232:11, :235:35, :242:{10,18}
      b_10 <= {2'h0, b_10[27:2]};	// ventus/src/pipeline/fpu_utils.scala:232:11, :235:35, :243:{10,18}
      b_11 <= {2'h0, b_11[27:2]};	// ventus/src/pipeline/fpu_utils.scala:232:11, :235:35, :244:{10,18}
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// ventus/src/pipeline/fpu_utils.scala:212:7
    `ifdef FIRRTL_BEFORE_INITIAL	// ventus/src/pipeline/fpu_utils.scala:212:7
      `FIRRTL_BEFORE_INITIAL	// ventus/src/pipeline/fpu_utils.scala:212:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// ventus/src/pipeline/fpu_utils.scala:212:7
      automatic logic [31:0] _RANDOM[0:8];	// ventus/src/pipeline/fpu_utils.scala:212:7
      `ifdef INIT_RANDOM_PROLOG_	// ventus/src/pipeline/fpu_utils.scala:212:7
        `INIT_RANDOM_PROLOG_	// ventus/src/pipeline/fpu_utils.scala:212:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// ventus/src/pipeline/fpu_utils.scala:212:7
        for (logic [3:0] i = 4'h0; i < 4'h9; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;	// ventus/src/pipeline/fpu_utils.scala:212:7
        end	// ventus/src/pipeline/fpu_utils.scala:212:7
        Q = _RANDOM[4'h0][30:0];	// ventus/src/pipeline/fpu_utils.scala:212:7, :222:18
        QM = {_RANDOM[4'h0][31], _RANDOM[4'h1][29:0]};	// ventus/src/pipeline/fpu_utils.scala:212:7, :222:18
        mask = {_RANDOM[4'h1][31:30], _RANDOM[4'h2][28:0]};	// ventus/src/pipeline/fpu_utils.scala:212:7, :222:18, :224:17
        b_111 = {_RANDOM[4'h2][31:29], _RANDOM[4'h3][27:0]};	// ventus/src/pipeline/fpu_utils.scala:212:7, :224:17, :225:26
        b_1100 = {_RANDOM[4'h3][31:28], _RANDOM[4'h4][26:0]};	// ventus/src/pipeline/fpu_utils.scala:212:7, :225:26
        b_01 = {_RANDOM[4'h5][31:23], _RANDOM[4'h6][18:0]};	// ventus/src/pipeline/fpu_utils.scala:212:7, :235:35
        b_10 = {_RANDOM[4'h6][31:19], _RANDOM[4'h7][14:0]};	// ventus/src/pipeline/fpu_utils.scala:212:7, :235:35
        b_11 = {_RANDOM[4'h7][31:15], _RANDOM[4'h8][10:0]};	// ventus/src/pipeline/fpu_utils.scala:212:7, :235:35
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// ventus/src/pipeline/fpu_utils.scala:212:7
      `FIRRTL_AFTER_INITIAL	// ventus/src/pipeline/fpu_utils.scala:212:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_QM = QM;	// ventus/src/pipeline/fpu_utils.scala:212:7, :222:18
  assign io_Q = Q;	// ventus/src/pipeline/fpu_utils.scala:212:7, :222:18
  assign io_F =
    io_qi == 3'h6
      ? _sqrtToCsaMap_T_23[30:0] & $signed($signed(mask) >>> _GEN_0) | b_1100
      : (&io_qi)
          ? _sqrtToCsaMap_T_16[30:0] & $signed($signed(mask) >>> _GEN_0) | b_111
          : io_qi == 3'h2
              ? _sqrtToCsaMap_T_9[30:0] & $signed($signed(mask) >>> _GEN_0) | b_1100
              : io_qi == 3'h1
                  ? _sqrtToCsaMap_T_2[30:0] & $signed($signed(mask) >>> _GEN_0) | b_111
                  : 31'h0;	// ventus/src/pipeline/fpu_utils.scala:212:7, :224:17, :225:26, :254:22, :255:{18,53,61,83}, :258:{35,47}, :269:8
endmodule

