// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module RRArbiter(	// src/main/scala/chisel3/util/Arbiter.scala:118:7
  input        clock,	// src/main/scala/chisel3/util/Arbiter.scala:118:7
  output       io_in_0_ready,	// src/main/scala/chisel3/util/Arbiter.scala:52:14
  input        io_in_0_valid,	// src/main/scala/chisel3/util/Arbiter.scala:52:14
  input  [4:0] io_in_0_bits_wf_tag,	// src/main/scala/chisel3/util/Arbiter.scala:52:14
  output       io_in_1_ready,	// src/main/scala/chisel3/util/Arbiter.scala:52:14
  input        io_in_1_valid,	// src/main/scala/chisel3/util/Arbiter.scala:52:14
  input  [4:0] io_in_1_bits_wf_tag,	// src/main/scala/chisel3/util/Arbiter.scala:52:14
  input        io_out_ready,	// src/main/scala/chisel3/util/Arbiter.scala:52:14
  output       io_out_valid,	// src/main/scala/chisel3/util/Arbiter.scala:52:14
  output [4:0] io_out_bits_wf_tag,	// src/main/scala/chisel3/util/Arbiter.scala:52:14
  output       io_chosen	// src/main/scala/chisel3/util/Arbiter.scala:52:14
);

  wire io_chosen_choice;	// src/main/scala/chisel3/util/Arbiter.scala:92:26, :94:{24,33}
  wire io_out_valid_0 = io_chosen_choice ? io_in_1_valid : io_in_0_valid;	// src/main/scala/chisel3/util/Arbiter.scala:55:16, :92:26, :94:{24,33}
  reg  ctrl_validMask_grantMask_lastGrant;	// src/main/scala/chisel3/util/Arbiter.scala:81:33
  wire ctrl_validMask_1 = io_in_1_valid & ~ctrl_validMask_grantMask_lastGrant;	// src/main/scala/chisel3/util/Arbiter.scala:81:33, :82:49, :83:76
  assign io_chosen_choice = ctrl_validMask_1 | ~io_in_0_valid;	// src/main/scala/chisel3/util/Arbiter.scala:82:49, :83:76, :90:41, :92:{26,35}, :94:{24,33}
  always @(posedge clock) begin	// src/main/scala/chisel3/util/Arbiter.scala:118:7
    if (io_out_ready & io_out_valid_0)	// src/main/scala/chisel3/util/Arbiter.scala:55:16, src/main/scala/chisel3/util/Decoupled.scala:51:35
      ctrl_validMask_grantMask_lastGrant <= io_chosen_choice;	// src/main/scala/chisel3/util/Arbiter.scala:81:33, :92:26, :94:{24,33}
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/chisel3/util/Arbiter.scala:118:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Arbiter.scala:118:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Arbiter.scala:118:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/chisel3/util/Arbiter.scala:118:7
      automatic logic [31:0] _RANDOM[0:0];	// src/main/scala/chisel3/util/Arbiter.scala:118:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Arbiter.scala:118:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Arbiter.scala:118:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/chisel3/util/Arbiter.scala:118:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/main/scala/chisel3/util/Arbiter.scala:118:7
        ctrl_validMask_grantMask_lastGrant = _RANDOM[/*Zero width*/ 1'b0][0];	// src/main/scala/chisel3/util/Arbiter.scala:81:33, :118:7
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Arbiter.scala:118:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Arbiter.scala:118:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_0_ready = ~ctrl_validMask_1 & io_out_ready;	// src/main/scala/chisel3/util/Arbiter.scala:45:78, :74:21, :83:76, :118:7
  assign io_in_1_ready =
    (~ctrl_validMask_grantMask_lastGrant | ~(ctrl_validMask_1 | io_in_0_valid))
    & io_out_ready;	// src/main/scala/chisel3/util/Arbiter.scala:45:{68,78}, :74:21, :81:33, :82:49, :83:76, :87:50, :118:7
  assign io_out_valid = io_out_valid_0;	// src/main/scala/chisel3/util/Arbiter.scala:55:16, :118:7
  assign io_out_bits_wf_tag =
    io_chosen_choice ? io_in_1_bits_wf_tag : io_in_0_bits_wf_tag;	// src/main/scala/chisel3/util/Arbiter.scala:55:16, :92:26, :94:{24,33}, :118:7
  assign io_chosen = io_chosen_choice;	// src/main/scala/chisel3/util/Arbiter.scala:92:26, :94:{24,33}, :118:7
endmodule

