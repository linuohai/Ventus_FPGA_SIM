// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module sort3(	// ventus/src/cta/utils.scala:56:7
  input         clock,	// ventus/src/cta/utils.scala:56:7
                reset,	// ventus/src/cta/utils.scala:56:7
  input  [17:0] io_in_0,	// ventus/src/cta/utils.scala:57:14
                io_in_1,	// ventus/src/cta/utils.scala:57:14
                io_in_2,	// ventus/src/cta/utils.scala:57:14
  output [17:0] io_out_0,	// ventus/src/cta/utils.scala:57:14
                io_out_1	// ventus/src/cta/utils.scala:57:14
);

  wire        cmp0 = io_in_0 > io_in_1;	// ventus/src/cta/utils.scala:61:23
  wire        cmp1 = io_in_1 > io_in_2;	// ventus/src/cta/utils.scala:62:23
  wire        cmp2 = io_in_2 > io_in_0;	// ventus/src/cta/utils.scala:63:23
  wire [1:0]  _io_out_2_T = {~cmp2, cmp0};	// ventus/src/cta/utils.scala:61:23, :63:23, :66:16, :72:12
  wire [1:0]  _io_out_2_T_3 = {~cmp0, cmp1};	// ventus/src/cta/utils.scala:61:23, :62:23, :68:16, :73:12
  wire [1:0]  _io_out_2_T_6 = {~cmp1, cmp2};	// ventus/src/cta/utils.scala:62:23, :63:23, :70:16, :74:12
  wire        _io_out_2_T_9 = cmp0 | cmp1;	// ventus/src/cta/utils.scala:61:23, :62:23, :75:17
  wire [17:0] _io_out_0_T_15 =
    ((&_io_out_2_T) ? io_in_0 : 18'h0) | ((&_io_out_2_T_3) ? io_in_1 : 18'h0)
    | ((&_io_out_2_T_6) ? io_in_2 : 18'h0) | (_io_out_2_T_9 | cmp2 ? 18'h0 : io_in_0);	// src/main/scala/chisel3/util/Mux.scala:30:73, ventus/src/cta/utils.scala:63:23, :72:{12,19}, :73:{12,19}, :74:{12,19}, :75:{17,30}
  wire [17:0] _io_out_1_T_10 =
    (^_io_out_2_T ? io_in_0 : 18'h0) | (^_io_out_2_T_3 ? io_in_1 : 18'h0)
    | (^_io_out_2_T_6 ? io_in_2 : 18'h0);	// src/main/scala/chisel3/util/Mux.scala:30:73, ventus/src/cta/utils.scala:72:12, :73:12, :74:12, :78:19, :79:19, :80:19
  `ifndef SYNTHESIS	// ventus/src/cta/utils.scala:89:9
    always @(posedge clock) begin	// ventus/src/cta/utils.scala:89:9
      automatic logic [17:0] _io_out_2_T_18 =
        (_io_out_2_T == 2'h0 ? io_in_0 : 18'h0)
        | (_io_out_2_T_3 == 2'h0 ? io_in_1 : 18'h0)
        | (_io_out_2_T_6 == 2'h0 ? io_in_2 : 18'h0)
        | (_io_out_2_T_9 | cmp2 ? 18'h0 : io_in_0);	// src/main/scala/chisel3/util/Mux.scala:30:73, ventus/src/cta/utils.scala:63:23, :72:12, :73:12, :74:12, :75:17, :83:20, :84:20, :85:20, :86:30
      if (~reset
          & ~(_io_out_0_T_15 >= _io_out_1_T_10 & _io_out_1_T_10 >= _io_out_2_T_18)) begin	// src/main/scala/chisel3/util/Mux.scala:30:73, ventus/src/cta/utils.scala:89:{9,20,33,46}
        if (`ASSERT_VERBOSE_COND_)	// ventus/src/cta/utils.scala:89:9
          $error("Assertion failed\n    at utils.scala:89 assert(io.out(0) >= io.out(1) && io.out(1) >= io.out(2))\n");	// ventus/src/cta/utils.scala:89:9
        if (`STOP_COND_)	// ventus/src/cta/utils.scala:89:9
          $fatal;	// ventus/src/cta/utils.scala:89:9
      end
      if (~reset
          & ~(_io_out_0_T_15 == io_in_0 | _io_out_0_T_15 == io_in_1
              | _io_out_0_T_15 == io_in_2)) begin	// src/main/scala/chisel3/util/Mux.scala:30:73, ventus/src/cta/utils.scala:89:9, :90:{29,40,66,79,92}
        if (`ASSERT_VERBOSE_COND_)	// ventus/src/cta/utils.scala:90:29
          $error("Assertion failed\n    at utils.scala:90 for(i <- 0 until 3) assert(io.out(i) === io.in(0) || io.out(i) === io.in(1) || io.out(i) === io.in(2) )\n");	// ventus/src/cta/utils.scala:90:29
        if (`STOP_COND_)	// ventus/src/cta/utils.scala:90:29
          $fatal;	// ventus/src/cta/utils.scala:90:29
      end
      if (~reset
          & ~(_io_out_1_T_10 == io_in_0 | _io_out_1_T_10 == io_in_1
              | _io_out_1_T_10 == io_in_2)) begin	// src/main/scala/chisel3/util/Mux.scala:30:73, ventus/src/cta/utils.scala:89:9, :90:{29,40,66,79,92}
        if (`ASSERT_VERBOSE_COND_)	// ventus/src/cta/utils.scala:90:29
          $error("Assertion failed\n    at utils.scala:90 for(i <- 0 until 3) assert(io.out(i) === io.in(0) || io.out(i) === io.in(1) || io.out(i) === io.in(2) )\n");	// ventus/src/cta/utils.scala:90:29
        if (`STOP_COND_)	// ventus/src/cta/utils.scala:90:29
          $fatal;	// ventus/src/cta/utils.scala:90:29
      end
      if (~reset
          & ~(_io_out_2_T_18 == io_in_0 | _io_out_2_T_18 == io_in_1
              | _io_out_2_T_18 == io_in_2)) begin	// src/main/scala/chisel3/util/Mux.scala:30:73, ventus/src/cta/utils.scala:89:9, :90:{29,40,66,79,92}
        if (`ASSERT_VERBOSE_COND_)	// ventus/src/cta/utils.scala:90:29
          $error("Assertion failed\n    at utils.scala:90 for(i <- 0 until 3) assert(io.out(i) === io.in(0) || io.out(i) === io.in(1) || io.out(i) === io.in(2) )\n");	// ventus/src/cta/utils.scala:90:29
        if (`STOP_COND_)	// ventus/src/cta/utils.scala:90:29
          $fatal;	// ventus/src/cta/utils.scala:90:29
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  assign io_out_0 = _io_out_0_T_15;	// src/main/scala/chisel3/util/Mux.scala:30:73, ventus/src/cta/utils.scala:56:7
  assign io_out_1 = _io_out_1_T_10;	// src/main/scala/chisel3/util/Mux.scala:30:73, ventus/src/cta/utils.scala:56:7
endmodule

