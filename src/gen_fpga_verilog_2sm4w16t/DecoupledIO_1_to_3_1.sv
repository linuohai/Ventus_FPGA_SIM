// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module DecoupledIO_1_to_3_1(	// ventus/src/cta/utils.scala:113:7
  input         clock,	// ventus/src/cta/utils.scala:113:7
                reset,	// ventus/src/cta/utils.scala:113:7
  output        io_in_ready,	// ventus/src/cta/utils.scala:114:14
  input         io_in_valid,	// ventus/src/cta/utils.scala:114:14
                io_in_bits_data0_cu_id,	// ventus/src/cta/utils.scala:114:14
  input  [2:0]  io_in_bits_data0_wg_slot_id,	// ventus/src/cta/utils.scala:114:14
  input  [31:0] io_in_bits_data0_wg_id,	// ventus/src/cta/utils.scala:114:14
  input         io_in_bits_data1_cu_id,	// ventus/src/cta/utils.scala:114:14
  input  [2:0]  io_in_bits_data1_wg_slot_id,	// ventus/src/cta/utils.scala:114:14
  input  [31:0] io_in_bits_data1_wg_id,	// ventus/src/cta/utils.scala:114:14
  input         io_in_bits_data2_cu_id,	// ventus/src/cta/utils.scala:114:14
  input  [2:0]  io_in_bits_data2_wg_slot_id,	// ventus/src/cta/utils.scala:114:14
  input  [31:0] io_in_bits_data2_wg_id,	// ventus/src/cta/utils.scala:114:14
  input         io_in_bits_ign0,	// ventus/src/cta/utils.scala:114:14
                io_in_bits_ign1,	// ventus/src/cta/utils.scala:114:14
                io_in_bits_ign2,	// ventus/src/cta/utils.scala:114:14
                io_out0_ready,	// ventus/src/cta/utils.scala:114:14
  output        io_out0_valid,	// ventus/src/cta/utils.scala:114:14
                io_out0_bits_cu_id,	// ventus/src/cta/utils.scala:114:14
  output [2:0]  io_out0_bits_wg_slot_id,	// ventus/src/cta/utils.scala:114:14
  output [31:0] io_out0_bits_wg_id,	// ventus/src/cta/utils.scala:114:14
  input         io_out1_ready,	// ventus/src/cta/utils.scala:114:14
  output        io_out1_valid,	// ventus/src/cta/utils.scala:114:14
                io_out1_bits_cu_id,	// ventus/src/cta/utils.scala:114:14
  output [2:0]  io_out1_bits_wg_slot_id,	// ventus/src/cta/utils.scala:114:14
  output [31:0] io_out1_bits_wg_id,	// ventus/src/cta/utils.scala:114:14
  input         io_out2_ready,	// ventus/src/cta/utils.scala:114:14
  output        io_out2_valid,	// ventus/src/cta/utils.scala:114:14
                io_out2_bits_cu_id,	// ventus/src/cta/utils.scala:114:14
  output [2:0]  io_out2_bits_wg_slot_id,	// ventus/src/cta/utils.scala:114:14
  output [31:0] io_out2_bits_wg_id	// ventus/src/cta/utils.scala:114:14
);

  wire io_out2_valid_0;	// ventus/src/cta/utils.scala:140:42
  wire io_out1_valid_0;	// ventus/src/cta/utils.scala:139:42
  wire io_out0_valid_0;	// ventus/src/cta/utils.scala:138:42
  reg  fire0;	// ventus/src/cta/utils.scala:131:36
  reg  fire1;	// ventus/src/cta/utils.scala:131:36
  reg  fire2;	// ventus/src/cta/utils.scala:131:36
  wire _io_in_ready_T = io_out0_ready & io_out0_valid_0;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/utils.scala:138:42
  wire _io_in_ready_T_3 = io_out1_ready & io_out1_valid_0;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/utils.scala:139:42
  wire _io_in_ready_T_7 = io_out2_ready & io_out2_valid_0;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/utils.scala:140:42
  wire io_in_ready_0 =
    (fire0 | _io_in_ready_T | io_in_bits_ign0)
    & (fire1 | _io_in_ready_T_3 | io_in_bits_ign1)
    & (fire2 | _io_in_ready_T_7 | io_in_bits_ign2);	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/utils.scala:131:36, :135:41, :136:{28,67}, :137:28
  assign io_out0_valid_0 = io_in_valid & ~fire0 & ~io_in_bits_ign0;	// ventus/src/cta/utils.scala:131:36, :138:{35,42,45}
  assign io_out1_valid_0 = io_in_valid & ~fire1 & ~io_in_bits_ign1;	// ventus/src/cta/utils.scala:131:36, :139:{35,42,45}
  assign io_out2_valid_0 = io_in_valid & ~fire2 & ~io_in_bits_ign2;	// ventus/src/cta/utils.scala:131:36, :140:{35,42,45}
  reg  in_fire_r;	// ventus/src/cta/utils.scala:143:26
  reg  in_valid_r;	// ventus/src/cta/utils.scala:144:27
  `ifndef SYNTHESIS	// ventus/src/cta/utils.scala:145:9
    always @(posedge clock) begin	// ventus/src/cta/utils.scala:145:9
      if (~reset & ~(in_fire_r | ~(in_valid_r & ~io_in_valid))) begin	// ventus/src/cta/utils.scala:143:26, :144:27, :145:{9,20,23,36,39}
        if (`ASSERT_VERBOSE_COND_)	// ventus/src/cta/utils.scala:145:9
          $error("Assertion failed\n    at utils.scala:145 assert(in_fire_r || !(in_valid_r && !io.in.valid))\n");	// ventus/src/cta/utils.scala:145:9
        if (`STOP_COND_)	// ventus/src/cta/utils.scala:145:9
          $fatal;	// ventus/src/cta/utils.scala:145:9
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin	// ventus/src/cta/utils.scala:113:7
    if (reset) begin	// ventus/src/cta/utils.scala:113:7
      fire0 <= 1'h0;	// ventus/src/cta/utils.scala:113:7, :131:36
      fire1 <= 1'h0;	// ventus/src/cta/utils.scala:113:7, :131:36
      fire2 <= 1'h0;	// ventus/src/cta/utils.scala:113:7, :131:36
      in_fire_r <= 1'h0;	// ventus/src/cta/utils.scala:113:7, :143:26
      in_valid_r <= 1'h0;	// ventus/src/cta/utils.scala:113:7, :144:27
    end
    else begin	// ventus/src/cta/utils.scala:113:7
      automatic logic _in_fire_r_T = io_in_ready_0 & io_in_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/utils.scala:136:67
      fire0 <= ~_in_fire_r_T & (fire0 | _io_in_ready_T | io_in_bits_ign0 & io_in_valid);	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/utils.scala:131:36, :132:{15,59,98}
      fire1 <= ~_in_fire_r_T & (fire1 | _io_in_ready_T_3 | io_in_bits_ign1 & io_in_valid);	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/utils.scala:131:36, :132:15, :133:{15,59,98}
      fire2 <= ~_in_fire_r_T & (fire2 | _io_in_ready_T_7 | io_in_bits_ign2 & io_in_valid);	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/utils.scala:131:36, :132:15, :134:{15,59,98}
      in_fire_r <= _in_fire_r_T;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/utils.scala:143:26
      in_valid_r <= io_in_valid;	// ventus/src/cta/utils.scala:144:27
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// ventus/src/cta/utils.scala:113:7
    `ifdef FIRRTL_BEFORE_INITIAL	// ventus/src/cta/utils.scala:113:7
      `FIRRTL_BEFORE_INITIAL	// ventus/src/cta/utils.scala:113:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// ventus/src/cta/utils.scala:113:7
      automatic logic [31:0] _RANDOM[0:0];	// ventus/src/cta/utils.scala:113:7
      `ifdef INIT_RANDOM_PROLOG_	// ventus/src/cta/utils.scala:113:7
        `INIT_RANDOM_PROLOG_	// ventus/src/cta/utils.scala:113:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// ventus/src/cta/utils.scala:113:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// ventus/src/cta/utils.scala:113:7
        fire0 = _RANDOM[/*Zero width*/ 1'b0][0];	// ventus/src/cta/utils.scala:113:7, :131:36
        fire1 = _RANDOM[/*Zero width*/ 1'b0][1];	// ventus/src/cta/utils.scala:113:7, :131:36
        fire2 = _RANDOM[/*Zero width*/ 1'b0][2];	// ventus/src/cta/utils.scala:113:7, :131:36
        in_fire_r = _RANDOM[/*Zero width*/ 1'b0][3];	// ventus/src/cta/utils.scala:113:7, :131:36, :143:26
        in_valid_r = _RANDOM[/*Zero width*/ 1'b0][4];	// ventus/src/cta/utils.scala:113:7, :131:36, :144:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// ventus/src/cta/utils.scala:113:7
      `FIRRTL_AFTER_INITIAL	// ventus/src/cta/utils.scala:113:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = io_in_ready_0;	// ventus/src/cta/utils.scala:113:7, :136:67
  assign io_out0_valid = io_out0_valid_0;	// ventus/src/cta/utils.scala:113:7, :138:42
  assign io_out0_bits_cu_id = io_in_bits_data0_cu_id;	// ventus/src/cta/utils.scala:113:7
  assign io_out0_bits_wg_slot_id = io_in_bits_data0_wg_slot_id;	// ventus/src/cta/utils.scala:113:7
  assign io_out0_bits_wg_id = io_in_bits_data0_wg_id;	// ventus/src/cta/utils.scala:113:7
  assign io_out1_valid = io_out1_valid_0;	// ventus/src/cta/utils.scala:113:7, :139:42
  assign io_out1_bits_cu_id = io_in_bits_data1_cu_id;	// ventus/src/cta/utils.scala:113:7
  assign io_out1_bits_wg_slot_id = io_in_bits_data1_wg_slot_id;	// ventus/src/cta/utils.scala:113:7
  assign io_out1_bits_wg_id = io_in_bits_data1_wg_id;	// ventus/src/cta/utils.scala:113:7
  assign io_out2_valid = io_out2_valid_0;	// ventus/src/cta/utils.scala:113:7, :140:42
  assign io_out2_bits_cu_id = io_in_bits_data2_cu_id;	// ventus/src/cta/utils.scala:113:7
  assign io_out2_bits_wg_slot_id = io_in_bits_data2_wg_slot_id;	// ventus/src/cta/utils.scala:113:7
  assign io_out2_bits_wg_id = io_in_bits_data2_wg_id;	// ventus/src/cta/utils.scala:113:7
endmodule

