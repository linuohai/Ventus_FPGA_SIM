// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Branch_back(	// ventus/src/pipeline/writeback.scala:16:7
  input         clock,	// ventus/src/pipeline/writeback.scala:16:7
                reset,	// ventus/src/pipeline/writeback.scala:16:7
                io_out_ready,	// ventus/src/pipeline/writeback.scala:17:14
  output        io_out_valid,	// ventus/src/pipeline/writeback.scala:17:14
  output [1:0]  io_out_bits_wid,	// ventus/src/pipeline/writeback.scala:17:14
  output        io_out_bits_jump,	// ventus/src/pipeline/writeback.scala:17:14
  output [31:0] io_out_bits_new_pc,	// ventus/src/pipeline/writeback.scala:17:14
  output        io_in0_ready,	// ventus/src/pipeline/writeback.scala:17:14
  input         io_in0_valid,	// ventus/src/pipeline/writeback.scala:17:14
  input  [1:0]  io_in0_bits_wid,	// ventus/src/pipeline/writeback.scala:17:14
  input         io_in0_bits_jump,	// ventus/src/pipeline/writeback.scala:17:14
  input  [31:0] io_in0_bits_new_pc,	// ventus/src/pipeline/writeback.scala:17:14
  input  [7:0]  io_in0_bits_spike_info_sm_id,	// ventus/src/pipeline/writeback.scala:17:14
  input  [31:0] io_in0_bits_spike_info_pc,	// ventus/src/pipeline/writeback.scala:17:14
                io_in0_bits_spike_info_inst,	// ventus/src/pipeline/writeback.scala:17:14
  output        io_in1_ready,	// ventus/src/pipeline/writeback.scala:17:14
  input         io_in1_valid,	// ventus/src/pipeline/writeback.scala:17:14
  input  [1:0]  io_in1_bits_wid,	// ventus/src/pipeline/writeback.scala:17:14
  input         io_in1_bits_jump,	// ventus/src/pipeline/writeback.scala:17:14
  input  [31:0] io_in1_bits_new_pc,	// ventus/src/pipeline/writeback.scala:17:14
  input  [7:0]  io_in1_bits_spike_info_sm_id,	// ventus/src/pipeline/writeback.scala:17:14
  input  [31:0] io_in1_bits_spike_info_pc,	// ventus/src/pipeline/writeback.scala:17:14
                io_in1_bits_spike_info_inst	// ventus/src/pipeline/writeback.scala:17:14
);

  wire        _arbiter_io_out_valid;	// ventus/src/pipeline/writeback.scala:24:21
  wire [1:0]  _arbiter_io_out_bits_wid;	// ventus/src/pipeline/writeback.scala:24:21
  wire        _arbiter_io_out_bits_jump;	// ventus/src/pipeline/writeback.scala:24:21
  wire [31:0] _arbiter_io_out_bits_new_pc;	// ventus/src/pipeline/writeback.scala:24:21
  wire [7:0]  _arbiter_io_out_bits_spike_info_sm_id;	// ventus/src/pipeline/writeback.scala:24:21
  wire [31:0] _arbiter_io_out_bits_spike_info_pc;	// ventus/src/pipeline/writeback.scala:24:21
  wire [31:0] _arbiter_io_out_bits_spike_info_inst;	// ventus/src/pipeline/writeback.scala:24:21
  `ifndef SYNTHESIS	// ventus/src/pipeline/writeback.scala:30:13
    always @(posedge clock) begin	// ventus/src/pipeline/writeback.scala:30:13
      if ((`PRINTF_COND_) & io_out_ready & _arbiter_io_out_valid & ~reset)	// ventus/src/pipeline/writeback.scala:24:21, :30:13
        $fwrite(32'h80000002, "sm %d warp %d 0x%x 0x%x Jump? %d  %x\n",
                _arbiter_io_out_bits_spike_info_sm_id, _arbiter_io_out_bits_wid,
                _arbiter_io_out_bits_spike_info_pc, _arbiter_io_out_bits_spike_info_inst,
                _arbiter_io_out_bits_jump, _arbiter_io_out_bits_new_pc);	// ventus/src/pipeline/writeback.scala:24:21, :30:13
    end // always @(posedge)
  `endif // not def SYNTHESIS
  Arbiter2_BranchCtrl arbiter (	// ventus/src/pipeline/writeback.scala:24:21
    .io_in_0_ready                 (io_in0_ready),
    .io_in_0_valid                 (io_in0_valid),
    .io_in_0_bits_wid              (io_in0_bits_wid),
    .io_in_0_bits_jump             (io_in0_bits_jump),
    .io_in_0_bits_new_pc           (io_in0_bits_new_pc),
    .io_in_0_bits_spike_info_sm_id (io_in0_bits_spike_info_sm_id),
    .io_in_0_bits_spike_info_pc    (io_in0_bits_spike_info_pc),
    .io_in_0_bits_spike_info_inst  (io_in0_bits_spike_info_inst),
    .io_in_1_ready                 (io_in1_ready),
    .io_in_1_valid                 (io_in1_valid),
    .io_in_1_bits_wid              (io_in1_bits_wid),
    .io_in_1_bits_jump             (io_in1_bits_jump),
    .io_in_1_bits_new_pc           (io_in1_bits_new_pc),
    .io_in_1_bits_spike_info_sm_id (io_in1_bits_spike_info_sm_id),
    .io_in_1_bits_spike_info_pc    (io_in1_bits_spike_info_pc),
    .io_in_1_bits_spike_info_inst  (io_in1_bits_spike_info_inst),
    .io_out_ready                  (io_out_ready),
    .io_out_valid                  (_arbiter_io_out_valid),
    .io_out_bits_wid               (_arbiter_io_out_bits_wid),
    .io_out_bits_jump              (_arbiter_io_out_bits_jump),
    .io_out_bits_new_pc            (_arbiter_io_out_bits_new_pc),
    .io_out_bits_spike_info_sm_id  (_arbiter_io_out_bits_spike_info_sm_id),
    .io_out_bits_spike_info_pc     (_arbiter_io_out_bits_spike_info_pc),
    .io_out_bits_spike_info_inst   (_arbiter_io_out_bits_spike_info_inst)
  );
  assign io_out_valid = _arbiter_io_out_valid;	// ventus/src/pipeline/writeback.scala:16:7, :24:21
  assign io_out_bits_wid = _arbiter_io_out_bits_wid;	// ventus/src/pipeline/writeback.scala:16:7, :24:21
  assign io_out_bits_jump = _arbiter_io_out_bits_jump;	// ventus/src/pipeline/writeback.scala:16:7, :24:21
  assign io_out_bits_new_pc = _arbiter_io_out_bits_new_pc;	// ventus/src/pipeline/writeback.scala:16:7, :24:21
endmodule

