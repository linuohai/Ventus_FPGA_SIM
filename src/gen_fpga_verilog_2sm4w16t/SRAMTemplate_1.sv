// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module SRAMTemplate_1(	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
  input           clock,	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
                  reset,	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
                  io_r_req_valid,	// ventus/src/SRAMTemplate/SRAMTemplate.scala:90:14
  input  [7:0]    io_r_req_bits_setIdx,	// ventus/src/SRAMTemplate/SRAMTemplate.scala:90:14
  output [1023:0] io_r_resp_data_0,	// ventus/src/SRAMTemplate/SRAMTemplate.scala:90:14
                  io_r_resp_data_1,	// ventus/src/SRAMTemplate/SRAMTemplate.scala:90:14
  input           io_w_req_valid,	// ventus/src/SRAMTemplate/SRAMTemplate.scala:90:14
  input  [7:0]    io_w_req_bits_setIdx,	// ventus/src/SRAMTemplate/SRAMTemplate.scala:90:14
  input  [1023:0] io_w_req_bits_data_0,	// ventus/src/SRAMTemplate/SRAMTemplate.scala:90:14
                  io_w_req_bits_data_1,	// ventus/src/SRAMTemplate/SRAMTemplate.scala:90:14
  input  [1:0]    io_w_req_bits_waymask	// ventus/src/SRAMTemplate/SRAMTemplate.scala:90:14
);

  wire [2047:0] _array_R0_data;	// ventus/src/SRAMTemplate/SRAMTemplate.scala:96:26
  reg  [63:0]   bypass_wdata_lfsr;	// ventus/src/SRAMTemplate/LFSR64.scala:20:23
  reg  [63:0]   bypass_wdata_lfsr_1;	// ventus/src/SRAMTemplate/LFSR64.scala:20:23
  reg           bypass_mask_need_check;	// ventus/src/SRAMTemplate/SRAMTemplate.scala:121:29
  reg  [7:0]    bypass_mask_waddr_reg;	// ventus/src/SRAMTemplate/SRAMTemplate.scala:122:28
  reg  [7:0]    bypass_mask_raddr_reg;	// ventus/src/SRAMTemplate/SRAMTemplate.scala:123:28
  reg  [1:0]    bypass_mask_bypass_REG;	// ventus/src/SRAMTemplate/SRAMTemplate.scala:125:76
  wire [1:0]    bypass_mask =
    {2{bypass_mask_need_check & bypass_mask_waddr_reg == bypass_mask_raddr_reg}}
    & bypass_mask_bypass_REG;	// ventus/src/SRAMTemplate/SRAMTemplate.scala:121:29, :122:28, :123:28, :125:{22,39,52,67,76}
  always @(posedge clock) begin	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
    if (reset) begin	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
      bypass_wdata_lfsr <= 64'h1234567887654321;	// ventus/src/SRAMTemplate/LFSR64.scala:20:23
      bypass_wdata_lfsr_1 <= 64'h1234567887654321;	// ventus/src/SRAMTemplate/LFSR64.scala:20:23
    end
    else begin	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
      if (bypass_wdata_lfsr == 64'h0)	// ventus/src/SRAMTemplate/LFSR64.scala:20:23, :23:24
        bypass_wdata_lfsr <= 64'h1;	// ventus/src/SRAMTemplate/LFSR64.scala:20:23, :23:18
      else	// ventus/src/SRAMTemplate/LFSR64.scala:23:24
        bypass_wdata_lfsr <=
          {bypass_wdata_lfsr[0] ^ bypass_wdata_lfsr[1] ^ bypass_wdata_lfsr[3]
             ^ bypass_wdata_lfsr[4],
           bypass_wdata_lfsr[63:1]};	// ventus/src/SRAMTemplate/LFSR64.scala:20:23, :21:{19,29,39,43,49}, :23:{41,51}
      if (bypass_wdata_lfsr_1 == 64'h0)	// ventus/src/SRAMTemplate/LFSR64.scala:20:23, :23:24
        bypass_wdata_lfsr_1 <= 64'h1;	// ventus/src/SRAMTemplate/LFSR64.scala:20:23, :23:18
      else	// ventus/src/SRAMTemplate/LFSR64.scala:23:24
        bypass_wdata_lfsr_1 <=
          {bypass_wdata_lfsr_1[0] ^ bypass_wdata_lfsr_1[1] ^ bypass_wdata_lfsr_1[3]
             ^ bypass_wdata_lfsr_1[4],
           bypass_wdata_lfsr_1[63:1]};	// ventus/src/SRAMTemplate/LFSR64.scala:20:23, :21:{19,29,39,43,49}, :23:{41,51}
    end
    bypass_mask_need_check <= io_r_req_valid & io_w_req_valid;	// ventus/src/SRAMTemplate/SRAMTemplate.scala:121:{29,34}
    bypass_mask_waddr_reg <= io_w_req_bits_setIdx;	// ventus/src/SRAMTemplate/SRAMTemplate.scala:122:28
    bypass_mask_raddr_reg <= io_r_req_bits_setIdx;	// ventus/src/SRAMTemplate/SRAMTemplate.scala:123:28
    bypass_mask_bypass_REG <= io_w_req_bits_waymask;	// ventus/src/SRAMTemplate/SRAMTemplate.scala:125:76
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
    `ifdef FIRRTL_BEFORE_INITIAL	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
      `FIRRTL_BEFORE_INITIAL	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
      automatic logic [31:0] _RANDOM[0:4];	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
      `ifdef INIT_RANDOM_PROLOG_	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
        `INIT_RANDOM_PROLOG_	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
        end	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
        bypass_wdata_lfsr = {_RANDOM[3'h0], _RANDOM[3'h1]};	// ventus/src/SRAMTemplate/LFSR64.scala:20:23, ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
        bypass_wdata_lfsr_1 = {_RANDOM[3'h2], _RANDOM[3'h3]};	// ventus/src/SRAMTemplate/LFSR64.scala:20:23, ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
        bypass_mask_need_check = _RANDOM[3'h4][0];	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7, :121:29
        bypass_mask_waddr_reg = _RANDOM[3'h4][8:1];	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7, :121:29, :122:28
        bypass_mask_raddr_reg = _RANDOM[3'h4][16:9];	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7, :121:29, :123:28
        bypass_mask_bypass_REG = _RANDOM[3'h4][18:17];	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7, :121:29, :125:76
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
      `FIRRTL_AFTER_INITIAL	// ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  array_0 array (	// ventus/src/SRAMTemplate/SRAMTemplate.scala:96:26
    .R0_addr (io_r_req_bits_setIdx),
    .R0_en   (io_r_req_valid),
    .R0_clk  (clock),
    .R0_data (_array_R0_data),
    .W0_addr (io_w_req_bits_setIdx),
    .W0_en   (io_w_req_valid),
    .W0_clk  (clock),
    .W0_data ({io_w_req_bits_data_1, io_w_req_bits_data_0}),	// ventus/src/SRAMTemplate/SRAMTemplate.scala:96:26
    .W0_mask (io_w_req_bits_waymask)
  );
  assign io_r_resp_data_0 =
    bypass_mask[0] ? {960'h0, bypass_wdata_lfsr} : _array_R0_data[1023:0];	// ventus/src/SRAMTemplate/LFSR64.scala:20:23, ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7, :96:26, :125:67, :129:58, :133:30, :134:30
  assign io_r_resp_data_1 =
    bypass_mask[1] ? {960'h0, bypass_wdata_lfsr_1} : _array_R0_data[2047:1024];	// ventus/src/SRAMTemplate/LFSR64.scala:20:23, ventus/src/SRAMTemplate/SRAMTemplate.scala:88:7, :96:26, :125:67, :129:58, :133:30, :134:30
endmodule

