// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Queue2_cta_data(	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  input         clock,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
                reset,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  output        io_enq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input         io_enq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [2:0]  io_enq_bits_wg_slot_id,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [3:0]  io_enq_bits_num_wf,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input         io_enq_bits_lds_dealloc_en,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                io_enq_bits_sgpr_dealloc_en,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                io_enq_bits_vgpr_dealloc_en,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [10:0] io_enq_bits_sgpr_base,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                io_enq_bits_vgpr_base,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [16:0] io_enq_bits_lds_base,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [11:0] io_enq_bits_num_sgpr_per_wf,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                io_enq_bits_num_vgpr_per_wf,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [17:0] io_enq_bits_num_pds_per_wf,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [5:0]  io_enq_bits_num_thread_per_wf,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [31:0] io_enq_bits_gds_base,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                io_enq_bits_pds_base,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                io_enq_bits_start_pc,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                io_enq_bits_csr_kernel,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [10:0] io_enq_bits_num_wg_x,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                io_enq_bits_num_wg_y,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                io_enq_bits_num_wg_z,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [31:0] io_enq_bits_wg_id,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input         io_deq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output        io_deq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [2:0]  io_deq_bits_wg_slot_id,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [3:0]  io_deq_bits_num_wf,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output        io_deq_bits_lds_dealloc_en,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                io_deq_bits_sgpr_dealloc_en,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                io_deq_bits_vgpr_dealloc_en,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [10:0] io_deq_bits_sgpr_base,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                io_deq_bits_vgpr_base,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [16:0] io_deq_bits_lds_base,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [11:0] io_deq_bits_num_sgpr_per_wf,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                io_deq_bits_num_vgpr_per_wf,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [17:0] io_deq_bits_num_pds_per_wf,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [5:0]  io_deq_bits_num_thread_per_wf,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [31:0] io_deq_bits_pds_base,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                io_deq_bits_start_pc,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                io_deq_bits_csr_kernel,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [10:0] io_deq_bits_num_wg_x,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                io_deq_bits_num_wg_y,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                io_deq_bits_num_wg_z,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [31:0] io_deq_bits_wg_id	// src/main/scala/chisel3/util/Decoupled.scala:255:14
);

  wire [257:0] _ram_ext_R0_data;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  reg          wrap;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg          wrap_1;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg          maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27
  wire         ptr_match = wrap == wrap_1;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:260:33
  wire         empty = ptr_match & ~maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27, :260:33, :261:{25,28}
  wire         full = ptr_match & maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27, :260:33, :262:24
  wire         do_enq = ~full & io_enq_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :262:24, :286:19
  always @(posedge clock) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    if (reset) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      wrap <= 1'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
      wrap_1 <= 1'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
      maybe_full <= 1'h0;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
    end
    else begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      automatic logic do_deq = io_deq_ready & ~empty;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :261:25, :285:19
      if (do_enq)	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        wrap <= wrap - 1'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      if (do_deq)	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        wrap_1 <= wrap_1 - 1'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      if (~(do_enq == do_deq))	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27, :276:{15,27}, :277:16
        maybe_full <= do_enq;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      automatic logic [31:0] _RANDOM[0:0];	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        wrap = _RANDOM[/*Zero width*/ 1'b0][0];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
        wrap_1 = _RANDOM[/*Zero width*/ 1'b0][1];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][2];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_2x258 ram_ext (	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    .R0_addr (wrap_1),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .R0_en   (1'h1),	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (wrap),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .W0_en   (do_enq),	// src/main/scala/chisel3/util/Decoupled.scala:51:35
    .W0_clk  (clock),
    .W0_data
      ({io_enq_bits_wg_id,
        io_enq_bits_num_wg_z,
        io_enq_bits_num_wg_y,
        io_enq_bits_num_wg_x,
        io_enq_bits_csr_kernel,
        io_enq_bits_start_pc,
        io_enq_bits_pds_base,
        io_enq_bits_num_thread_per_wf,
        io_enq_bits_num_pds_per_wf,
        io_enq_bits_num_vgpr_per_wf,
        io_enq_bits_num_sgpr_per_wf,
        io_enq_bits_lds_base,
        io_enq_bits_vgpr_base,
        io_enq_bits_sgpr_base,
        io_enq_bits_vgpr_dealloc_en,
        io_enq_bits_sgpr_dealloc_en,
        io_enq_bits_lds_dealloc_en,
        io_enq_bits_num_wf,
        io_enq_bits_wg_slot_id})	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  );
  assign io_enq_ready = ~full;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :262:24, :286:19
  assign io_deq_valid = ~empty;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :261:25, :285:19
  assign io_deq_bits_wg_slot_id = _ram_ext_R0_data[2:0];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_num_wf = _ram_ext_R0_data[6:3];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_lds_dealloc_en = _ram_ext_R0_data[7];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_sgpr_dealloc_en = _ram_ext_R0_data[8];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_vgpr_dealloc_en = _ram_ext_R0_data[9];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_sgpr_base = _ram_ext_R0_data[20:10];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_vgpr_base = _ram_ext_R0_data[31:21];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_lds_base = _ram_ext_R0_data[48:32];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_num_sgpr_per_wf = _ram_ext_R0_data[60:49];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_num_vgpr_per_wf = _ram_ext_R0_data[72:61];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_num_pds_per_wf = _ram_ext_R0_data[90:73];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_num_thread_per_wf = _ram_ext_R0_data[96:91];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_pds_base = _ram_ext_R0_data[128:97];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_start_pc = _ram_ext_R0_data[160:129];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_csr_kernel = _ram_ext_R0_data[192:161];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_num_wg_x = _ram_ext_R0_data[203:193];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_num_wg_y = _ram_ext_R0_data[214:204];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_num_wg_z = _ram_ext_R0_data[225:215];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_wg_id = _ram_ext_R0_data[257:226];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
endmodule

