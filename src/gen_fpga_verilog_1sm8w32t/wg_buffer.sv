// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module wg_buffer(	// ventus/src/cta/wg_buffer.scala:35:7
  input         clock,	// ventus/src/cta/wg_buffer.scala:35:7
                reset,	// ventus/src/cta/wg_buffer.scala:35:7
  output        io_host_wg_new_ready,	// ventus/src/cta/wg_buffer.scala:36:14
  input         io_host_wg_new_valid,	// ventus/src/cta/wg_buffer.scala:36:14
  input  [3:0]  io_host_wg_new_bits_num_wf,	// ventus/src/cta/wg_buffer.scala:36:14
  input  [11:0] io_host_wg_new_bits_num_sgpr,	// ventus/src/cta/wg_buffer.scala:36:14
                io_host_wg_new_bits_num_vgpr,	// ventus/src/cta/wg_buffer.scala:36:14
  input  [17:0] io_host_wg_new_bits_num_lds,	// ventus/src/cta/wg_buffer.scala:36:14
  input  [11:0] io_host_wg_new_bits_num_sgpr_per_wf,	// ventus/src/cta/wg_buffer.scala:36:14
                io_host_wg_new_bits_num_vgpr_per_wf,	// ventus/src/cta/wg_buffer.scala:36:14
  input  [17:0] io_host_wg_new_bits_num_pds_per_wf,	// ventus/src/cta/wg_buffer.scala:36:14
  input  [5:0]  io_host_wg_new_bits_num_thread_per_wf,	// ventus/src/cta/wg_buffer.scala:36:14
  input  [31:0] io_host_wg_new_bits_gds_base,	// ventus/src/cta/wg_buffer.scala:36:14
                io_host_wg_new_bits_pds_base,	// ventus/src/cta/wg_buffer.scala:36:14
                io_host_wg_new_bits_start_pc,	// ventus/src/cta/wg_buffer.scala:36:14
                io_host_wg_new_bits_csr_kernel,	// ventus/src/cta/wg_buffer.scala:36:14
  input  [10:0] io_host_wg_new_bits_num_wg_x,	// ventus/src/cta/wg_buffer.scala:36:14
                io_host_wg_new_bits_num_wg_y,	// ventus/src/cta/wg_buffer.scala:36:14
                io_host_wg_new_bits_num_wg_z,	// ventus/src/cta/wg_buffer.scala:36:14
  input  [31:0] io_host_wg_new_bits_wg_id,	// ventus/src/cta/wg_buffer.scala:36:14
  input         io_alloc_wg_new_ready,	// ventus/src/cta/wg_buffer.scala:36:14
  output        io_alloc_wg_new_valid,	// ventus/src/cta/wg_buffer.scala:36:14
  output [3:0]  io_alloc_wg_new_bits_num_wf,	// ventus/src/cta/wg_buffer.scala:36:14
  output [11:0] io_alloc_wg_new_bits_num_sgpr,	// ventus/src/cta/wg_buffer.scala:36:14
                io_alloc_wg_new_bits_num_vgpr,	// ventus/src/cta/wg_buffer.scala:36:14
  output [17:0] io_alloc_wg_new_bits_num_lds,	// ventus/src/cta/wg_buffer.scala:36:14
  output [31:0] io_alloc_wg_new_bits_wg_id,	// ventus/src/cta/wg_buffer.scala:36:14
  output [2:0]  io_alloc_wg_new_bits_wgram_addr,	// ventus/src/cta/wg_buffer.scala:36:14
  output        io_alloc_result_ready,	// ventus/src/cta/wg_buffer.scala:36:14
  input         io_alloc_result_valid,	// ventus/src/cta/wg_buffer.scala:36:14
                io_alloc_result_bits_accept,	// ventus/src/cta/wg_buffer.scala:36:14
  input  [2:0]  io_alloc_result_bits_wgram_addr,	// ventus/src/cta/wg_buffer.scala:36:14
  input  [31:0] io_alloc_result_bits_wg_id,	// ventus/src/cta/wg_buffer.scala:36:14
  input         io_cuinterface_wg_new_ready,	// ventus/src/cta/wg_buffer.scala:36:14
  output        io_cuinterface_wg_new_valid,	// ventus/src/cta/wg_buffer.scala:36:14
  output [5:0]  io_cuinterface_wg_new_bits_num_thread_per_wf,	// ventus/src/cta/wg_buffer.scala:36:14
  output [31:0] io_cuinterface_wg_new_bits_gds_base,	// ventus/src/cta/wg_buffer.scala:36:14
                io_cuinterface_wg_new_bits_pds_base,	// ventus/src/cta/wg_buffer.scala:36:14
                io_cuinterface_wg_new_bits_start_pc,	// ventus/src/cta/wg_buffer.scala:36:14
                io_cuinterface_wg_new_bits_csr_kernel,	// ventus/src/cta/wg_buffer.scala:36:14
  output [10:0] io_cuinterface_wg_new_bits_num_wg_x,	// ventus/src/cta/wg_buffer.scala:36:14
                io_cuinterface_wg_new_bits_num_wg_y,	// ventus/src/cta/wg_buffer.scala:36:14
                io_cuinterface_wg_new_bits_num_wg_z,	// ventus/src/cta/wg_buffer.scala:36:14
  output [11:0] io_cuinterface_wg_new_bits_num_sgpr_per_wf,	// ventus/src/cta/wg_buffer.scala:36:14
                io_cuinterface_wg_new_bits_num_vgpr_per_wf,	// ventus/src/cta/wg_buffer.scala:36:14
  output [17:0] io_cuinterface_wg_new_bits_num_pds_per_wf,	// ventus/src/cta/wg_buffer.scala:36:14
  output [31:0] io_cuinterface_wg_new_bits_wg_id	// ventus/src/cta/wg_buffer.scala:36:14
);

  wire         io_alloc_result_ready_0;	// ventus/src/cta/wg_buffer.scala:157:31
  wire         _wgram1_rd_next_inst_io_out_valid;	// ventus/src/cta/utils.scala:45:22
  wire [2:0]   _wgram1_rd_next_inst_io_out_bits;	// ventus/src/cta/utils.scala:45:22
  wire         _wgram_wr_next_inst_io_out_valid;	// ventus/src/cta/utils.scala:45:22
  wire [2:0]   _wgram_wr_next_inst_io_out_bits;	// ventus/src/cta/utils.scala:45:22
  wire [241:0] _wgram2_ext_R0_data;	// ventus/src/cta/wg_buffer.scala:56:19
  wire [77:0]  _wgram1_ext_R0_data;	// ventus/src/cta/wg_buffer.scala:55:19
  wire [5:0]   wgram2_wr_data_num_thread_per_wf = io_host_wg_new_bits_num_thread_per_wf;	// ventus/src/cta/wg_buffer.scala:61:28
  wire [31:0]  wgram2_wr_data_gds_base = io_host_wg_new_bits_gds_base;	// ventus/src/cta/wg_buffer.scala:61:28
  wire [31:0]  wgram2_wr_data_pds_base = io_host_wg_new_bits_pds_base;	// ventus/src/cta/wg_buffer.scala:61:28
  wire [31:0]  wgram2_wr_data_start_pc = io_host_wg_new_bits_start_pc;	// ventus/src/cta/wg_buffer.scala:61:28
  wire [31:0]  wgram2_wr_data_csr_kernel = io_host_wg_new_bits_csr_kernel;	// ventus/src/cta/wg_buffer.scala:61:28
  wire [10:0]  wgram2_wr_data_num_wg_x = io_host_wg_new_bits_num_wg_x;	// ventus/src/cta/wg_buffer.scala:61:28
  wire [10:0]  wgram2_wr_data_num_wg_y = io_host_wg_new_bits_num_wg_y;	// ventus/src/cta/wg_buffer.scala:61:28
  wire [10:0]  wgram2_wr_data_num_wg_z = io_host_wg_new_bits_num_wg_z;	// ventus/src/cta/wg_buffer.scala:61:28
  wire [11:0]  wgram2_wr_data_num_sgpr_per_wf = io_host_wg_new_bits_num_sgpr_per_wf;	// ventus/src/cta/wg_buffer.scala:61:28
  wire [11:0]  wgram2_wr_data_num_vgpr_per_wf = io_host_wg_new_bits_num_vgpr_per_wf;	// ventus/src/cta/wg_buffer.scala:61:28
  wire [17:0]  wgram2_wr_data_num_pds_per_wf = io_host_wg_new_bits_num_pds_per_wf;	// ventus/src/cta/wg_buffer.scala:61:28
  wire [31:0]  wgram2_wr_data_wg_id = io_host_wg_new_bits_wg_id;	// ventus/src/cta/wg_buffer.scala:61:28
  wire         wgram2_wr_data_useless = 1'h0;	// ventus/src/cta/wg_buffer.scala:35:7, :61:28
  reg  [7:0]   wgram_valid;	// ventus/src/cta/wg_buffer.scala:57:28
  reg  [7:0]   wgram_alloc;	// ventus/src/cta/wg_buffer.scala:58:28
  wire [7:0]   _wgram_wr_next_T = ~wgram_valid;	// ventus/src/cta/wg_buffer.scala:57:28, :72:41
  wire [7:0]   _wgram1_rd_next_T = ~wgram_alloc;	// ventus/src/cta/wg_buffer.scala:58:28, :73:56
  wire         wgram_wr_act = io_host_wg_new_valid & _wgram_wr_next_inst_io_out_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/utils.scala:45:22
  reg          alloc_wg_new_valid_r;	// ventus/src/cta/wg_buffer.scala:100:37
  wire         _inst_io_out_ready_T_1 = ~alloc_wg_new_valid_r | io_alloc_wg_new_ready;	// ventus/src/cta/wg_buffer.scala:100:37, :107:{28,50}
  wire         wgram1_rd_act = _inst_io_out_ready_T_1 & _wgram1_rd_next_inst_io_out_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/utils.scala:45:22, ventus/src/cta/wg_buffer.scala:107:50
  reg  [3:0]   wgram1_rd_data_r_num_wf;	// ventus/src/cta/wg_buffer.scala:111:30
  reg  [11:0]  wgram1_rd_data_r_num_sgpr;	// ventus/src/cta/wg_buffer.scala:111:30
  reg  [11:0]  wgram1_rd_data_r_num_vgpr;	// ventus/src/cta/wg_buffer.scala:111:30
  reg  [17:0]  wgram1_rd_data_r_num_lds;	// ventus/src/cta/wg_buffer.scala:111:30
  reg  [31:0]  wgram1_rd_data_r_wg_id;	// ventus/src/cta/wg_buffer.scala:111:30
  reg  [2:0]   wgram1_rd_data_addr;	// ventus/src/cta/wg_buffer.scala:112:38
  reg          cuinterface_new_wg_valid_r;	// ventus/src/cta/wg_buffer.scala:128:43
  reg  [5:0]   wgram2_rd_data_num_thread_per_wf;	// ventus/src/cta/wg_buffer.scala:133:33
  reg  [31:0]  wgram2_rd_data_gds_base;	// ventus/src/cta/wg_buffer.scala:133:33
  reg  [31:0]  wgram2_rd_data_pds_base;	// ventus/src/cta/wg_buffer.scala:133:33
  reg  [31:0]  wgram2_rd_data_start_pc;	// ventus/src/cta/wg_buffer.scala:133:33
  reg  [31:0]  wgram2_rd_data_csr_kernel;	// ventus/src/cta/wg_buffer.scala:133:33
  reg  [10:0]  wgram2_rd_data_num_wg_x;	// ventus/src/cta/wg_buffer.scala:133:33
  reg  [10:0]  wgram2_rd_data_num_wg_y;	// ventus/src/cta/wg_buffer.scala:133:33
  reg  [10:0]  wgram2_rd_data_num_wg_z;	// ventus/src/cta/wg_buffer.scala:133:33
  reg  [11:0]  wgram2_rd_data_num_sgpr_per_wf;	// ventus/src/cta/wg_buffer.scala:133:33
  reg  [11:0]  wgram2_rd_data_num_vgpr_per_wf;	// ventus/src/cta/wg_buffer.scala:133:33
  reg  [17:0]  wgram2_rd_data_num_pds_per_wf;	// ventus/src/cta/wg_buffer.scala:133:33
  reg          wgram2_rd_data_useless;	// ventus/src/cta/wg_buffer.scala:133:33
  reg  [31:0]  wgram2_rd_data_wg_id;	// ventus/src/cta/wg_buffer.scala:133:33
  reg  [31:0]  alloc_result_wgid;	// ventus/src/cta/wg_buffer.scala:140:38
  reg          wgram_rd2_clear_act_r1;	// ventus/src/cta/wg_buffer.scala:141:41
  wire         wgram_rd2_clear_ready =
    ~cuinterface_new_wg_valid_r | io_cuinterface_wg_new_ready;	// ventus/src/cta/wg_buffer.scala:128:43, :150:{31,59}
  wire         _wgram_alloc_clear_act_T = io_alloc_result_ready_0 & io_alloc_result_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/wg_buffer.scala:157:31
  wire         wgram_rd2_clear_act =
    _wgram_alloc_clear_act_T & io_alloc_result_bits_accept & wgram_rd2_clear_ready;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/wg_buffer.scala:150:59, :151:80
  assign io_alloc_result_ready_0 = ~io_alloc_result_bits_accept | wgram_rd2_clear_ready;	// ventus/src/cta/wg_buffer.scala:150:59, :157:31
  wire [7:0]   wgram_valid_setmask =
    {7'h0, wgram_wr_act} << _wgram_wr_next_inst_io_out_bits;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/utils.scala:45:22, ventus/src/cta/wg_buffer.scala:57:28, :163:72
  wire [7:0]   _GEN = {5'h0, io_alloc_result_bits_wgram_addr};	// ventus/src/cta/wg_buffer.scala:163:72, :164:79
  wire [7:0]   wgram_valid_rstmask = {7'h0, wgram_rd2_clear_act} << _GEN;	// ventus/src/cta/wg_buffer.scala:57:28, :151:80, :164:79
  wire [7:0]   wgram_alloc_rstmask2 =
    {7'h0, _wgram_alloc_clear_act_T & ~io_alloc_result_bits_accept} << _GEN;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/wg_buffer.scala:57:28, :154:{52,55}, :164:79, :171:82
  wire [7:0]   wgram_alloc_setmask =
    {7'h0, wgram1_rd_act} << _wgram1_rd_next_inst_io_out_bits;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/utils.scala:45:22, ventus/src/cta/wg_buffer.scala:57:28, :172:73
  `ifndef SYNTHESIS	// ventus/src/cta/wg_buffer.scala:143:13
    always @(posedge clock) begin	// ventus/src/cta/wg_buffer.scala:143:13
      if (wgram_rd2_clear_act_r1 & ~reset
          & wgram2_rd_data_wg_id != alloc_result_wgid) begin	// ventus/src/cta/wg_buffer.scala:133:33, :140:38, :141:41, :143:{13,35}
        if (`ASSERT_VERBOSE_COND_)	// ventus/src/cta/wg_buffer.scala:143:13
          $error("Assertion failed\n    at wg_buffer.scala:143 assert(wgram2_rd_data.wg_id === alloc_result_wgid)\n");	// ventus/src/cta/wg_buffer.scala:143:13
        if (`STOP_COND_)	// ventus/src/cta/wg_buffer.scala:143:13
          $fatal;	// ventus/src/cta/wg_buffer.scala:143:13
      end
      if (~reset & (|(wgram_valid_setmask & wgram_valid_rstmask))) begin	// ventus/src/cta/wg_buffer.scala:143:13, :163:72, :164:79, :167:{9,31,54}
        if (`ASSERT_VERBOSE_COND_)	// ventus/src/cta/wg_buffer.scala:167:9
          $error("Assertion failed\n    at wg_buffer.scala:167 assert((wgram_valid_setmask & wgram_valid_rstmask).orR === false.B) // mutually exclusivity check\n");	// ventus/src/cta/wg_buffer.scala:167:9
        if (`STOP_COND_)	// ventus/src/cta/wg_buffer.scala:167:9
          $fatal;	// ventus/src/cta/wg_buffer.scala:167:9
      end
      if (~reset
          & (|(wgram_valid_setmask & wgram_alloc_rstmask2 & wgram_alloc_setmask))) begin	// ventus/src/cta/wg_buffer.scala:143:13, :163:72, :171:82, :172:73, :175:{9,55,78}
        if (`ASSERT_VERBOSE_COND_)	// ventus/src/cta/wg_buffer.scala:175:9
          $error("Assertion failed\n    at wg_buffer.scala:175 assert((wgram_alloc_rstmask1 & wgram_alloc_rstmask2 & wgram_alloc_setmask).orR === false.B) // mutually exclusivity check\n");	// ventus/src/cta/wg_buffer.scala:175:9
        if (`STOP_COND_)	// ventus/src/cta/wg_buffer.scala:175:9
          $fatal;	// ventus/src/cta/wg_buffer.scala:175:9
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin	// ventus/src/cta/wg_buffer.scala:35:7
    if (reset) begin	// ventus/src/cta/wg_buffer.scala:35:7
      wgram_valid <= 8'h0;	// ventus/src/cta/wg_buffer.scala:57:28, :167:54
      wgram_alloc <= 8'h0;	// ventus/src/cta/wg_buffer.scala:58:28, :167:54
      alloc_wg_new_valid_r <= 1'h0;	// ventus/src/cta/wg_buffer.scala:35:7, :100:37
      cuinterface_new_wg_valid_r <= 1'h0;	// ventus/src/cta/wg_buffer.scala:35:7, :128:43
      wgram_rd2_clear_act_r1 <= 1'h0;	// ventus/src/cta/wg_buffer.scala:35:7, :141:41
    end
    else begin	// ventus/src/cta/wg_buffer.scala:35:7
      wgram_valid <= wgram_valid & ~wgram_valid_rstmask | wgram_valid_setmask;	// ventus/src/cta/wg_buffer.scala:57:28, :163:72, :164:79, :168:{30,32,53}
      wgram_alloc <=
        wgram_alloc & ~wgram_valid_setmask & ~wgram_alloc_rstmask2 | wgram_alloc_setmask;	// ventus/src/cta/wg_buffer.scala:58:28, :163:72, :171:82, :172:73, :176:{32,54,56,78}
      alloc_wg_new_valid_r <=
        wgram1_rd_act | ~io_alloc_wg_new_ready & alloc_wg_new_valid_r;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/cta/wg_buffer.scala:100:37, :102:30, :103:30
      cuinterface_new_wg_valid_r <=
        wgram_rd2_clear_act | ~io_cuinterface_wg_new_ready & cuinterface_new_wg_valid_r;	// ventus/src/cta/wg_buffer.scala:128:43, :130:36, :131:36, :151:80
      wgram_rd2_clear_act_r1 <= wgram_rd2_clear_act;	// ventus/src/cta/wg_buffer.scala:141:41, :151:80
    end
    if (wgram1_rd_act) begin	// src/main/scala/chisel3/util/Decoupled.scala:51:35
      wgram1_rd_data_r_num_wf <= _wgram1_ext_R0_data[3:0];	// ventus/src/cta/wg_buffer.scala:55:19, :111:30
      wgram1_rd_data_r_num_sgpr <= _wgram1_ext_R0_data[15:4];	// ventus/src/cta/wg_buffer.scala:55:19, :111:30
      wgram1_rd_data_r_num_vgpr <= _wgram1_ext_R0_data[27:16];	// ventus/src/cta/wg_buffer.scala:55:19, :111:30
      wgram1_rd_data_r_num_lds <= _wgram1_ext_R0_data[45:28];	// ventus/src/cta/wg_buffer.scala:55:19, :111:30
      wgram1_rd_data_r_wg_id <= _wgram1_ext_R0_data[77:46];	// ventus/src/cta/wg_buffer.scala:55:19, :111:30
      wgram1_rd_data_addr <= _wgram1_rd_next_inst_io_out_bits;	// ventus/src/cta/utils.scala:45:22, ventus/src/cta/wg_buffer.scala:112:38
    end
    if (wgram_rd2_clear_act) begin	// ventus/src/cta/wg_buffer.scala:151:80
      wgram2_rd_data_num_thread_per_wf <= _wgram2_ext_R0_data[5:0];	// ventus/src/cta/wg_buffer.scala:56:19, :133:33
      wgram2_rd_data_gds_base <= _wgram2_ext_R0_data[37:6];	// ventus/src/cta/wg_buffer.scala:56:19, :133:33
      wgram2_rd_data_pds_base <= _wgram2_ext_R0_data[69:38];	// ventus/src/cta/wg_buffer.scala:56:19, :133:33
      wgram2_rd_data_start_pc <= _wgram2_ext_R0_data[101:70];	// ventus/src/cta/wg_buffer.scala:56:19, :133:33
      wgram2_rd_data_csr_kernel <= _wgram2_ext_R0_data[133:102];	// ventus/src/cta/wg_buffer.scala:56:19, :133:33
      wgram2_rd_data_num_wg_x <= _wgram2_ext_R0_data[144:134];	// ventus/src/cta/wg_buffer.scala:56:19, :133:33
      wgram2_rd_data_num_wg_y <= _wgram2_ext_R0_data[155:145];	// ventus/src/cta/wg_buffer.scala:56:19, :133:33
      wgram2_rd_data_num_wg_z <= _wgram2_ext_R0_data[166:156];	// ventus/src/cta/wg_buffer.scala:56:19, :133:33
      wgram2_rd_data_num_sgpr_per_wf <= _wgram2_ext_R0_data[178:167];	// ventus/src/cta/wg_buffer.scala:56:19, :133:33
      wgram2_rd_data_num_vgpr_per_wf <= _wgram2_ext_R0_data[190:179];	// ventus/src/cta/wg_buffer.scala:56:19, :133:33
      wgram2_rd_data_num_pds_per_wf <= _wgram2_ext_R0_data[208:191];	// ventus/src/cta/wg_buffer.scala:56:19, :133:33
      wgram2_rd_data_useless <= _wgram2_ext_R0_data[209];	// ventus/src/cta/wg_buffer.scala:56:19, :133:33
      wgram2_rd_data_wg_id <= _wgram2_ext_R0_data[241:210];	// ventus/src/cta/wg_buffer.scala:56:19, :133:33
      alloc_result_wgid <= io_alloc_result_bits_wg_id;	// ventus/src/cta/wg_buffer.scala:140:38
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// ventus/src/cta/wg_buffer.scala:35:7
    `ifdef FIRRTL_BEFORE_INITIAL	// ventus/src/cta/wg_buffer.scala:35:7
      `FIRRTL_BEFORE_INITIAL	// ventus/src/cta/wg_buffer.scala:35:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// ventus/src/cta/wg_buffer.scala:35:7
      automatic logic [31:0] _RANDOM[0:11];	// ventus/src/cta/wg_buffer.scala:35:7
      `ifdef INIT_RANDOM_PROLOG_	// ventus/src/cta/wg_buffer.scala:35:7
        `INIT_RANDOM_PROLOG_	// ventus/src/cta/wg_buffer.scala:35:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// ventus/src/cta/wg_buffer.scala:35:7
        for (logic [3:0] i = 4'h0; i < 4'hC; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;	// ventus/src/cta/wg_buffer.scala:35:7
        end	// ventus/src/cta/wg_buffer.scala:35:7
        wgram_valid = _RANDOM[4'h0][7:0];	// ventus/src/cta/wg_buffer.scala:35:7, :57:28
        wgram_alloc = _RANDOM[4'h0][15:8];	// ventus/src/cta/wg_buffer.scala:35:7, :57:28, :58:28
        alloc_wg_new_valid_r = _RANDOM[4'h0][16];	// ventus/src/cta/wg_buffer.scala:35:7, :57:28, :100:37
        wgram1_rd_data_r_num_wf = _RANDOM[4'h0][20:17];	// ventus/src/cta/wg_buffer.scala:35:7, :57:28, :111:30
        wgram1_rd_data_r_num_sgpr = {_RANDOM[4'h0][31:21], _RANDOM[4'h1][0]};	// ventus/src/cta/wg_buffer.scala:35:7, :57:28, :111:30
        wgram1_rd_data_r_num_vgpr = _RANDOM[4'h1][12:1];	// ventus/src/cta/wg_buffer.scala:35:7, :111:30
        wgram1_rd_data_r_num_lds = _RANDOM[4'h1][30:13];	// ventus/src/cta/wg_buffer.scala:35:7, :111:30
        wgram1_rd_data_r_wg_id = {_RANDOM[4'h1][31], _RANDOM[4'h2][30:0]};	// ventus/src/cta/wg_buffer.scala:35:7, :111:30
        wgram1_rd_data_addr = {_RANDOM[4'h2][31], _RANDOM[4'h3][1:0]};	// ventus/src/cta/wg_buffer.scala:35:7, :111:30, :112:38
        cuinterface_new_wg_valid_r = _RANDOM[4'h3][2];	// ventus/src/cta/wg_buffer.scala:35:7, :112:38, :128:43
        wgram2_rd_data_num_thread_per_wf = _RANDOM[4'h3][8:3];	// ventus/src/cta/wg_buffer.scala:35:7, :112:38, :133:33
        wgram2_rd_data_gds_base = {_RANDOM[4'h3][31:9], _RANDOM[4'h4][8:0]};	// ventus/src/cta/wg_buffer.scala:35:7, :112:38, :133:33
        wgram2_rd_data_pds_base = {_RANDOM[4'h4][31:9], _RANDOM[4'h5][8:0]};	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
        wgram2_rd_data_start_pc = {_RANDOM[4'h5][31:9], _RANDOM[4'h6][8:0]};	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
        wgram2_rd_data_csr_kernel = {_RANDOM[4'h6][31:9], _RANDOM[4'h7][8:0]};	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
        wgram2_rd_data_num_wg_x = _RANDOM[4'h7][19:9];	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
        wgram2_rd_data_num_wg_y = _RANDOM[4'h7][30:20];	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
        wgram2_rd_data_num_wg_z = {_RANDOM[4'h7][31], _RANDOM[4'h8][9:0]};	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
        wgram2_rd_data_num_sgpr_per_wf = _RANDOM[4'h8][21:10];	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
        wgram2_rd_data_num_vgpr_per_wf = {_RANDOM[4'h8][31:22], _RANDOM[4'h9][1:0]};	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
        wgram2_rd_data_num_pds_per_wf = _RANDOM[4'h9][19:2];	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
        wgram2_rd_data_useless = _RANDOM[4'h9][20];	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
        wgram2_rd_data_wg_id = {_RANDOM[4'h9][31:21], _RANDOM[4'hA][20:0]};	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
        alloc_result_wgid = {_RANDOM[4'hA][31:21], _RANDOM[4'hB][20:0]};	// ventus/src/cta/wg_buffer.scala:35:7, :133:33, :140:38
        wgram_rd2_clear_act_r1 = _RANDOM[4'hB][21];	// ventus/src/cta/wg_buffer.scala:35:7, :140:38, :141:41
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// ventus/src/cta/wg_buffer.scala:35:7
      `FIRRTL_AFTER_INITIAL	// ventus/src/cta/wg_buffer.scala:35:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  wgram1_8x78 wgram1_ext (	// ventus/src/cta/wg_buffer.scala:55:19
    .R0_addr (_wgram1_rd_next_inst_io_out_bits),	// ventus/src/cta/utils.scala:45:22
    .R0_en   (1'h1),	// ventus/src/cta/wg_buffer.scala:35:7
    .R0_clk  (clock),
    .R0_data (_wgram1_ext_R0_data),
    .W0_addr (_wgram_wr_next_inst_io_out_bits),	// ventus/src/cta/utils.scala:45:22
    .W0_en   (wgram_wr_act),	// src/main/scala/chisel3/util/Decoupled.scala:51:35
    .W0_clk  (clock),
    .W0_data
      ({io_host_wg_new_bits_wg_id,
        io_host_wg_new_bits_num_lds,
        io_host_wg_new_bits_num_vgpr,
        io_host_wg_new_bits_num_sgpr,
        io_host_wg_new_bits_num_wf})	// ventus/src/cta/wg_buffer.scala:55:19
  );
  wgram2_8x242 wgram2_ext (	// ventus/src/cta/wg_buffer.scala:56:19
    .R0_addr (io_alloc_result_bits_wgram_addr),
    .R0_en   (1'h1),	// ventus/src/cta/wg_buffer.scala:35:7
    .R0_clk  (clock),
    .R0_data (_wgram2_ext_R0_data),
    .W0_addr (_wgram_wr_next_inst_io_out_bits),	// ventus/src/cta/utils.scala:45:22
    .W0_en   (wgram_wr_act),	// src/main/scala/chisel3/util/Decoupled.scala:51:35
    .W0_clk  (clock),
    .W0_data
      ({wgram2_wr_data_wg_id,
        wgram2_wr_data_useless,
        wgram2_wr_data_num_pds_per_wf,
        wgram2_wr_data_num_vgpr_per_wf,
        wgram2_wr_data_num_sgpr_per_wf,
        wgram2_wr_data_num_wg_z,
        wgram2_wr_data_num_wg_y,
        wgram2_wr_data_num_wg_x,
        wgram2_wr_data_csr_kernel,
        wgram2_wr_data_start_pc,
        wgram2_wr_data_pds_base,
        wgram2_wr_data_gds_base,
        wgram2_wr_data_num_thread_per_wf})	// ventus/src/cta/wg_buffer.scala:56:19, :61:28
  );
  RRPriorityEncoder wgram_wr_next_inst (	// ventus/src/cta/utils.scala:45:22
    .clock        (clock),
    .reset        (reset),
    .io_in_0      (_wgram_wr_next_T[0]),	// ventus/src/cta/utils.scala:46:30, ventus/src/cta/wg_buffer.scala:72:41
    .io_in_1      (_wgram_wr_next_T[1]),	// ventus/src/cta/utils.scala:46:30, ventus/src/cta/wg_buffer.scala:72:41
    .io_in_2      (_wgram_wr_next_T[2]),	// ventus/src/cta/utils.scala:46:30, ventus/src/cta/wg_buffer.scala:72:41
    .io_in_3      (_wgram_wr_next_T[3]),	// ventus/src/cta/utils.scala:46:30, ventus/src/cta/wg_buffer.scala:72:41
    .io_in_4      (_wgram_wr_next_T[4]),	// ventus/src/cta/utils.scala:46:30, ventus/src/cta/wg_buffer.scala:72:41
    .io_in_5      (_wgram_wr_next_T[5]),	// ventus/src/cta/utils.scala:46:30, ventus/src/cta/wg_buffer.scala:72:41
    .io_in_6      (_wgram_wr_next_T[6]),	// ventus/src/cta/utils.scala:46:30, ventus/src/cta/wg_buffer.scala:72:41
    .io_in_7      (_wgram_wr_next_T[7]),	// ventus/src/cta/utils.scala:46:30, ventus/src/cta/wg_buffer.scala:72:41
    .io_out_ready (io_host_wg_new_valid),
    .io_out_valid (_wgram_wr_next_inst_io_out_valid),
    .io_out_bits  (_wgram_wr_next_inst_io_out_bits)
  );
  RRPriorityEncoder wgram1_rd_next_inst (	// ventus/src/cta/utils.scala:45:22
    .clock        (clock),
    .reset        (reset),
    .io_in_0      (wgram_valid[0] & _wgram1_rd_next_T[0]),	// ventus/src/cta/utils.scala:46:30, ventus/src/cta/wg_buffer.scala:57:28, :73:{54,56}
    .io_in_1      (wgram_valid[1] & _wgram1_rd_next_T[1]),	// ventus/src/cta/utils.scala:46:30, ventus/src/cta/wg_buffer.scala:57:28, :73:{54,56}
    .io_in_2      (wgram_valid[2] & _wgram1_rd_next_T[2]),	// ventus/src/cta/utils.scala:46:30, ventus/src/cta/wg_buffer.scala:57:28, :73:{54,56}
    .io_in_3      (wgram_valid[3] & _wgram1_rd_next_T[3]),	// ventus/src/cta/utils.scala:46:30, ventus/src/cta/wg_buffer.scala:57:28, :73:{54,56}
    .io_in_4      (wgram_valid[4] & _wgram1_rd_next_T[4]),	// ventus/src/cta/utils.scala:46:30, ventus/src/cta/wg_buffer.scala:57:28, :73:{54,56}
    .io_in_5      (wgram_valid[5] & _wgram1_rd_next_T[5]),	// ventus/src/cta/utils.scala:46:30, ventus/src/cta/wg_buffer.scala:57:28, :73:{54,56}
    .io_in_6      (wgram_valid[6] & _wgram1_rd_next_T[6]),	// ventus/src/cta/utils.scala:46:30, ventus/src/cta/wg_buffer.scala:57:28, :73:{54,56}
    .io_in_7      (wgram_valid[7] & _wgram1_rd_next_T[7]),	// ventus/src/cta/utils.scala:46:30, ventus/src/cta/wg_buffer.scala:57:28, :73:{54,56}
    .io_out_ready (_inst_io_out_ready_T_1),	// ventus/src/cta/wg_buffer.scala:107:50
    .io_out_valid (_wgram1_rd_next_inst_io_out_valid),
    .io_out_bits  (_wgram1_rd_next_inst_io_out_bits)
  );
  assign io_host_wg_new_ready = _wgram_wr_next_inst_io_out_valid;	// ventus/src/cta/utils.scala:45:22, ventus/src/cta/wg_buffer.scala:35:7
  assign io_alloc_wg_new_valid = alloc_wg_new_valid_r;	// ventus/src/cta/wg_buffer.scala:35:7, :100:37
  assign io_alloc_wg_new_bits_num_wf = wgram1_rd_data_r_num_wf;	// ventus/src/cta/wg_buffer.scala:35:7, :111:30
  assign io_alloc_wg_new_bits_num_sgpr = wgram1_rd_data_r_num_sgpr;	// ventus/src/cta/wg_buffer.scala:35:7, :111:30
  assign io_alloc_wg_new_bits_num_vgpr = wgram1_rd_data_r_num_vgpr;	// ventus/src/cta/wg_buffer.scala:35:7, :111:30
  assign io_alloc_wg_new_bits_num_lds = wgram1_rd_data_r_num_lds;	// ventus/src/cta/wg_buffer.scala:35:7, :111:30
  assign io_alloc_wg_new_bits_wg_id = wgram1_rd_data_r_wg_id;	// ventus/src/cta/wg_buffer.scala:35:7, :111:30
  assign io_alloc_wg_new_bits_wgram_addr = wgram1_rd_data_addr;	// ventus/src/cta/wg_buffer.scala:35:7, :112:38
  assign io_alloc_result_ready = io_alloc_result_ready_0;	// ventus/src/cta/wg_buffer.scala:35:7, :157:31
  assign io_cuinterface_wg_new_valid = cuinterface_new_wg_valid_r;	// ventus/src/cta/wg_buffer.scala:35:7, :128:43
  assign io_cuinterface_wg_new_bits_num_thread_per_wf = wgram2_rd_data_num_thread_per_wf;	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
  assign io_cuinterface_wg_new_bits_gds_base = wgram2_rd_data_gds_base;	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
  assign io_cuinterface_wg_new_bits_pds_base = wgram2_rd_data_pds_base;	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
  assign io_cuinterface_wg_new_bits_start_pc = wgram2_rd_data_start_pc;	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
  assign io_cuinterface_wg_new_bits_csr_kernel = wgram2_rd_data_csr_kernel;	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
  assign io_cuinterface_wg_new_bits_num_wg_x = wgram2_rd_data_num_wg_x;	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
  assign io_cuinterface_wg_new_bits_num_wg_y = wgram2_rd_data_num_wg_y;	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
  assign io_cuinterface_wg_new_bits_num_wg_z = wgram2_rd_data_num_wg_z;	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
  assign io_cuinterface_wg_new_bits_num_sgpr_per_wf = wgram2_rd_data_num_sgpr_per_wf;	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
  assign io_cuinterface_wg_new_bits_num_vgpr_per_wf = wgram2_rd_data_num_vgpr_per_wf;	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
  assign io_cuinterface_wg_new_bits_num_pds_per_wf = wgram2_rd_data_num_pds_per_wf;	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
  assign io_cuinterface_wg_new_bits_wg_id = wgram2_rd_data_wg_id;	// ventus/src/cta/wg_buffer.scala:35:7, :133:33
endmodule

