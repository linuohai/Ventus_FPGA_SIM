// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module CTAinterface(	// ventus/src/top/GPGPU_top.scala:53:7
  input         clock,	// ventus/src/top/GPGPU_top.scala:53:7
                reset,	// ventus/src/top/GPGPU_top.scala:53:7
  output        io_host2CTA_ready,	// ventus/src/top/GPGPU_top.scala:54:12
  input         io_host2CTA_valid,	// ventus/src/top/GPGPU_top.scala:54:12
  input  [31:0] io_host2CTA_bits_host_wg_id,	// ventus/src/top/GPGPU_top.scala:54:12
  input  [3:0]  io_host2CTA_bits_host_num_wf,	// ventus/src/top/GPGPU_top.scala:54:12
  input  [5:0]  io_host2CTA_bits_host_wf_size,	// ventus/src/top/GPGPU_top.scala:54:12
  input  [31:0] io_host2CTA_bits_host_start_pc,	// ventus/src/top/GPGPU_top.scala:54:12
  input  [10:0] io_host2CTA_bits_host_kernel_size_3d_0,	// ventus/src/top/GPGPU_top.scala:54:12
                io_host2CTA_bits_host_kernel_size_3d_1,	// ventus/src/top/GPGPU_top.scala:54:12
                io_host2CTA_bits_host_kernel_size_3d_2,	// ventus/src/top/GPGPU_top.scala:54:12
  input  [31:0] io_host2CTA_bits_host_csr_knl,	// ventus/src/top/GPGPU_top.scala:54:12
  input  [11:0] io_host2CTA_bits_host_vgpr_size_total,	// ventus/src/top/GPGPU_top.scala:54:12
                io_host2CTA_bits_host_sgpr_size_total,	// ventus/src/top/GPGPU_top.scala:54:12
  input  [17:0] io_host2CTA_bits_host_lds_size_total,	// ventus/src/top/GPGPU_top.scala:54:12
  input  [11:0] io_host2CTA_bits_host_vgpr_size_per_wf,	// ventus/src/top/GPGPU_top.scala:54:12
                io_host2CTA_bits_host_sgpr_size_per_wf,	// ventus/src/top/GPGPU_top.scala:54:12
  input  [17:0] io_host2CTA_bits_host_pds_size_per_wf,	// ventus/src/top/GPGPU_top.scala:54:12
  input  [31:0] io_host2CTA_bits_host_pds_baseaddr,	// ventus/src/top/GPGPU_top.scala:54:12
                io_host2CTA_bits_host_gds_baseaddr,	// ventus/src/top/GPGPU_top.scala:54:12
  input         io_CTA2host_ready,	// ventus/src/top/GPGPU_top.scala:54:12
  output        io_CTA2host_valid,	// ventus/src/top/GPGPU_top.scala:54:12
  output [31:0] io_CTA2host_bits_inflight_wg_buffer_host_wf_done_wg_id,	// ventus/src/top/GPGPU_top.scala:54:12
  input         io_CTA2warp_0_ready,	// ventus/src/top/GPGPU_top.scala:54:12
  output        io_CTA2warp_0_valid,	// ventus/src/top/GPGPU_top.scala:54:12
  output [3:0]  io_CTA2warp_0_bits_dispatch2cu_wg_wf_count,	// ventus/src/top/GPGPU_top.scala:54:12
  output [5:0]  io_CTA2warp_0_bits_dispatch2cu_wf_size_dispatch,	// ventus/src/top/GPGPU_top.scala:54:12
  output [11:0] io_CTA2warp_0_bits_dispatch2cu_sgpr_base_dispatch,	// ventus/src/top/GPGPU_top.scala:54:12
                io_CTA2warp_0_bits_dispatch2cu_vgpr_base_dispatch,	// ventus/src/top/GPGPU_top.scala:54:12
  output [17:0] io_CTA2warp_0_bits_dispatch2cu_lds_base_dispatch,	// ventus/src/top/GPGPU_top.scala:54:12
  output [5:0]  io_CTA2warp_0_bits_dispatch2cu_wf_tag_dispatch,	// ventus/src/top/GPGPU_top.scala:54:12
  output [31:0] io_CTA2warp_0_bits_dispatch2cu_start_pc_dispatch,	// ventus/src/top/GPGPU_top.scala:54:12
                io_CTA2warp_0_bits_dispatch2cu_pds_base_dispatch,	// ventus/src/top/GPGPU_top.scala:54:12
                io_CTA2warp_0_bits_dispatch2cu_csr_knl_dispatch,	// ventus/src/top/GPGPU_top.scala:54:12
  output [10:0] io_CTA2warp_0_bits_dispatch2cu_wgid_x_dispatch,	// ventus/src/top/GPGPU_top.scala:54:12
                io_CTA2warp_0_bits_dispatch2cu_wgid_y_dispatch,	// ventus/src/top/GPGPU_top.scala:54:12
                io_CTA2warp_0_bits_dispatch2cu_wgid_z_dispatch,	// ventus/src/top/GPGPU_top.scala:54:12
  output [31:0] io_CTA2warp_0_bits_dispatch2cu_wg_id,	// ventus/src/top/GPGPU_top.scala:54:12
  output        io_warp2CTA_0_ready,	// ventus/src/top/GPGPU_top.scala:54:12
  input         io_warp2CTA_0_valid,	// ventus/src/top/GPGPU_top.scala:54:12
  input  [5:0]  io_warp2CTA_0_bits_cu2dispatch_wf_tag_done	// ventus/src/top/GPGPU_top.scala:54:12
);

  wire [10:0] _cta_sche_io_cu_wf_new_0_bits_sgpr_base;	// ventus/src/top/GPGPU_top.scala:60:24
  wire [10:0] _cta_sche_io_cu_wf_new_0_bits_vgpr_base;	// ventus/src/top/GPGPU_top.scala:60:24
  wire [16:0] _cta_sche_io_cu_wf_new_0_bits_lds_base;	// ventus/src/top/GPGPU_top.scala:60:24
  cta_scheduler_top cta_sche (	// ventus/src/top/GPGPU_top.scala:60:24
    .clock                                 (clock),
    .reset                                 (reset),
    .io_host_wg_new_ready                  (io_host2CTA_ready),
    .io_host_wg_new_valid                  (io_host2CTA_valid),
    .io_host_wg_new_bits_num_wf            (io_host2CTA_bits_host_num_wf),
    .io_host_wg_new_bits_num_sgpr          (io_host2CTA_bits_host_sgpr_size_total),
    .io_host_wg_new_bits_num_vgpr          (io_host2CTA_bits_host_vgpr_size_total),
    .io_host_wg_new_bits_num_lds           (io_host2CTA_bits_host_lds_size_total),
    .io_host_wg_new_bits_num_sgpr_per_wf   (io_host2CTA_bits_host_sgpr_size_per_wf),
    .io_host_wg_new_bits_num_vgpr_per_wf   (io_host2CTA_bits_host_vgpr_size_per_wf),
    .io_host_wg_new_bits_num_pds_per_wf    (io_host2CTA_bits_host_pds_size_per_wf),
    .io_host_wg_new_bits_num_thread_per_wf (io_host2CTA_bits_host_wf_size),
    .io_host_wg_new_bits_gds_base          (io_host2CTA_bits_host_gds_baseaddr),
    .io_host_wg_new_bits_pds_base          (io_host2CTA_bits_host_pds_baseaddr),
    .io_host_wg_new_bits_start_pc          (io_host2CTA_bits_host_start_pc),
    .io_host_wg_new_bits_csr_kernel        (io_host2CTA_bits_host_csr_knl),
    .io_host_wg_new_bits_num_wg_x          (io_host2CTA_bits_host_kernel_size_3d_0),
    .io_host_wg_new_bits_num_wg_y          (io_host2CTA_bits_host_kernel_size_3d_1),
    .io_host_wg_new_bits_num_wg_z          (io_host2CTA_bits_host_kernel_size_3d_2),
    .io_host_wg_new_bits_wg_id             (io_host2CTA_bits_host_wg_id),
    .io_host_wg_done_ready                 (io_CTA2host_ready),
    .io_host_wg_done_valid                 (io_CTA2host_valid),
    .io_host_wg_done_bits_wg_id
      (io_CTA2host_bits_inflight_wg_buffer_host_wf_done_wg_id),
    .io_cu_wf_done_0_ready                 (io_warp2CTA_0_ready),
    .io_cu_wf_done_0_valid                 (io_warp2CTA_0_valid),
    .io_cu_wf_done_0_bits_wf_tag           (io_warp2CTA_0_bits_cu2dispatch_wf_tag_done),
    .io_cu_wf_new_0_ready                  (io_CTA2warp_0_ready),
    .io_cu_wf_new_0_valid                  (io_CTA2warp_0_valid),
    .io_cu_wf_new_0_bits_num_thread_per_wf
      (io_CTA2warp_0_bits_dispatch2cu_wf_size_dispatch),
    .io_cu_wf_new_0_bits_pds_base
      (io_CTA2warp_0_bits_dispatch2cu_pds_base_dispatch),
    .io_cu_wf_new_0_bits_start_pc
      (io_CTA2warp_0_bits_dispatch2cu_start_pc_dispatch),
    .io_cu_wf_new_0_bits_csr_kernel
      (io_CTA2warp_0_bits_dispatch2cu_csr_knl_dispatch),
    .io_cu_wf_new_0_bits_num_wg_x
      (io_CTA2warp_0_bits_dispatch2cu_wgid_x_dispatch),
    .io_cu_wf_new_0_bits_num_wg_y
      (io_CTA2warp_0_bits_dispatch2cu_wgid_y_dispatch),
    .io_cu_wf_new_0_bits_num_wg_z
      (io_CTA2warp_0_bits_dispatch2cu_wgid_z_dispatch),
    .io_cu_wf_new_0_bits_sgpr_base         (_cta_sche_io_cu_wf_new_0_bits_sgpr_base),
    .io_cu_wf_new_0_bits_vgpr_base         (_cta_sche_io_cu_wf_new_0_bits_vgpr_base),
    .io_cu_wf_new_0_bits_lds_base          (_cta_sche_io_cu_wf_new_0_bits_lds_base),
    .io_cu_wf_new_0_bits_wg_id             (io_CTA2warp_0_bits_dispatch2cu_wg_id),
    .io_cu_wf_new_0_bits_wf_tag
      (io_CTA2warp_0_bits_dispatch2cu_wf_tag_dispatch),
    .io_cu_wf_new_0_bits_num_wf            (io_CTA2warp_0_bits_dispatch2cu_wg_wf_count)
  );
  assign io_CTA2warp_0_bits_dispatch2cu_sgpr_base_dispatch =
    {1'h0, _cta_sche_io_cu_wf_new_0_bits_sgpr_base};	// ventus/src/top/GPGPU_top.scala:53:7, :60:24, :91:56, :92:56
  assign io_CTA2warp_0_bits_dispatch2cu_vgpr_base_dispatch =
    {1'h0, _cta_sche_io_cu_wf_new_0_bits_vgpr_base};	// ventus/src/top/GPGPU_top.scala:53:7, :60:24, :91:56, :93:56
  assign io_CTA2warp_0_bits_dispatch2cu_lds_base_dispatch =
    {1'h0, _cta_sche_io_cu_wf_new_0_bits_lds_base};	// ventus/src/top/GPGPU_top.scala:53:7, :60:24, :91:56
endmodule

