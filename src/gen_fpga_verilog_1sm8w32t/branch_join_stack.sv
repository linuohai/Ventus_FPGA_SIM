// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module branch_join_stack(	// ventus/src/pipeline/branch_join.scala:24:7
  input         clock,	// ventus/src/pipeline/branch_join.scala:24:7
                reset,	// ventus/src/pipeline/branch_join.scala:24:7
                io_push,	// ventus/src/pipeline/branch_join.scala:25:14
                io_pop,	// ventus/src/pipeline/branch_join.scala:25:14
  input  [31:0] io_pushData_reconPC,	// ventus/src/pipeline/branch_join.scala:25:14
                io_pushData_jumpPC,	// ventus/src/pipeline/branch_join.scala:25:14
                io_pushData_newMask,	// ventus/src/pipeline/branch_join.scala:25:14
                io_threadMask,	// ventus/src/pipeline/branch_join.scala:25:14
                io_PCexecute,	// ventus/src/pipeline/branch_join.scala:25:14
  output        io_jump,	// ventus/src/pipeline/branch_join.scala:25:14
  output [31:0] io_newPC,	// ventus/src/pipeline/branch_join.scala:25:14
                io_newMask	// ventus/src/pipeline/branch_join.scala:25:14
);

  wire [95:0] _stack_mem_ext_R0_data;	// ventus/src/pipeline/branch_join.scala:38:22
  wire [95:0] _stack_mem_ext_R1_data;	// ventus/src/pipeline/branch_join.scala:38:22
  wire [95:0] _stack_mem_ext_R2_data;	// ventus/src/pipeline/branch_join.scala:38:22
  reg  [5:0]  rd_ptr;	// ventus/src/pipeline/branch_join.scala:35:24
  reg  [5:0]  wr_ptr;	// ventus/src/pipeline/branch_join.scala:36:24
  wire [95:0] _GEN = {64'h0, io_pushData_reconPC};	// ventus/src/pipeline/branch_join.scala:38:22
  wire        io_jump_0 =
    _stack_mem_ext_R0_data[31:0] == io_PCexecute & (|wr_ptr) & io_pop;	// ventus/src/pipeline/branch_join.scala:36:24, :38:22, :42:42, :43:30, :45:21
  wire [5:0]  _rd_ptr_T = wr_ptr + 6'h1;	// ventus/src/pipeline/branch_join.scala:36:24, :47:25
  always @(posedge clock) begin	// ventus/src/pipeline/branch_join.scala:24:7
    if (reset) begin	// ventus/src/pipeline/branch_join.scala:24:7
      rd_ptr <= 6'h0;	// ventus/src/pipeline/branch_join.scala:35:24
      wr_ptr <= 6'h0;	// ventus/src/pipeline/branch_join.scala:35:24, :36:24
    end
    else if (io_push) begin	// ventus/src/pipeline/branch_join.scala:25:14
      rd_ptr <= _rd_ptr_T;	// ventus/src/pipeline/branch_join.scala:35:24, :47:25
      wr_ptr <= wr_ptr + 6'h2;	// ventus/src/pipeline/branch_join.scala:36:24, :50:22
    end
    else if (io_jump_0) begin	// ventus/src/pipeline/branch_join.scala:45:21
      rd_ptr <= rd_ptr - 6'h1;	// ventus/src/pipeline/branch_join.scala:35:24, :59:22
      wr_ptr <= wr_ptr - 6'h1;	// ventus/src/pipeline/branch_join.scala:36:24, :58:22
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// ventus/src/pipeline/branch_join.scala:24:7
    `ifdef FIRRTL_BEFORE_INITIAL	// ventus/src/pipeline/branch_join.scala:24:7
      `FIRRTL_BEFORE_INITIAL	// ventus/src/pipeline/branch_join.scala:24:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// ventus/src/pipeline/branch_join.scala:24:7
      automatic logic [31:0] _RANDOM[0:0];	// ventus/src/pipeline/branch_join.scala:24:7
      `ifdef INIT_RANDOM_PROLOG_	// ventus/src/pipeline/branch_join.scala:24:7
        `INIT_RANDOM_PROLOG_	// ventus/src/pipeline/branch_join.scala:24:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// ventus/src/pipeline/branch_join.scala:24:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// ventus/src/pipeline/branch_join.scala:24:7
        rd_ptr = _RANDOM[/*Zero width*/ 1'b0][5:0];	// ventus/src/pipeline/branch_join.scala:24:7, :35:24
        wr_ptr = _RANDOM[/*Zero width*/ 1'b0][11:6];	// ventus/src/pipeline/branch_join.scala:24:7, :35:24, :36:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// ventus/src/pipeline/branch_join.scala:24:7
      `FIRRTL_AFTER_INITIAL	// ventus/src/pipeline/branch_join.scala:24:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  stack_mem_32x96 stack_mem_ext (	// ventus/src/pipeline/branch_join.scala:38:22
    .R0_addr (rd_ptr[4:0]),	// ventus/src/pipeline/branch_join.scala:35:24, :42:25
    .R0_en   (1'h1),	// ventus/src/pipeline/branch_join.scala:24:7
    .R0_clk  (clock),
    .R0_data (_stack_mem_ext_R0_data),
    .R1_addr (rd_ptr[4:0]),	// ventus/src/pipeline/branch_join.scala:35:24, :42:25
    .R1_en   (1'h1),	// ventus/src/pipeline/branch_join.scala:24:7
    .R1_clk  (clock),
    .R1_data (_stack_mem_ext_R1_data),
    .R2_addr (rd_ptr[4:0]),	// ventus/src/pipeline/branch_join.scala:35:24, :42:25
    .R2_en   (1'h1),	// ventus/src/pipeline/branch_join.scala:24:7
    .R2_clk  (clock),
    .R2_data (_stack_mem_ext_R2_data),
    .W0_addr (wr_ptr[4:0]),	// ventus/src/pipeline/branch_join.scala:36:24, :54:14
    .W0_en   (io_push),
    .W0_clk  (clock),
    .W0_data ({io_threadMask, 64'h0}),	// ventus/src/pipeline/branch_join.scala:38:22
    .W0_mask (3'h4),	// ventus/src/pipeline/branch_join.scala:38:22
    .W1_addr (wr_ptr[4:0]),	// ventus/src/pipeline/branch_join.scala:36:24, :54:14
    .W1_en   (io_push),
    .W1_clk  (clock),
    .W1_data ({32'h0, io_pushData_reconPC, 32'h0}),	// ventus/src/pipeline/branch_join.scala:24:7, :38:22
    .W1_mask (3'h2),	// ventus/src/pipeline/branch_join.scala:38:22
    .W2_addr (wr_ptr[4:0]),	// ventus/src/pipeline/branch_join.scala:36:24, :54:14
    .W2_en   (io_push),
    .W2_clk  (clock),
    .W2_data (_GEN),	// ventus/src/pipeline/branch_join.scala:38:22
    .W2_mask (3'h1),	// ventus/src/pipeline/branch_join.scala:38:22
    .W3_addr (_rd_ptr_T[4:0]),	// ventus/src/pipeline/branch_join.scala:47:25, :51:14
    .W3_en   (io_push),
    .W3_clk  (clock),
    .W3_data ({io_pushData_newMask, 64'h0}),	// ventus/src/pipeline/branch_join.scala:38:22
    .W3_mask (3'h4),	// ventus/src/pipeline/branch_join.scala:38:22
    .W4_addr (_rd_ptr_T[4:0]),	// ventus/src/pipeline/branch_join.scala:47:25, :51:14
    .W4_en   (io_push),
    .W4_clk  (clock),
    .W4_data ({32'h0, io_pushData_jumpPC, 32'h0}),	// ventus/src/pipeline/branch_join.scala:24:7, :38:22
    .W4_mask (3'h2),	// ventus/src/pipeline/branch_join.scala:38:22
    .W5_addr (_rd_ptr_T[4:0]),	// ventus/src/pipeline/branch_join.scala:47:25, :51:14
    .W5_en   (io_push),
    .W5_clk  (clock),
    .W5_data (_GEN),	// ventus/src/pipeline/branch_join.scala:38:22
    .W5_mask (3'h1)	// ventus/src/pipeline/branch_join.scala:38:22
  );
  assign io_jump = io_jump_0;	// ventus/src/pipeline/branch_join.scala:24:7, :45:21
  assign io_newPC = _stack_mem_ext_R1_data[63:32];	// ventus/src/pipeline/branch_join.scala:24:7, :38:22
  assign io_newMask = _stack_mem_ext_R2_data[95:64];	// ventus/src/pipeline/branch_join.scala:24:7, :38:22
endmodule

