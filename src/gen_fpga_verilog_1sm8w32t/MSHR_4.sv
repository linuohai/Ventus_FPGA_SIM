// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module MSHR_4(	// ventus/src/L2cache/MSHR.scala:42:7
  input           clock,	// ventus/src/L2cache/MSHR.scala:42:7
                  reset,	// ventus/src/L2cache/MSHR.scala:42:7
                  io_allocate_valid,	// ventus/src/L2cache/MSHR.scala:43:14
  input  [2:0]    io_allocate_bits_opcode,	// ventus/src/L2cache/MSHR.scala:43:14
  input  [6:0]    io_allocate_bits_size,	// ventus/src/L2cache/MSHR.scala:43:14
  input  [18:0]   io_allocate_bits_tag,	// ventus/src/L2cache/MSHR.scala:43:14
  input  [6:0]    io_allocate_bits_offset,	// ventus/src/L2cache/MSHR.scala:43:14
  input  [1023:0] io_allocate_bits_data,	// ventus/src/L2cache/MSHR.scala:43:14
  input  [5:0]    io_allocate_bits_set,	// ventus/src/L2cache/MSHR.scala:43:14
  input  [3:0]    io_allocate_bits_way,	// ventus/src/L2cache/MSHR.scala:43:14
  input           io_allocate_bits_last_flush,	// ventus/src/L2cache/MSHR.scala:43:14
  output [2:0]    io_status_opcode,	// ventus/src/L2cache/MSHR.scala:43:14
  output [18:0]   io_status_tag,	// ventus/src/L2cache/MSHR.scala:43:14
  output [5:0]    io_status_set,	// ventus/src/L2cache/MSHR.scala:43:14
  input           io_valid,	// ventus/src/L2cache/MSHR.scala:43:14
                  io_mshr_wait,	// ventus/src/L2cache/MSHR.scala:43:14
                  io_mixed,	// ventus/src/L2cache/MSHR.scala:43:14
                  io_schedule_a_ready,	// ventus/src/L2cache/MSHR.scala:43:14
  output          io_schedule_a_valid,	// ventus/src/L2cache/MSHR.scala:43:14
  output [18:0]   io_schedule_a_bits_tag,	// ventus/src/L2cache/MSHR.scala:43:14
  output [6:0]    io_schedule_a_bits_offset,	// ventus/src/L2cache/MSHR.scala:43:14
  output [1023:0] io_schedule_a_bits_data,	// ventus/src/L2cache/MSHR.scala:43:14
  output [5:0]    io_schedule_a_bits_set,	// ventus/src/L2cache/MSHR.scala:43:14
  output          io_schedule_d_valid,	// ventus/src/L2cache/MSHR.scala:43:14
  output [6:0]    io_schedule_d_bits_size,	// ventus/src/L2cache/MSHR.scala:43:14
  output [18:0]   io_schedule_d_bits_tag,	// ventus/src/L2cache/MSHR.scala:43:14
  output [6:0]    io_schedule_d_bits_offset,	// ventus/src/L2cache/MSHR.scala:43:14
  output [1023:0] io_schedule_d_bits_data,	// ventus/src/L2cache/MSHR.scala:43:14
  output [5:0]    io_schedule_d_bits_set,	// ventus/src/L2cache/MSHR.scala:43:14
  output [3:0]    io_schedule_d_bits_way,	// ventus/src/L2cache/MSHR.scala:43:14
  output          io_schedule_d_bits_last_flush,	// ventus/src/L2cache/MSHR.scala:43:14
  output [1023:0] io_schedule_data,	// ventus/src/L2cache/MSHR.scala:43:14
  input           io_schedule_dir_ready,	// ventus/src/L2cache/MSHR.scala:43:14
  output          io_schedule_dir_valid,	// ventus/src/L2cache/MSHR.scala:43:14
  output [3:0]    io_schedule_dir_bits_way,	// ventus/src/L2cache/MSHR.scala:43:14
  output [18:0]   io_schedule_dir_bits_data_tag,	// ventus/src/L2cache/MSHR.scala:43:14
  output [5:0]    io_schedule_dir_bits_set,	// ventus/src/L2cache/MSHR.scala:43:14
  input           io_merge_valid,	// ventus/src/L2cache/MSHR.scala:43:14
  input  [127:0]  io_merge_bits_mask,	// ventus/src/L2cache/MSHR.scala:43:14
  input  [1023:0] io_merge_bits_data,	// ventus/src/L2cache/MSHR.scala:43:14
  input           io_sinkd_valid,	// ventus/src/L2cache/MSHR.scala:43:14
  input  [1023:0] io_sinkd_bits_data	// ventus/src/L2cache/MSHR.scala:43:14
);

  reg           mixed_reg;	// ventus/src/L2cache/MSHR.scala:55:26
  reg  [1023:0] data_reg;	// ventus/src/L2cache/MSHR.scala:56:25
  reg  [2:0]    request_opcode;	// ventus/src/L2cache/MSHR.scala:57:24
  reg  [6:0]    request_size;	// ventus/src/L2cache/MSHR.scala:57:24
  reg  [18:0]   request_tag;	// ventus/src/L2cache/MSHR.scala:57:24
  reg  [6:0]    request_offset;	// ventus/src/L2cache/MSHR.scala:57:24
  reg  [1023:0] request_data;	// ventus/src/L2cache/MSHR.scala:57:24
  reg  [5:0]    request_set;	// ventus/src/L2cache/MSHR.scala:57:24
  reg  [3:0]    request_way;	// ventus/src/L2cache/MSHR.scala:57:24
  reg           request_last_flush;	// ventus/src/L2cache/MSHR.scala:57:24
  reg           sche_a_valid;	// ventus/src/L2cache/MSHR.scala:63:29
  reg           sche_dir_valid;	// ventus/src/L2cache/MSHR.scala:64:31
  reg           sink_d_reg;	// ventus/src/L2cache/MSHR.scala:65:27
  wire          io_schedule_a_valid_0 = sche_a_valid & ~io_mshr_wait;	// ventus/src/L2cache/MSHR.scala:63:29, :97:{39,42}
  wire          io_schedule_dir_valid_0 = sche_dir_valid & request_opcode == 3'h4;	// ventus/src/L2cache/MSHR.scala:57:24, :64:31, :99:29, :134:{41,59}
  always @(posedge clock) begin	// ventus/src/L2cache/MSHR.scala:42:7
    if (reset) begin	// ventus/src/L2cache/MSHR.scala:42:7
      mixed_reg <= 1'h0;	// ventus/src/L2cache/MSHR.scala:55:26
      data_reg <= 1024'h0;	// ventus/src/L2cache/MSHR.scala:56:25
      request_opcode <= 3'h0;	// ventus/src/L2cache/MSHR.scala:43:14, :57:24
      request_size <= 7'h0;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
      request_tag <= 19'h0;	// ventus/src/L2cache/MSHR.scala:57:{24,37}
      request_offset <= 7'h0;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
      request_data <= 1024'h0;	// ventus/src/L2cache/MSHR.scala:56:25, :57:24
      request_set <= 6'h0;	// ventus/src/L2cache/MSHR.scala:57:{24,37}
      request_way <= 4'h0;	// ventus/src/L2cache/MSHR.scala:57:{24,37}
      request_last_flush <= 1'h0;	// ventus/src/L2cache/MSHR.scala:55:26, :57:24
      sche_a_valid <= 1'h0;	// ventus/src/L2cache/MSHR.scala:55:26, :63:29
      sche_dir_valid <= 1'h0;	// ventus/src/L2cache/MSHR.scala:55:26, :64:31
      sink_d_reg <= 1'h0;	// ventus/src/L2cache/MSHR.scala:55:26, :65:27
    end
    else begin	// ventus/src/L2cache/MSHR.scala:42:7
      mixed_reg <= ~io_allocate_valid & (io_mixed | mixed_reg);	// ventus/src/L2cache/MSHR.scala:55:26, :65:27, :67:27, :69:16, :128:27, :129:14, :130:23, :131:14
      if (io_allocate_valid) begin	// ventus/src/L2cache/MSHR.scala:43:14
        data_reg <= io_allocate_bits_data;	// ventus/src/L2cache/MSHR.scala:56:25
        request_opcode <= io_allocate_bits_opcode;	// ventus/src/L2cache/MSHR.scala:57:24
        request_size <= io_allocate_bits_size;	// ventus/src/L2cache/MSHR.scala:57:24
        request_tag <= io_allocate_bits_tag;	// ventus/src/L2cache/MSHR.scala:57:24
        request_offset <= io_allocate_bits_offset;	// ventus/src/L2cache/MSHR.scala:57:24
        request_data <= io_allocate_bits_data;	// ventus/src/L2cache/MSHR.scala:57:24
        request_set <= io_allocate_bits_set;	// ventus/src/L2cache/MSHR.scala:57:24
        request_way <= io_allocate_bits_way;	// ventus/src/L2cache/MSHR.scala:57:24
        request_last_flush <= io_allocate_bits_last_flush;	// ventus/src/L2cache/MSHR.scala:57:24
      end
      else if (io_merge_valid) begin	// ventus/src/L2cache/MSHR.scala:43:14
        automatic logic [1023:0] full_mask =
          {{8{io_merge_bits_mask[127]}},
           {8{io_merge_bits_mask[126]}},
           {8{io_merge_bits_mask[125]}},
           {8{io_merge_bits_mask[124]}},
           {8{io_merge_bits_mask[123]}},
           {8{io_merge_bits_mask[122]}},
           {8{io_merge_bits_mask[121]}},
           {8{io_merge_bits_mask[120]}},
           {8{io_merge_bits_mask[119]}},
           {8{io_merge_bits_mask[118]}},
           {8{io_merge_bits_mask[117]}},
           {8{io_merge_bits_mask[116]}},
           {8{io_merge_bits_mask[115]}},
           {8{io_merge_bits_mask[114]}},
           {8{io_merge_bits_mask[113]}},
           {8{io_merge_bits_mask[112]}},
           {8{io_merge_bits_mask[111]}},
           {8{io_merge_bits_mask[110]}},
           {8{io_merge_bits_mask[109]}},
           {8{io_merge_bits_mask[108]}},
           {8{io_merge_bits_mask[107]}},
           {8{io_merge_bits_mask[106]}},
           {8{io_merge_bits_mask[105]}},
           {8{io_merge_bits_mask[104]}},
           {8{io_merge_bits_mask[103]}},
           {8{io_merge_bits_mask[102]}},
           {8{io_merge_bits_mask[101]}},
           {8{io_merge_bits_mask[100]}},
           {8{io_merge_bits_mask[99]}},
           {8{io_merge_bits_mask[98]}},
           {8{io_merge_bits_mask[97]}},
           {8{io_merge_bits_mask[96]}},
           {8{io_merge_bits_mask[95]}},
           {8{io_merge_bits_mask[94]}},
           {8{io_merge_bits_mask[93]}},
           {8{io_merge_bits_mask[92]}},
           {8{io_merge_bits_mask[91]}},
           {8{io_merge_bits_mask[90]}},
           {8{io_merge_bits_mask[89]}},
           {8{io_merge_bits_mask[88]}},
           {8{io_merge_bits_mask[87]}},
           {8{io_merge_bits_mask[86]}},
           {8{io_merge_bits_mask[85]}},
           {8{io_merge_bits_mask[84]}},
           {8{io_merge_bits_mask[83]}},
           {8{io_merge_bits_mask[82]}},
           {8{io_merge_bits_mask[81]}},
           {8{io_merge_bits_mask[80]}},
           {8{io_merge_bits_mask[79]}},
           {8{io_merge_bits_mask[78]}},
           {8{io_merge_bits_mask[77]}},
           {8{io_merge_bits_mask[76]}},
           {8{io_merge_bits_mask[75]}},
           {8{io_merge_bits_mask[74]}},
           {8{io_merge_bits_mask[73]}},
           {8{io_merge_bits_mask[72]}},
           {8{io_merge_bits_mask[71]}},
           {8{io_merge_bits_mask[70]}},
           {8{io_merge_bits_mask[69]}},
           {8{io_merge_bits_mask[68]}},
           {8{io_merge_bits_mask[67]}},
           {8{io_merge_bits_mask[66]}},
           {8{io_merge_bits_mask[65]}},
           {8{io_merge_bits_mask[64]}},
           {8{io_merge_bits_mask[63]}},
           {8{io_merge_bits_mask[62]}},
           {8{io_merge_bits_mask[61]}},
           {8{io_merge_bits_mask[60]}},
           {8{io_merge_bits_mask[59]}},
           {8{io_merge_bits_mask[58]}},
           {8{io_merge_bits_mask[57]}},
           {8{io_merge_bits_mask[56]}},
           {8{io_merge_bits_mask[55]}},
           {8{io_merge_bits_mask[54]}},
           {8{io_merge_bits_mask[53]}},
           {8{io_merge_bits_mask[52]}},
           {8{io_merge_bits_mask[51]}},
           {8{io_merge_bits_mask[50]}},
           {8{io_merge_bits_mask[49]}},
           {8{io_merge_bits_mask[48]}},
           {8{io_merge_bits_mask[47]}},
           {8{io_merge_bits_mask[46]}},
           {8{io_merge_bits_mask[45]}},
           {8{io_merge_bits_mask[44]}},
           {8{io_merge_bits_mask[43]}},
           {8{io_merge_bits_mask[42]}},
           {8{io_merge_bits_mask[41]}},
           {8{io_merge_bits_mask[40]}},
           {8{io_merge_bits_mask[39]}},
           {8{io_merge_bits_mask[38]}},
           {8{io_merge_bits_mask[37]}},
           {8{io_merge_bits_mask[36]}},
           {8{io_merge_bits_mask[35]}},
           {8{io_merge_bits_mask[34]}},
           {8{io_merge_bits_mask[33]}},
           {8{io_merge_bits_mask[32]}},
           {8{io_merge_bits_mask[31]}},
           {8{io_merge_bits_mask[30]}},
           {8{io_merge_bits_mask[29]}},
           {8{io_merge_bits_mask[28]}},
           {8{io_merge_bits_mask[27]}},
           {8{io_merge_bits_mask[26]}},
           {8{io_merge_bits_mask[25]}},
           {8{io_merge_bits_mask[24]}},
           {8{io_merge_bits_mask[23]}},
           {8{io_merge_bits_mask[22]}},
           {8{io_merge_bits_mask[21]}},
           {8{io_merge_bits_mask[20]}},
           {8{io_merge_bits_mask[19]}},
           {8{io_merge_bits_mask[18]}},
           {8{io_merge_bits_mask[17]}},
           {8{io_merge_bits_mask[16]}},
           {8{io_merge_bits_mask[15]}},
           {8{io_merge_bits_mask[14]}},
           {8{io_merge_bits_mask[13]}},
           {8{io_merge_bits_mask[12]}},
           {8{io_merge_bits_mask[11]}},
           {8{io_merge_bits_mask[10]}},
           {8{io_merge_bits_mask[9]}},
           {8{io_merge_bits_mask[8]}},
           {8{io_merge_bits_mask[7]}},
           {8{io_merge_bits_mask[6]}},
           {8{io_merge_bits_mask[5]}},
           {8{io_merge_bits_mask[4]}},
           {8{io_merge_bits_mask[3]}},
           {8{io_merge_bits_mask[2]}},
           {8{io_merge_bits_mask[1]}},
           {8{io_merge_bits_mask[0]}}};	// ventus/src/L2cache/MSHR.scala:59:34
        data_reg <= io_merge_bits_data & full_mask | data_reg & ~full_mask;	// ventus/src/L2cache/MSHR.scala:56:25, :59:34, :60:{40,53,65,68}
      end
      else if (io_sinkd_valid)	// ventus/src/L2cache/MSHR.scala:43:14
        data_reg <= io_sinkd_bits_data;	// ventus/src/L2cache/MSHR.scala:56:25
      sche_a_valid <=
        ~(io_schedule_a_ready & io_schedule_a_valid_0)
        & (io_allocate_valid | sche_a_valid);	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/L2cache/MSHR.scala:63:29, :97:39, :110:28, :111:18, :112:33, :113:18, :115:18
      sche_dir_valid <=
        ~(io_allocate_valid | io_schedule_dir_ready & io_schedule_dir_valid_0 | io_mixed)
        & (io_sinkd_valid & ~(io_mixed | mixed_reg) | sche_dir_valid);	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/L2cache/MSHR.scala:55:26, :64:31, :117:26, :118:20, :119:36, :120:20, :121:23, :122:19, :123:{29,32,42,55}, :124:19, :134:41
      sink_d_reg <= io_sinkd_valid | ~io_allocate_valid & sink_d_reg;	// ventus/src/L2cache/MSHR.scala:65:27, :67:27, :69:16, :143:26, :145:16
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// ventus/src/L2cache/MSHR.scala:42:7
    `ifdef FIRRTL_BEFORE_INITIAL	// ventus/src/L2cache/MSHR.scala:42:7
      `FIRRTL_BEFORE_INITIAL	// ventus/src/L2cache/MSHR.scala:42:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// ventus/src/L2cache/MSHR.scala:42:7
      automatic logic [31:0] _RANDOM[0:72];	// ventus/src/L2cache/MSHR.scala:42:7
      `ifdef INIT_RANDOM_PROLOG_	// ventus/src/L2cache/MSHR.scala:42:7
        `INIT_RANDOM_PROLOG_	// ventus/src/L2cache/MSHR.scala:42:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// ventus/src/L2cache/MSHR.scala:42:7
        for (logic [6:0] i = 7'h0; i < 7'h49; i += 7'h1) begin
          _RANDOM[i] = `RANDOM;	// ventus/src/L2cache/MSHR.scala:42:7
        end	// ventus/src/L2cache/MSHR.scala:42:7
        mixed_reg = _RANDOM[7'h0][0];	// ventus/src/L2cache/MSHR.scala:42:7, :55:26
        data_reg =
          {_RANDOM[7'h0][31:1],
           _RANDOM[7'h1],
           _RANDOM[7'h2],
           _RANDOM[7'h3],
           _RANDOM[7'h4],
           _RANDOM[7'h5],
           _RANDOM[7'h6],
           _RANDOM[7'h7],
           _RANDOM[7'h8],
           _RANDOM[7'h9],
           _RANDOM[7'hA],
           _RANDOM[7'hB],
           _RANDOM[7'hC],
           _RANDOM[7'hD],
           _RANDOM[7'hE],
           _RANDOM[7'hF],
           _RANDOM[7'h10],
           _RANDOM[7'h11],
           _RANDOM[7'h12],
           _RANDOM[7'h13],
           _RANDOM[7'h14],
           _RANDOM[7'h15],
           _RANDOM[7'h16],
           _RANDOM[7'h17],
           _RANDOM[7'h18],
           _RANDOM[7'h19],
           _RANDOM[7'h1A],
           _RANDOM[7'h1B],
           _RANDOM[7'h1C],
           _RANDOM[7'h1D],
           _RANDOM[7'h1E],
           _RANDOM[7'h1F],
           _RANDOM[7'h20][0]};	// ventus/src/L2cache/MSHR.scala:42:7, :55:26, :56:25
        request_opcode = _RANDOM[7'h20][3:1];	// ventus/src/L2cache/MSHR.scala:42:7, :56:25, :57:24
        request_size = _RANDOM[7'h20][10:4];	// ventus/src/L2cache/MSHR.scala:42:7, :56:25, :57:24
        request_tag = {_RANDOM[7'h20][31:27], _RANDOM[7'h21][13:0]};	// ventus/src/L2cache/MSHR.scala:42:7, :56:25, :57:24
        request_offset = _RANDOM[7'h21][20:14];	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
        request_data =
          {_RANDOM[7'h21][31:26],
           _RANDOM[7'h22],
           _RANDOM[7'h23],
           _RANDOM[7'h24],
           _RANDOM[7'h25],
           _RANDOM[7'h26],
           _RANDOM[7'h27],
           _RANDOM[7'h28],
           _RANDOM[7'h29],
           _RANDOM[7'h2A],
           _RANDOM[7'h2B],
           _RANDOM[7'h2C],
           _RANDOM[7'h2D],
           _RANDOM[7'h2E],
           _RANDOM[7'h2F],
           _RANDOM[7'h30],
           _RANDOM[7'h31],
           _RANDOM[7'h32],
           _RANDOM[7'h33],
           _RANDOM[7'h34],
           _RANDOM[7'h35],
           _RANDOM[7'h36],
           _RANDOM[7'h37],
           _RANDOM[7'h38],
           _RANDOM[7'h39],
           _RANDOM[7'h3A],
           _RANDOM[7'h3B],
           _RANDOM[7'h3C],
           _RANDOM[7'h3D],
           _RANDOM[7'h3E],
           _RANDOM[7'h3F],
           _RANDOM[7'h40],
           _RANDOM[7'h41][25:0]};	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
        request_set = {_RANDOM[7'h47][31:29], _RANDOM[7'h48][2:0]};	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
        request_way = _RANDOM[7'h48][7:4];	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
        request_last_flush = _RANDOM[7'h48][10];	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
        sche_a_valid = _RANDOM[7'h48][11];	// ventus/src/L2cache/MSHR.scala:42:7, :57:24, :63:29
        sche_dir_valid = _RANDOM[7'h48][12];	// ventus/src/L2cache/MSHR.scala:42:7, :57:24, :64:31
        sink_d_reg = _RANDOM[7'h48][13];	// ventus/src/L2cache/MSHR.scala:42:7, :57:24, :65:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// ventus/src/L2cache/MSHR.scala:42:7
      `FIRRTL_AFTER_INITIAL	// ventus/src/L2cache/MSHR.scala:42:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_status_opcode = request_opcode;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
  assign io_status_tag = request_tag;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
  assign io_status_set = request_set;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
  assign io_schedule_a_valid = io_schedule_a_valid_0;	// ventus/src/L2cache/MSHR.scala:42:7, :97:39
  assign io_schedule_a_bits_tag = request_tag;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
  assign io_schedule_a_bits_offset = request_offset;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
  assign io_schedule_a_bits_data = request_data;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
  assign io_schedule_a_bits_set = request_set;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
  assign io_schedule_d_valid = io_valid & sink_d_reg & ~sche_a_valid;	// ventus/src/L2cache/MSHR.scala:42:7, :63:29, :65:27, :89:{49,52}
  assign io_schedule_d_bits_size = request_size;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
  assign io_schedule_d_bits_tag = request_tag;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
  assign io_schedule_d_bits_offset = request_offset;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
  assign io_schedule_d_bits_data = data_reg;	// ventus/src/L2cache/MSHR.scala:42:7, :56:25
  assign io_schedule_d_bits_set = request_set;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
  assign io_schedule_d_bits_way = request_way;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
  assign io_schedule_d_bits_last_flush = request_last_flush;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
  assign io_schedule_data = data_reg;	// ventus/src/L2cache/MSHR.scala:42:7, :56:25
  assign io_schedule_dir_valid = io_schedule_dir_valid_0;	// ventus/src/L2cache/MSHR.scala:42:7, :134:41
  assign io_schedule_dir_bits_way = request_way;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
  assign io_schedule_dir_bits_data_tag = request_tag;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
  assign io_schedule_dir_bits_set = request_set;	// ventus/src/L2cache/MSHR.scala:42:7, :57:24
endmodule

