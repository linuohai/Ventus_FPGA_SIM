// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module FloatDivSqrt(	// ventus/src/pipeline/FloatDivSqrt.scala:113:7
  input         clock,	// ventus/src/pipeline/FloatDivSqrt.scala:113:7
                reset,	// ventus/src/pipeline/FloatDivSqrt.scala:113:7
  output        io_in_ready,	// ventus/src/pipeline/fpu_utils.scala:99:14
  input         io_in_valid,	// ventus/src/pipeline/fpu_utils.scala:99:14
  input  [2:0]  io_in_bits_op,	// ventus/src/pipeline/fpu_utils.scala:99:14
  input  [31:0] io_in_bits_a,	// ventus/src/pipeline/fpu_utils.scala:99:14
                io_in_bits_b,	// ventus/src/pipeline/fpu_utils.scala:99:14
  input  [2:0]  io_in_bits_rm,	// ventus/src/pipeline/fpu_utils.scala:99:14
  input         io_out_ready,	// ventus/src/pipeline/fpu_utils.scala:99:14
  output        io_out_valid,	// ventus/src/pipeline/fpu_utils.scala:99:14
  output [31:0] io_out_bits_result	// ventus/src/pipeline/fpu_utils.scala:99:14
);

  wire [23:0] _rounding_io_out_fracRounded;	// ventus/src/pipeline/FloatDivSqrt.scala:247:24
  wire        _rounding_io_out_fracCout;	// ventus/src/pipeline/FloatDivSqrt.scala:247:24
  wire        _fracDivSqrt_io_out_valid;	// ventus/src/pipeline/FloatDivSqrt.scala:215:27
  wire [27:0] _fracDivSqrt_io_out_bits_quot;	// ventus/src/pipeline/FloatDivSqrt.scala:215:27
  wire        _fracDivSqrt_io_out_bits_isZeroRem;	// ventus/src/pipeline/FloatDivSqrt.scala:215:27
  wire        _classify_b_io_isSNaN;	// ventus/src/pipeline/FloatDivSqrt.scala:132:26
  wire        _classify_b_io_isNaN;	// ventus/src/pipeline/FloatDivSqrt.scala:132:26
  wire        _classify_b_io_isInf;	// ventus/src/pipeline/FloatDivSqrt.scala:132:26
  wire        _classify_b_io_isSubnormal;	// ventus/src/pipeline/FloatDivSqrt.scala:132:26
  wire        _classify_b_io_isZero;	// ventus/src/pipeline/FloatDivSqrt.scala:132:26
  wire        _classify_b_io_isSubnormalOrZero;	// ventus/src/pipeline/FloatDivSqrt.scala:132:26
  wire        _classify_a_io_isPosInf;	// ventus/src/pipeline/FloatDivSqrt.scala:129:26
  wire        _classify_a_io_isSNaN;	// ventus/src/pipeline/FloatDivSqrt.scala:129:26
  wire        _classify_a_io_isNaN;	// ventus/src/pipeline/FloatDivSqrt.scala:129:26
  wire        _classify_a_io_isInf;	// ventus/src/pipeline/FloatDivSqrt.scala:129:26
  wire        _classify_a_io_isInfOrNaN;	// ventus/src/pipeline/FloatDivSqrt.scala:129:26
  wire        _classify_a_io_isSubnormal;	// ventus/src/pipeline/FloatDivSqrt.scala:129:26
  wire        _classify_a_io_isZero;	// ventus/src/pipeline/FloatDivSqrt.scala:129:26
  wire        _classify_a_io_isSubnormalOrZero;	// ventus/src/pipeline/FloatDivSqrt.scala:129:26
  reg  [2:0]  state;	// ventus/src/pipeline/FloatDivSqrt.scala:120:22
  reg  [2:0]  rmReg;	// ventus/src/pipeline/FloatDivSqrt.scala:123:24
  reg         isDivReg;	// ventus/src/pipeline/FloatDivSqrt.scala:125:27
  reg         resSignReg;	// ventus/src/pipeline/FloatDivSqrt.scala:146:29
  reg  [9:0]  aExpReg;	// ventus/src/pipeline/FloatDivSqrt.scala:147:20
  reg  [23:0] aFracReg;	// ventus/src/pipeline/FloatDivSqrt.scala:148:21
  reg  [9:0]  bExpReg;	// ventus/src/pipeline/FloatDivSqrt.scala:150:20
  reg  [23:0] bFracReg;	// ventus/src/pipeline/FloatDivSqrt.scala:151:21
  reg         aIsSubnormalReg;	// ventus/src/pipeline/FloatDivSqrt.scala:159:34
  reg         bIsSubnormalReg;	// ventus/src/pipeline/FloatDivSqrt.scala:170:34
  reg         specialCaseReg;	// ventus/src/pipeline/FloatDivSqrt.scala:198:33
  reg  [31:0] specialResult;	// ventus/src/pipeline/FloatDivSqrt.scala:201:32
  reg         gReg;	// ventus/src/pipeline/FloatDivSqrt.scala:242:21
  reg         rReg;	// ventus/src/pipeline/FloatDivSqrt.scala:243:21
  reg         sReg;	// ventus/src/pipeline/FloatDivSqrt.scala:244:21
  wire        io_out_valid_0 = state == 3'h5;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/FloatDivSqrt.scala:120:22, :342:25
  always @(posedge clock) begin	// ventus/src/pipeline/FloatDivSqrt.scala:113:7
    automatic logic        _specialResult_T_10;	// src/main/scala/chisel3/util/Decoupled.scala:51:35
    automatic logic        hasNaN;	// ventus/src/pipeline/FloatDivSqrt.scala:173:23
    automatic logic        sqrtSpecial;	// ventus/src/pipeline/FloatDivSqrt.scala:178:55
    automatic logic        divSpecial;	// ventus/src/pipeline/FloatDivSqrt.scala:182:71
    automatic logic [26:0] fracShifted_x_ext =
      _fracDivSqrt_io_out_bits_quot[26]
        ? _fracDivSqrt_io_out_bits_quot[26:0]
        : {_fracDivSqrt_io_out_bits_quot[25:0], 1'h0};	// ventus/src/pipeline/FloatDivSqrt.scala:124:28, :215:27, :230:41, :231:{21,54}
    automatic logic [9:0]  _expNorm_T_4;	// ventus/src/pipeline/FloatDivSqrt.scala:232:34
    automatic logic [9:0]  _denormShift_T;	// ventus/src/pipeline/FloatDivSqrt.scala:234:47
    automatic logic [9:0]  _fracShifted_T_3;	// ventus/src/pipeline/FloatDivSqrt.scala:236:48
    automatic logic [4:0]  fracShifted_realShiftAmt;	// ventus/src/pipeline/fpu_utils.scala:156:27
    automatic logic [26:0] fracShifted_x_shifted;	// ventus/src/pipeline/fpu_utils.scala:162:24
    automatic logic        _GEN;	// ventus/src/pipeline/FloatDivSqrt.scala:285:16
    automatic logic        _GEN_0;	// ventus/src/pipeline/FloatDivSqrt.scala:285:16
    automatic logic        _GEN_1;	// ventus/src/pipeline/FloatDivSqrt.scala:285:16
    automatic logic        _GEN_2;	// ventus/src/pipeline/FloatDivSqrt.scala:285:16
    _specialResult_T_10 = ~(|state) & io_in_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/pipeline/FloatDivSqrt.scala:120:22, :285:16, :341:24
    hasNaN = _classify_a_io_isNaN | _classify_b_io_isNaN;	// ventus/src/pipeline/FloatDivSqrt.scala:129:26, :132:26, :173:23
    sqrtSpecial =
      (io_in_bits_a[31] | _classify_a_io_isInfOrNaN | _classify_a_io_isZero)
      & (|io_in_bits_op);	// ventus/src/pipeline/FloatDivSqrt.scala:124:28, :129:26, :178:{43,55}, ventus/src/pipeline/fpu_utils.scala:56:46
    divSpecial =
      (_classify_a_io_isZero | _classify_b_io_isZero | hasNaN | _classify_b_io_isInf
       | _classify_a_io_isInf) & ~(|io_in_bits_op);	// ventus/src/pipeline/FloatDivSqrt.scala:124:28, :129:26, :132:26, :173:23, :182:{60,71}
    _expNorm_T_4 =
      aExpReg
      - {8'h0,
         isDivReg
           ? {1'h0, ~(_fracDivSqrt_io_out_bits_quot[26])}
           : _fracDivSqrt_io_out_bits_quot[26] ? 2'h1 : 2'h2};	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :124:28, :125:27, :147:20, :215:27, :230:{23,41}, :232:{34,39,83}
    _denormShift_T = 10'h382 - _expNorm_T_4;	// ventus/src/pipeline/FloatDivSqrt.scala:232:34, :234:47
    _fracShifted_T_3 = _denormShift_T[9] ? 10'h0 : _denormShift_T;	// ventus/src/pipeline/FloatDivSqrt.scala:234:47, :236:{48,65}, :262:23
    fracShifted_realShiftAmt = _fracShifted_T_3 > 10'h1A ? 5'h1B : _fracShifted_T_3[4:0];	// ventus/src/pipeline/FloatDivSqrt.scala:236:48, ventus/src/pipeline/fpu_utils.scala:156:{27,37}, :158:15
    fracShifted_x_shifted = fracShifted_x_ext >> fracShifted_realShiftAmt;	// ventus/src/pipeline/FloatDivSqrt.scala:231:21, ventus/src/pipeline/fpu_utils.scala:156:27, :162:24
    _GEN = state == 3'h1;	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :120:22, :285:16
    _GEN_0 = state == 3'h2;	// ventus/src/pipeline/FloatDivSqrt.scala:120:22, :217:36, :285:16
    _GEN_1 = state == 3'h3;	// ventus/src/pipeline/FloatDivSqrt.scala:120:22, :266:51, :285:16
    _GEN_2 = state == 3'h4;	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :120:22, :285:16
    if (reset)	// ventus/src/pipeline/FloatDivSqrt.scala:113:7
      state <= 3'h0;	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :120:22
    else if (|state) begin	// ventus/src/pipeline/FloatDivSqrt.scala:120:22, :285:16
      if (_GEN)	// ventus/src/pipeline/FloatDivSqrt.scala:285:16
        state <= 3'h2;	// ventus/src/pipeline/FloatDivSqrt.scala:120:22, :217:36
      else if (_GEN_0)	// ventus/src/pipeline/FloatDivSqrt.scala:285:16
        state <= 3'h3;	// ventus/src/pipeline/FloatDivSqrt.scala:120:22, :266:51
      else if (_GEN_1) begin	// ventus/src/pipeline/FloatDivSqrt.scala:285:16
        if (_fracDivSqrt_io_out_valid)	// ventus/src/pipeline/FloatDivSqrt.scala:215:27
          state <= 3'h4;	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :120:22
      end
      else if (_GEN_2)	// ventus/src/pipeline/FloatDivSqrt.scala:285:16
        state <= 3'h5;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/FloatDivSqrt.scala:120:22
      else if (state == 3'h5 & io_out_ready & io_out_valid_0)	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/FloatDivSqrt.scala:120:22, :285:16, :303:{37,44}, :342:25
        state <= 3'h0;	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :120:22
    end
    else if (_specialResult_T_10)	// src/main/scala/chisel3/util/Decoupled.scala:51:35
      state <=
        sqrtSpecial | divSpecial
          ? 3'h5
          : _classify_a_io_isSubnormal | _classify_b_io_isSubnormal ? 3'h1 : 3'h2;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/FloatDivSqrt.scala:113:7, :120:22, :129:26, :132:26, :178:55, :182:71, :217:36, :288:{26,40}, :289:17, :290:{33,49}, :291:17, :293:16
    if (_specialResult_T_10) begin	// src/main/scala/chisel3/util/Decoupled.scala:51:35
      automatic logic       resSign =
        ~(|io_in_bits_op) & (io_in_bits_a[31] ^ io_in_bits_b[31]);	// ventus/src/pipeline/FloatDivSqrt.scala:124:28, :145:{20,34}, ventus/src/pipeline/fpu_utils.scala:56:46
      automatic logic [1:0] specialResSel;	// ventus/src/pipeline/FloatDivSqrt.scala:199:26
      specialResSel =
        sqrtSpecial
          ? (_classify_a_io_isZero ? 2'h1 : {~_classify_a_io_isPosInf, 1'h0})
          : (_classify_a_io_isZero & _classify_b_io_isZero | _classify_a_io_isSNaN
             | _classify_b_io_isSNaN | _classify_a_io_isInf & _classify_b_io_isInf)
            & ~(|io_in_bits_op) | hasNaN
              ? 2'h2
              : {1'h0,
                 ~(_classify_b_io_isZero
                   | ~(_classify_a_io_isZero | _classify_b_io_isInf))};	// src/main/scala/chisel3/util/Mux.scala:50:70, :126:16, ventus/src/pipeline/FloatDivSqrt.scala:113:7, :124:28, :129:26, :132:26, :173:23, :174:26, :175:24, :178:55, :180:{52,64}, :188:17, :190:14, :199:26
      rmReg <= io_in_bits_rm;	// ventus/src/pipeline/FloatDivSqrt.scala:123:24
      isDivReg <= ~(|io_in_bits_op);	// ventus/src/pipeline/FloatDivSqrt.scala:124:28, :125:27
      resSignReg <= resSign;	// ventus/src/pipeline/FloatDivSqrt.scala:145:20, :146:29
      aIsSubnormalReg <= _classify_a_io_isSubnormal;	// ventus/src/pipeline/FloatDivSqrt.scala:129:26, :159:34
      bIsSubnormalReg <= _classify_b_io_isSubnormal;	// ventus/src/pipeline/FloatDivSqrt.scala:132:26, :170:34
      specialCaseReg <= divSpecial | sqrtSpecial;	// ventus/src/pipeline/FloatDivSqrt.scala:178:55, :182:71, :197:32, :198:33
      specialResult <=
        specialResSel[1]
          ? 32'h7FC00000
          : {resSign, specialResSel[0] ? 31'h0 : 31'h7F800000};	// ventus/src/pipeline/FloatDivSqrt.scala:145:20, :199:26, :200:61, :201:32, :202:8, :204:10, :205:12, :206:{12,41}, ventus/src/pipeline/fpu_utils.scala:49:29
    end
    if (|state) begin	// ventus/src/pipeline/FloatDivSqrt.scala:120:22, :285:16
      if (_GEN) begin	// ventus/src/pipeline/FloatDivSqrt.scala:285:16
        if (aIsSubnormalReg) begin	// ventus/src/pipeline/FloatDivSqrt.scala:159:34
          automatic logic [4:0]  aFracLEZ;	// src/main/scala/chisel3/util/Mux.scala:50:70
          automatic logic [54:0] _aFracReg_T;	// ventus/src/pipeline/FloatDivSqrt.scala:318:31
          aFracLEZ =
            aFracReg[22]
              ? 5'h0
              : aFracReg[21]
                  ? 5'h1
                  : aFracReg[20]
                      ? 5'h2
                      : aFracReg[19]
                          ? 5'h3
                          : aFracReg[18]
                              ? 5'h4
                              : aFracReg[17]
                                  ? 5'h5
                                  : aFracReg[16]
                                      ? 5'h6
                                      : aFracReg[15]
                                          ? 5'h7
                                          : aFracReg[14]
                                              ? 5'h8
                                              : aFracReg[13]
                                                  ? 5'h9
                                                  : aFracReg[12]
                                                      ? 5'hA
                                                      : aFracReg[11]
                                                          ? 5'hB
                                                          : aFracReg[10]
                                                              ? 5'hC
                                                              : aFracReg[9]
                                                                  ? 5'hD
                                                                  : aFracReg[8]
                                                                      ? 5'hE
                                                                      : aFracReg[7]
                                                                          ? 5'hF
                                                                          : aFracReg[6]
                                                                              ? 5'h10
                                                                              : aFracReg[5]
                                                                                  ? 5'h11
                                                                                  : aFracReg[4]
                                                                                      ? 5'h12
                                                                                      : aFracReg[3]
                                                                                          ? 5'h13
                                                                                          : aFracReg[2]
                                                                                              ? 5'h14
                                                                                              : aFracReg[1]
                                                                                                  ? 5'h15
                                                                                                  : 5'h16;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/FloatDivSqrt.scala:148:21, :212:{42,50}
          aExpReg <= aExpReg - {5'h0, aFracLEZ};	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/FloatDivSqrt.scala:147:20, :317:36
          _aFracReg_T = {31'h0, aFracReg} << aFracLEZ;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/FloatDivSqrt.scala:148:21, :205:12, :318:31
          aFracReg <= {_aFracReg_T[22:0], 1'h0};	// ventus/src/pipeline/FloatDivSqrt.scala:124:28, :148:21, :318:{18,31}
        end
      end
      else if (_GEN_0) begin	// ventus/src/pipeline/FloatDivSqrt.scala:285:16
        if (isDivReg)	// ventus/src/pipeline/FloatDivSqrt.scala:125:27
          aExpReg <= aExpReg - bExpReg;	// ventus/src/pipeline/FloatDivSqrt.scala:147:20, :150:20, :326:40
        else begin	// ventus/src/pipeline/FloatDivSqrt.scala:125:27
          automatic logic [8:0] _aExpReg_T_8;	// ventus/src/pipeline/FloatDivSqrt.scala:326:70
          _aExpReg_T_8 = aExpReg[9:1] + 9'h1;	// ventus/src/pipeline/FloatDivSqrt.scala:147:20, :326:{59,70}
          aExpReg <= {_aExpReg_T_8[8], _aExpReg_T_8};	// ventus/src/pipeline/FloatDivSqrt.scala:147:20, :326:{21,70}
        end
      end
      else if (_GEN_1) begin	// ventus/src/pipeline/FloatDivSqrt.scala:285:16
        if (_fracDivSqrt_io_out_valid) begin	// ventus/src/pipeline/FloatDivSqrt.scala:215:27
          aExpReg <= _expNorm_T_4;	// ventus/src/pipeline/FloatDivSqrt.scala:147:20, :232:34
          aFracReg <= fracShifted_x_shifted[26:3];	// ventus/src/pipeline/FloatDivSqrt.scala:148:21, :238:38, ventus/src/pipeline/fpu_utils.scala:162:24
        end
      end
      else if (_GEN_2) begin	// ventus/src/pipeline/FloatDivSqrt.scala:285:16
        automatic logic fracCout;	// ventus/src/pipeline/FloatDivSqrt.scala:257:21
        fracCout =
          aFracReg[23] ? _rounding_io_out_fracCout : _rounding_io_out_fracRounded[23];	// ventus/src/pipeline/FloatDivSqrt.scala:148:21, :247:24, :257:{21,31}, :258:16
        aExpReg <=
          ($signed(_denormShift_T) > 10'sh0
           | {fracCout, _rounding_io_out_fracRounded} == 25'h0
             ? 10'h0
             : aExpReg + 10'h7F) + {9'h0, fracCout};	// ventus/src/pipeline/FloatDivSqrt.scala:147:20, :234:47, :247:24, :257:21, :261:{27,51}, :262:{23,36,42}, :264:13, :265:5
        aFracReg <= _rounding_io_out_fracRounded;	// ventus/src/pipeline/FloatDivSqrt.scala:148:21, :247:24
      end
      if (_GEN & bIsSubnormalReg) begin	// ventus/src/pipeline/FloatDivSqrt.scala:150:20, :170:34, :285:16, :306:16, :320:28, :321:17
        automatic logic [4:0]  bFracLEZ;	// src/main/scala/chisel3/util/Mux.scala:50:70
        automatic logic [54:0] _bFracReg_T;	// ventus/src/pipeline/FloatDivSqrt.scala:322:31
        bFracLEZ =
          bFracReg[22]
            ? 5'h0
            : bFracReg[21]
                ? 5'h1
                : bFracReg[20]
                    ? 5'h2
                    : bFracReg[19]
                        ? 5'h3
                        : bFracReg[18]
                            ? 5'h4
                            : bFracReg[17]
                                ? 5'h5
                                : bFracReg[16]
                                    ? 5'h6
                                    : bFracReg[15]
                                        ? 5'h7
                                        : bFracReg[14]
                                            ? 5'h8
                                            : bFracReg[13]
                                                ? 5'h9
                                                : bFracReg[12]
                                                    ? 5'hA
                                                    : bFracReg[11]
                                                        ? 5'hB
                                                        : bFracReg[10]
                                                            ? 5'hC
                                                            : bFracReg[9]
                                                                ? 5'hD
                                                                : bFracReg[8]
                                                                    ? 5'hE
                                                                    : bFracReg[7]
                                                                        ? 5'hF
                                                                        : bFracReg[6]
                                                                            ? 5'h10
                                                                            : bFracReg[5]
                                                                                ? 5'h11
                                                                                : bFracReg[4]
                                                                                    ? 5'h12
                                                                                    : bFracReg[3]
                                                                                        ? 5'h13
                                                                                        : bFracReg[2]
                                                                                            ? 5'h14
                                                                                            : bFracReg[1]
                                                                                                ? 5'h15
                                                                                                : 5'h16;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/FloatDivSqrt.scala:151:21, :213:{42,50}
        bExpReg <= bExpReg - {5'h0, bFracLEZ};	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/FloatDivSqrt.scala:150:20, :321:36
        _bFracReg_T = {31'h0, bFracReg} << bFracLEZ;	// src/main/scala/chisel3/util/Mux.scala:50:70, ventus/src/pipeline/FloatDivSqrt.scala:151:21, :205:12, :322:31
        bFracReg <= {_bFracReg_T[22:0], 1'h0};	// ventus/src/pipeline/FloatDivSqrt.scala:124:28, :151:21, :322:{18,31}
      end
    end
    else if (_specialResult_T_10) begin	// src/main/scala/chisel3/util/Decoupled.scala:51:35
      automatic logic [8:0] _exp_T_2 = {1'h0, io_in_bits_a[30:23]} - 9'h7F;	// ventus/src/pipeline/FloatDivSqrt.scala:124:28, :138:38, ventus/src/pipeline/fpu_utils.scala:56:46
      automatic logic [8:0] _exp_T_5 = {1'h0, io_in_bits_b[30:23]} - 9'h7F;	// ventus/src/pipeline/FloatDivSqrt.scala:124:28, :138:38, ventus/src/pipeline/fpu_utils.scala:56:46
      aExpReg <= {_exp_T_2[8], _exp_T_2};	// ventus/src/pipeline/FloatDivSqrt.scala:138:38, :147:20, :309:17
      aFracReg <= {~_classify_a_io_isSubnormalOrZero, io_in_bits_a[22:0]};	// ventus/src/pipeline/FloatDivSqrt.scala:129:26, :139:{22,23}, :148:21, ventus/src/pipeline/fpu_utils.scala:56:46
      bExpReg <= {_exp_T_5[8], _exp_T_5};	// ventus/src/pipeline/FloatDivSqrt.scala:138:38, :150:20, :311:17
      bFracReg <= {~_classify_b_io_isSubnormalOrZero, io_in_bits_b[22:0]};	// ventus/src/pipeline/FloatDivSqrt.scala:132:26, :139:{22,23}, :151:21, ventus/src/pipeline/fpu_utils.scala:56:46
    end
    gReg <= fracShifted_x_shifted[2];	// ventus/src/pipeline/FloatDivSqrt.scala:239:{27,46}, :242:21, ventus/src/pipeline/fpu_utils.scala:162:24
    rReg <= fracShifted_x_shifted[1];	// ventus/src/pipeline/FloatDivSqrt.scala:240:{27,48}, :243:21, ventus/src/pipeline/fpu_utils.scala:162:24
    sReg <=
      ~_fracDivSqrt_io_out_bits_isZeroRem | fracShifted_x_shifted[0]
      | (|(27'h7FFFFFF >> 5'h1B - fracShifted_realShiftAmt & fracShifted_x_ext));	// ventus/src/pipeline/FloatDivSqrt.scala:215:27, :231:21, :241:{11,46}, :244:21, ventus/src/pipeline/fpu_utils.scala:156:27, :160:{32,39,46}, :162:24, :163:{23,32,41}
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// ventus/src/pipeline/FloatDivSqrt.scala:113:7
    `ifdef FIRRTL_BEFORE_INITIAL	// ventus/src/pipeline/FloatDivSqrt.scala:113:7
      `FIRRTL_BEFORE_INITIAL	// ventus/src/pipeline/FloatDivSqrt.scala:113:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// ventus/src/pipeline/FloatDivSqrt.scala:113:7
      automatic logic [31:0] _RANDOM[0:3];	// ventus/src/pipeline/FloatDivSqrt.scala:113:7
      `ifdef INIT_RANDOM_PROLOG_	// ventus/src/pipeline/FloatDivSqrt.scala:113:7
        `INIT_RANDOM_PROLOG_	// ventus/src/pipeline/FloatDivSqrt.scala:113:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// ventus/src/pipeline/FloatDivSqrt.scala:113:7
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;	// ventus/src/pipeline/FloatDivSqrt.scala:113:7
        end	// ventus/src/pipeline/FloatDivSqrt.scala:113:7
        state = _RANDOM[2'h0][2:0];	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :120:22
        rmReg = _RANDOM[2'h0][5:3];	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :120:22, :123:24
        isDivReg = _RANDOM[2'h0][6];	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :120:22, :125:27
        resSignReg = _RANDOM[2'h0][7];	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :120:22, :146:29
        aExpReg = _RANDOM[2'h0][17:8];	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :120:22, :147:20
        aFracReg = {_RANDOM[2'h0][31:18], _RANDOM[2'h1][9:0]};	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :120:22, :148:21
        bExpReg = _RANDOM[2'h1][19:10];	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :148:21, :150:20
        bFracReg = {_RANDOM[2'h1][31:20], _RANDOM[2'h2][11:0]};	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :148:21, :151:21
        aIsSubnormalReg = _RANDOM[2'h2][12];	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :151:21, :159:34
        bIsSubnormalReg = _RANDOM[2'h2][13];	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :151:21, :170:34
        specialCaseReg = _RANDOM[2'h2][18];	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :151:21, :198:33
        specialResult = {_RANDOM[2'h2][31:19], _RANDOM[2'h3][18:0]};	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :151:21, :201:32
        gReg = _RANDOM[2'h3][29];	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :201:32, :242:21
        rReg = _RANDOM[2'h3][30];	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :201:32, :243:21
        sReg = _RANDOM[2'h3][31];	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :201:32, :244:21
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// ventus/src/pipeline/FloatDivSqrt.scala:113:7
      `FIRRTL_AFTER_INITIAL	// ventus/src/pipeline/FloatDivSqrt.scala:113:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Classify classify_a (	// ventus/src/pipeline/FloatDivSqrt.scala:129:26
    .io_in                (io_in_bits_a),
    .io_isPosInf          (_classify_a_io_isPosInf),
    .io_isSNaN            (_classify_a_io_isSNaN),
    .io_isNaN             (_classify_a_io_isNaN),
    .io_isInf             (_classify_a_io_isInf),
    .io_isInfOrNaN        (_classify_a_io_isInfOrNaN),
    .io_isSubnormal       (_classify_a_io_isSubnormal),
    .io_isZero            (_classify_a_io_isZero),
    .io_isSubnormalOrZero (_classify_a_io_isSubnormalOrZero)
  );
  Classify classify_b (	// ventus/src/pipeline/FloatDivSqrt.scala:132:26
    .io_in                (io_in_bits_b),
    .io_isPosInf          (/* unused */),
    .io_isSNaN            (_classify_b_io_isSNaN),
    .io_isNaN             (_classify_b_io_isNaN),
    .io_isInf             (_classify_b_io_isInf),
    .io_isInfOrNaN        (/* unused */),
    .io_isSubnormal       (_classify_b_io_isSubnormal),
    .io_isZero            (_classify_b_io_isZero),
    .io_isSubnormalOrZero (_classify_b_io_isSubnormalOrZero)
  );
  FracDivSqrt fracDivSqrt (	// ventus/src/pipeline/FloatDivSqrt.scala:215:27
    .clock                 (clock),
    .reset                 (reset),
    .io_in_valid           (state == 3'h2),	// ventus/src/pipeline/FloatDivSqrt.scala:120:22, :217:36
    .io_in_bits_a
      (isDivReg | aExpReg[0] ? {aFracReg, 4'h0} : {1'h0, aFracReg, 3'h0}),	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :124:28, :125:27, :147:20, :148:21, :149:26, :220:{34,44,61,86}
    .io_in_bits_b          ({bFracReg, 4'h0}),	// ventus/src/pipeline/FloatDivSqrt.scala:151:21, :220:61, :224:34
    .io_in_bits_isDiv      (isDivReg),	// ventus/src/pipeline/FloatDivSqrt.scala:125:27
    .io_out_valid          (_fracDivSqrt_io_out_valid),
    .io_out_bits_quot      (_fracDivSqrt_io_out_bits_quot),
    .io_out_bits_isZeroRem (_fracDivSqrt_io_out_bits_isZeroRem)
  );
  RoundingUnit_128 rounding (	// ventus/src/pipeline/FloatDivSqrt.scala:247:24
    .io_in_rm           (rmReg),	// ventus/src/pipeline/FloatDivSqrt.scala:123:24
    .io_in_frac         (aFracReg),	// ventus/src/pipeline/FloatDivSqrt.scala:148:21
    .io_in_sign         (resSignReg),	// ventus/src/pipeline/FloatDivSqrt.scala:146:29
    .io_in_guard        (gReg),	// ventus/src/pipeline/FloatDivSqrt.scala:242:21
    .io_in_round        (rReg),	// ventus/src/pipeline/FloatDivSqrt.scala:243:21
    .io_in_sticky       (sReg),	// ventus/src/pipeline/FloatDivSqrt.scala:244:21
    .io_out_fracRounded (_rounding_io_out_fracRounded),
    .io_out_fracCout    (_rounding_io_out_fracCout)
  );
  assign io_in_ready = ~(|state);	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :120:22, :285:16, :341:24
  assign io_out_valid = io_out_valid_0;	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :342:25
  assign io_out_bits_result =
    specialCaseReg ? specialResult : {resSignReg, aExpReg[7:0], aFracReg[22:0]};	// ventus/src/pipeline/FloatDivSqrt.scala:113:7, :146:29, :147:20, :148:21, :198:33, :201:32, :212:42, :340:{25,45}, :343:28
endmodule

