// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module FCMP(	// dependencies/fpuv2/fudian/src/main/scala/fudian/FCMP.scala:6:7
  input  [31:0] io_a,	// dependencies/fpuv2/fudian/src/main/scala/fudian/FCMP.scala:7:14
                io_b,	// dependencies/fpuv2/fudian/src/main/scala/fudian/FCMP.scala:7:14
  output        io_eq,	// dependencies/fpuv2/fudian/src/main/scala/fudian/FCMP.scala:7:14
                io_le,	// dependencies/fpuv2/fudian/src/main/scala/fudian/FCMP.scala:7:14
                io_lt,	// dependencies/fpuv2/fudian/src/main/scala/fudian/FCMP.scala:7:14
  output [4:0]  io_fflags	// dependencies/fpuv2/fudian/src/main/scala/fudian/FCMP.scala:7:14
);

  wire        decode_a_isNaN = (&(io_a[30:23])) & (|(io_a[22:0]));	// dependencies/fpuv2/fudian/src/main/scala/fudian/package.scala:33:27, :34:28, :44:40, :60:18, :61:18
  wire        decode_b_isNaN = (&(io_b[30:23])) & (|(io_b[22:0]));	// dependencies/fpuv2/fudian/src/main/scala/fudian/package.scala:33:27, :34:28, :44:40, :60:18, :61:18
  wire        hasNaN = decode_a_isNaN | decode_b_isNaN;	// dependencies/fpuv2/fudian/src/main/scala/fudian/FCMP.scala:20:31, dependencies/fpuv2/fudian/src/main/scala/fudian/package.scala:44:40
  wire        bothZero =
    io_a[30:23] == 8'h0 & ~(|(io_a[22:0])) & io_b[30:23] == 8'h0 & ~(|(io_b[22:0]));	// dependencies/fpuv2/fudian/src/main/scala/fudian/FCMP.scala:22:34, dependencies/fpuv2/fudian/src/main/scala/fudian/package.scala:32:28, :34:28, :40:27, :60:18, :61:18
  wire        same_sign = io_a[31] == io_b[31];	// dependencies/fpuv2/fudian/src/main/scala/fudian/FCMP.scala:24:29, dependencies/fpuv2/fudian/src/main/scala/fudian/package.scala:59:19
  wire [32:0] _a_minus_b_T_2 = {1'h0, io_a} - {1'h0, io_b};	// dependencies/fpuv2/fudian/src/main/scala/fudian/FCMP.scala:7:14, :25:36, :29:42
  wire        uint_less = io_a[31] ^ _a_minus_b_T_2[32];	// dependencies/fpuv2/fudian/src/main/scala/fudian/FCMP.scala:25:36, :27:{29,45}, dependencies/fpuv2/fudian/src/main/scala/fudian/package.scala:59:19
  assign io_eq = ~hasNaN & (~(|(_a_minus_b_T_2[31:0])) | bothZero);	// dependencies/fpuv2/fudian/src/main/scala/fudian/FCMP.scala:6:7, :20:31, :22:34, :25:36, :26:{31,35}, :31:{12,20,32}
  assign io_le =
    ~hasNaN & (same_sign ? uint_less | ~(|(_a_minus_b_T_2[31:0])) : io_a[31] | bothZero);	// dependencies/fpuv2/fudian/src/main/scala/fudian/FCMP.scala:6:7, :20:31, :22:34, :24:29, :25:36, :26:{31,35}, :27:29, :31:12, :32:{20,26}, :34:15, :35:15, dependencies/fpuv2/fudian/src/main/scala/fudian/package.scala:59:19
  assign io_lt =
    ~hasNaN & (same_sign ? uint_less & (|(_a_minus_b_T_2[31:0])) : io_a[31] & ~bothZero);	// dependencies/fpuv2/fudian/src/main/scala/fudian/FCMP.scala:6:7, :20:31, :22:34, :24:29, :25:36, :26:{31,35}, :27:29, :31:12, :37:{20,26}, :39:15, :40:{15,18}, dependencies/fpuv2/fudian/src/main/scala/fudian/package.scala:59:19
  assign io_fflags = {decode_a_isNaN & ~(io_a[22]) | decode_b_isNaN & ~(io_b[22]), 4'h0};	// dependencies/fpuv2/fudian/src/main/scala/fudian/FCMP.scala:6:7, :21:33, :42:19, dependencies/fpuv2/fudian/src/main/scala/fudian/package.scala:44:40, :45:{37,40,49}
endmodule

