// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module ShiftBoard(	// ventus/src/pipeline/LSU.scala:587:7
  input  clock,	// ventus/src/pipeline/LSU.scala:587:7
         reset,	// ventus/src/pipeline/LSU.scala:587:7
         io_left,	// ventus/src/pipeline/LSU.scala:588:12
         io_right,	// ventus/src/pipeline/LSU.scala:588:12
  output io_full,	// ventus/src/pipeline/LSU.scala:588:12
         io_empty	// ventus/src/pipeline/LSU.scala:588:12
);

  reg  taps_0;	// ventus/src/pipeline/LSU.scala:594:36
  reg  taps_1;	// ventus/src/pipeline/LSU.scala:594:36
  reg  taps_2;	// ventus/src/pipeline/LSU.scala:594:36
  reg  taps_3;	// ventus/src/pipeline/LSU.scala:594:36
  wire _io_empty_T = io_left ^ io_right;	// ventus/src/pipeline/LSU.scala:599:31
  wire _io_empty_T_1 = io_left | taps_1;	// ventus/src/pipeline/LSU.scala:594:36, :599:46
  always @(posedge clock) begin	// ventus/src/pipeline/LSU.scala:587:7
    if (reset) begin	// ventus/src/pipeline/LSU.scala:587:7
      taps_0 <= 1'h0;	// ventus/src/pipeline/LSU.scala:587:7, :594:36
      taps_1 <= 1'h0;	// ventus/src/pipeline/LSU.scala:587:7, :594:36
      taps_2 <= 1'h0;	// ventus/src/pipeline/LSU.scala:587:7, :594:36
      taps_3 <= 1'h0;	// ventus/src/pipeline/LSU.scala:587:7, :594:36
    end
    else if (_io_empty_T) begin	// ventus/src/pipeline/LSU.scala:599:31
      taps_0 <= _io_empty_T_1;	// ventus/src/pipeline/LSU.scala:594:36, :599:46
      taps_1 <= io_left ? taps_0 : taps_2;	// ventus/src/pipeline/LSU.scala:594:36, :601:41
      taps_2 <= io_left ? taps_1 : taps_3;	// ventus/src/pipeline/LSU.scala:594:36, :601:41
      taps_3 <= io_left & taps_2;	// ventus/src/pipeline/LSU.scala:594:36, :600:57
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// ventus/src/pipeline/LSU.scala:587:7
    `ifdef FIRRTL_BEFORE_INITIAL	// ventus/src/pipeline/LSU.scala:587:7
      `FIRRTL_BEFORE_INITIAL	// ventus/src/pipeline/LSU.scala:587:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// ventus/src/pipeline/LSU.scala:587:7
      automatic logic [31:0] _RANDOM[0:0];	// ventus/src/pipeline/LSU.scala:587:7
      `ifdef INIT_RANDOM_PROLOG_	// ventus/src/pipeline/LSU.scala:587:7
        `INIT_RANDOM_PROLOG_	// ventus/src/pipeline/LSU.scala:587:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// ventus/src/pipeline/LSU.scala:587:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// ventus/src/pipeline/LSU.scala:587:7
        taps_0 = _RANDOM[/*Zero width*/ 1'b0][0];	// ventus/src/pipeline/LSU.scala:587:7, :594:36
        taps_1 = _RANDOM[/*Zero width*/ 1'b0][1];	// ventus/src/pipeline/LSU.scala:587:7, :594:36
        taps_2 = _RANDOM[/*Zero width*/ 1'b0][2];	// ventus/src/pipeline/LSU.scala:587:7, :594:36
        taps_3 = _RANDOM[/*Zero width*/ 1'b0][3];	// ventus/src/pipeline/LSU.scala:587:7, :594:36
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// ventus/src/pipeline/LSU.scala:587:7
      `FIRRTL_AFTER_INITIAL	// ventus/src/pipeline/LSU.scala:587:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_full = taps_3;	// ventus/src/pipeline/LSU.scala:587:7, :594:36
  assign io_empty = ~(_io_empty_T ? _io_empty_T_1 : taps_0);	// ventus/src/pipeline/LSU.scala:587:7, :594:36, :599:{31,46}, :604:{14,18}
endmodule

