// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

//`define T28_MEM

`define NUM_CLUSTER 1 //the number of cluster

`define NUM_SM 2 //the number of sm

`define NUM_SM_IN_CLUSTER `NUM_SM/`NUM_CLUSTER //the number of sm in a cluster

`define NUM_WARP 4'b1000 //the number of warp,CTA need

`define NUM_THREAD 4 //the number of thread

`define NUM_LANE `NUM_THREAD

`define NUM_BLOCK `NUM_WARP //the number of block(workgroup), not bigger than num_warp

`define NUM_WARP_IN_A_BLOCK `NUM_WARP //the number of warp in a block(workgroup)

`define NUM_FETCH 2 //a fetch refers to the number of instructions, should be power of 2

`define NUM_COLLECTORUNIT `NUM_WARP //the number of operandcollector unit in a sm

`define DEPTH_COLLECTORUNIT $clog2(`NUM_COLLECTORUNIT)

`define NUM_ISSUE 1 //the number of issue unit in a sm

`define NUM_BANK 4

`define DEPTH_BANK $clog2(`NUM_BANK)

`define NUM_VGPR 1024 //the number of vector general purpose register

`define NUM_SGPR 1024 //the number of scalar general purpose register

`define NUM_IBUFFER 2

`define NUM_SFU (`NUM_THREAD >> 2)

`define NUM_CACHE_IN_SM 2 //the number of l1cache in a sm

`define NUM_L2CACHE 1 //the number of l2cache in gpgpu

`define DEPTH_WARP $clog2(`NUM_WARP) //the depth of warp

`define DEPTH_THREAD $clog2(`NUM_THREAD) //the depth of thread

`define DEPTH_IBUFFER $clog2(`NUM_IBUFFER)

`define DEPTH_REGBANK $clog2(`NUM_VGPR/`NUM_BANK)

`define XLEN 32 //the length of data, 32-bit

`define INSTLEN 32 //the length of instructions, 32-bit

`define ADDRLEN 32 //the length of address, 32-bit

`define SIZE_IBUFFER 2

`define ICACHE_ALIGN `NUM_FETCH * 4

`define REGIDX_WIDTH 5

`define REGEXT_WIDTH 3

`define LSU_NUM_ENTRY_EACH_WARP 4 //blocking for each warp

`define LSU_NMSHRENTRY `NUM_WARP //less than num_warp

`define DCACHE_NSETS 32

`define DCACHE_NWAYS 2

`define DCACHE_BLOCKWORDS 32// Both L1$D and L1$I use this parameter

`define DCACHE_WSHR_ENTRY 4//no bigger than DCACHE_MSHRENTRY

`define DCACHE_SETIDXBITS $clog2(`DCACHE_NSETS)

`define DCACHE_WAYIDXBITS $clog2(`DCACHE_NWAYS)

`define BYTESOFWORD 4 //a word has 4 bytes

`define DCACHE_WORDOFFSETBITS $clog2(`BYTESOFWORD) 

`define DCACHE_BLOCKOFFSETBITS $clog2(`DCACHE_BLOCKWORDS) //select word in block

`define DCACHE_TAGBITS (`XLEN-(`DCACHE_SETIDXBITS+`DCACHE_BLOCKOFFSETBITS+`DCACHE_WORDOFFSETBITS))

`define DCACHE_MSHRENTRY 4//4

`define DCACHE_MSHRSUBENTRY 2

`define DCACHE_NLANES `NUM_THREAD

`define WORDLENGTH `XLEN

`define WIDBITS `DEPTH_WARP

`define BABITS (`DCACHE_TAGBITS+`DCACHE_SETIDXBITS)

`define TIWIDTH (`WIDBITS+`DCACHE_NLANES*(1+`DCACHE_BLOCKOFFSETBITS+`BYTESOFWORD))

`define DCACHE_ENTRY_DEPTH $clog2(`DCACHE_MSHRENTRY)

`define DCACHE_SUBENTRY_DEPTH $clog2(`DCACHE_MSHRSUBENTRY)

`define NUM_CACHE_DEPTH $clog2(`NUM_CACHE_IN_SM)

`define NUM_CLUSTER_DEPTH $clog2(`NUM_SM_IN_CLUSTER)

`define D_SOURCE (`NUM_CACHE_DEPTH+3+`DCACHE_ENTRY_DEPTH+`DCACHE_SETIDXBITS)

`define A_SOURCE (3+`DCACHE_ENTRY_DEPTH+`DCACHE_SETIDXBITS)

`define CLUSTER_SOURCE /*(`NUM_CLUSTER_DEPTH+3+`DCACHE_ENTRY_DEPTH+`DCACHE_SETIDXBITS)*/ (`D_SOURCE + `NUM_CLUSTER_DEPTH)

`define SHAREDMEM_DEPTH 128

`define SHAREDMEM_NWAYS 1

`define SHAREDMEM_BLOCKWORDS /*`NUM_THREAD*/ `DCACHE_BLOCKWORDS
 
`define SHAREMEM_SIZE (`SHAREDMEM_DEPTH * `SHAREDMEM_BLOCKWORDS * 4)

`define SHAREMEM_NLANES `NUM_THREAD

`define SHAREMEM_NBANKS `DCACHE_BLOCKWORDS //`SHAREMEM_NLANES //no bigger than DCACHE_BLOCKWORDS

`define SHAREDMEM_BLOCKOFFSETBITS $clog2(`SHAREDMEM_BLOCKWORDS)

`define SHAREMEM_BANKIDXBITS $clog2(`SHAREMEM_NBANKS)

`define SHAREMEM_BANKOFFSET ((`SHAREDMEM_BLOCKOFFSETBITS > `SHAREMEM_BANKIDXBITS) ? (`SHAREDMEM_BLOCKOFFSETBITS - `SHAREMEM_BANKIDXBITS) : 1 )

`define L2CACHE_NSETS 2

`define L2CACHE_NWAYS 4

`define L2CACHE_BLOCKWORDS `DCACHE_BLOCKWORDS

`define L2CACHE_WRITEBYTES 1

`define L2CACHE_MEMCYCLES 4

`define L2CACHE_PORTFACTOR 2 

`define L1CACHE_SOURCEBITS (3 + $clog2(`DCACHE_MSHRENTRY) + $clog2(`DCACHE_NSETS))

`define NUMBER_CU `NUM_SM 

`define NUMBER_RES_TABLE 1 //<NUMBER_CU

`define NUMBER_VGPR_SLOTS `NUM_VGPR

`define NUMBER_SGPR_SLOTS `NUM_SGPR

`define NUMBER_LDS_SLOTS 131072 //128kB -> 2^17

`define NUMBER_WF_SLOTS `NUM_BLOCK //the max number of wg in a cu

`define WG_ID_WIDTH 32 

`define WG_NUM_MAX `NUMBER_WF_SLOTS * `NUMBER_CU

`define WF_COUNT_MAX `NUM_WARP //the max number of wf in a cu

`define WF_COUNT_PER_WG_MAX `NUM_WARP_IN_A_BLOCK //the max number of wf in a wg

`define GDS_SIZE 1024 

`define NUMBER_ENTRIES 2 //This parameter should be a power of 2

`define WAVE_ITEM_WIDTH 4

`define MEM_ADDR_WIDTH 32

`define NUM_SCHEDULER 1 //only used for multi-cta-scheduler

`define RES_TABLE_ADDR_WIDTH (($clog2(`NUMBER_RES_TABLE) > 1) ? ($clog2(`NUMBER_RES_TABLE)) : 1)

`define CU_ID_WIDTH (($clog2(`NUMBER_CU) >= (`RES_TABLE_ADDR_WIDTH + 1)) ? ($clog2(`NUMBER_CU) + 1) : (`RES_TABLE_ADDR_WIDTH + 1))

`define VGPR_ID_WIDTH 11

`define SGPR_ID_WIDTH 11

`define LDS_ID_WIDTH $clog2(`NUMBER_LDS_SLOTS)

`define WG_SLOT_ID_WIDTH $clog2(`NUMBER_WF_SLOTS)

`define WF_COUNT_WIDTH 3

`define WF_COUNT_WIDTH_PER_WG ($clog2(`WF_COUNT_PER_WG_MAX) + 1)

`define GDS_ID_WIDTH $clog2(`GDS_SIZE)

`define ENTRY_ADDR_WIDTH $clog2(`NUMBER_ENTRIES)

`define TAG_WIDTH (`WG_SLOT_ID_WIDTH + `WF_COUNT_WIDTH_PER_WG)

`define INIT_MAX_WG_COUNT `NUMBER_WF_SLOTS

`define NUM_SCHEDULER_WIDTH $clog2(`NUM_SCHEDULER)

`define NUM_WG_X 2048 //the max number of wg in kernel

`define NUM_WG_Y 2048

`define NUM_WG_Z 2048

`define WG_SIZE_X_WIDTH $clog2(`NUM_WG_X)

`define WG_SIZE_Y_WIDTH $clog2(`NUM_WG_Y)

`define WG_SIZE_Z_WIDTH $clog2(`NUM_WG_Z)

`define LENGTH_REPLACE_TIME 10

`define TC_DIM_M 2

`define TC_DIM_N 2

`define TC_DIM_K 2

//AXI4 parameter 
`define AXI_ADDR_WIDTH   32 

`define AXI_DATA_WIDTH   64

`define AXI_ID_WIDTH     4   

`define AXI_LEN_WIDTH    8  

`define AXI_SIZE_WIDTH   3 

`define AXI_BURST_WIDTH  2

`define AXI_CACHE_WIDTH  4

`define AXI_PROT_WIDTH   3

`define AXI_QOS_WIDTH    4

`define AXI_REGION_WIDTH 4

`define AXI_USER_WIDTH   32 

`define AXI_ATOP_WIDTH   6 

`define AXI_RESP_WIDTH   2 

//AXI4LITE parameter
`define AXILITE_ADDR_WIDTH 32

`define AXILITE_DATA_WIDTH 32

`define AXILITE_PROT_WIDTH 3 

`define AXILITE_RESP_WIDTH 2 

`define AXILITE_STRB_WIDTH 4

//EXECUTION
`define NUMBER_ALU `NUM_THREAD

`define NUMBER_MUL `NUM_THREAD

`define NUMBER_FPU `NUM_THREAD

//l1dcache_define
`define TLAOP_GET          3'd4

`define TLAOP_PUTFULL      3'd0

`define TLAOP_PUTPART      3'd1

`define TLAOP_FLUSH        3'd5

`define TLAPARAM_FLUSH     3'd0

`define TLAPARAM_INV       3'd1

`define TLAOP_ARITH        3'd2

`define TLAOP_LOGIC        3'd3

`define TLAPARAM_ARITHMIN  3'd0

`define TLAPARAM_ARITHMAX  3'd1

`define TLAPARAM_ARITHMINU 3'd2

`define TLAPARAM_ARITHMAXU 3'd3

`define TLAPARAM_ARITHADD  3'd4

`define TLAPARAM_LOGICXOR  3'd0

`define TLAPARAM_LOGICOR   3'd1

`define TLAPARAM_LOGICAND  3'd2

`define TLAPARAM_LOGICSWAP 3'd3

`define TLAPARAM_LRSC      3'd1


//l2cache_define
`define L2CACHE_LEVEL 2

`define L2CACHE_BLOCKBYTES        (`L2CACHE_BLOCKWORDS * 4)

`define L2CACHE_BEATBYTES         (`L2CACHE_BLOCKWORDS * 4)

`define L2CACHE_BLOCKS            (`L2CACHE_NWAYS * `L2CACHE_NSETS )

`define L2CACHE_SIZEBYTES         (`L2CACHE_BLOCKS * `L2CACHE_BLOCKBYTES)

`define L2CACHE_BLOCKBEATS        (`L2CACHE_BLOCKBYTES / `L2CACHE_BEATBYTES) // 8/8 = 1

`define L2CACHE_NUM_WARP          `NUM_WARP

`define L2CACHE_NUM_SM            `NUM_SM

`define L2CACHE_NUM_SM_IN_CLUSTER `NUM_SM_IN_CLUSTER  //2

`define L2CACHE_NUM_CLUSTER       `NUM_CLUSTER //1

`define OP_BITS                   3

`define PARAM_BITS                3   //3+lg2(4)+lg2(32）+lg2(2) + 0+1 = 3+2+5+1 +1 =12

`define SOURCE_BITS               14

`define	URCE_S_BITS				(3 + $clog2(`DCACHE_MSHRENTRY) + $clog2(`DCACHE_NSETS) + $clog2(`L2CACHE_NUM_SM_IN_CLUSTER) + $clog2(`NUM_CACHE_IN_SM) + 1)

`define	URCE_L_BITS				(3 + $clog2(`DCACHE_MSHRENTRY) + $clog2(`DCACHE_NSETS) + $clog2(`L2CACHE_NUM_SM_IN_CLUSTER) + $clog2(`NUM_CACHE_IN_SM) + $clog2(`NUM_CLUSTER) + 1)

`define DATA_BITS                 (`L2CACHE_BEATBYTES * 8)

`define MASK_BITS                 128

`define SIZE_BITS                 ($clog2(`L2CACHE_BEATBYTES))

`define MSHRS                     ((`L2CACHE_MEMCYCLES + `L2CACHE_BLOCKBEATS - 1) / `L2CACHE_BLOCKBEATS )

`define SECONDARY                 (((`MSHRS > (`L2CACHE_MEMCYCLES - `MSHRS)) ? `MSHRS : (`L2CACHE_MEMCYCLES - `MSHRS)))

`define PUTLISTS                  `L2CACHE_MEMCYCLES

`define PUTBEATS                  ( (((2 * `L2CACHE_BLOCKBEATS) > `L2CACHE_MEMCYCLES) ? (2 * `L2CACHE_BLOCKBEATS) : `L2CACHE_MEMCYCLES))

`define RELLISTS                  2   //2*1 = 16 > 4 ? 2* 1 ：4

`define RELBEATS                  (`RELLISTS * `L2CACHE_BLOCKBEATS)

`define ADDRESS_BITS              32

`define WAY_BITS                  ($clog2(`L2CACHE_NWAYS)     )

`define SET_BITS                  ($clog2(`L2CACHE_NSETS)     )

`define OFFSET_BITS               ($clog2(`L2CACHE_BLOCKBYTES))

`define L2C_BITS                  $clog2(`NUM_L2CACHE) //`define  L2C_BITS = $clog2(`NUM_L2CACHE)

`define TAG_BITS                  (`ADDRESS_BITS - `SET_BITS - `OFFSET_BITS - `L2C_BITS)

`define PUT_BITS                  ($clog2(`PUTLISTS))

`define INNER_MASK_BITS           (`L2CACHE_BEATBYTES / `L2CACHE_WRITEBYTES)

`define OUTER_MASK_BITS           (`L2CACHE_BEATBYTES / `L2CACHE_WRITEBYTES)

//tilelink interface opcode
`define       PUTFULLDATA           3'd0         //                            => AccessAck

`define       PUTPARTIALDATA        3'd1         //                            => AccessAck

`define       ARITHMETICDATA        3'd2         //                            => AccessAckData

`define       LOGICALDATA           3'd3         //                            => AccessAckData

`define       GET                   3'd4         //                            => AccessAckData

`define       HINT                  3'd5         //                            => HintAck

`define       ACQUIREBLOCK          3'd6         //                            => Grant[Data]

`define       ACQUIREPERM           3'd7         //                            => Grant[Data]

`define       PROBE                 3'd6         //                            => ProbeAck[Data]

`define       ACCESSACK             3'd0         //                   

`define       ACCESSACKDATA         3'd1         //                   

`define       HINTACK               3'd2         //                   

`define       PROBEACK              3'd4         //               

`define       PROBEACKDATA          3'd5         //               

`define       RELEASE               3'd6         //                            => ReleaseAck

`define       RELEASEDATA           3'd7         //                            => ReleaseAck

`define       GRANT                 3'd4         //                            => GrantAck

`define       GRANTDATA             3'd5         //                            => GrantAck

`define       RELEASEACK            3'd6         //                    

`define       GRANTACK              3'd0         // 


module gpgpu_axi_top(
  input                            clk                ,
  input                            rst_n              ,

  output                           s_axilite_awready_o,
  input                            s_axilite_awvalid_i,
  input  [`AXILITE_ADDR_WIDTH-1:0] s_axilite_awaddr_i ,
  input  [`AXILITE_PROT_WIDTH-1:0] s_axilite_awprot_i ,

  output                           s_axilite_wready_o ,
  input                            s_axilite_wvalid_i ,
  input  [`AXILITE_DATA_WIDTH-1:0] s_axilite_wdata_i  ,
  input  [`AXILITE_STRB_WIDTH-1:0] s_axilite_wstrb_i  ,
  input                            s_axilite_bready_i ,
  output                           s_axilite_bvalid_o ,
  output [`AXILITE_RESP_WIDTH-1:0] s_axilite_bresp_o  ,

  output                           s_axilite_arready_o,
  input                            s_axilite_arvalid_i,
  input  [`AXILITE_ADDR_WIDTH-1:0] s_axilite_araddr_i ,
  input  [`AXILITE_PROT_WIDTH-1:0] s_axilite_arprot_i ,

  input                            s_axilite_rready_i ,
  output [`AXILITE_DATA_WIDTH-1:0] s_axilite_rdata_o  ,
  output [`AXILITE_RESP_WIDTH-1:0] s_axilite_rresp_o  ,
  output                           s_axilite_rvalid_o ,
  
  input                            m_axi_awready_i    ,
  output                           m_axi_awvalid_o    ,
  output [`AXI_ID_WIDTH-1:0]       m_axi_awid_o       ,
  output [`AXI_ADDR_WIDTH-1:0]     m_axi_awaddr_o     ,
  output [`AXI_LEN_WIDTH-1:0]      m_axi_awlen_o      ,
  output [`AXI_SIZE_WIDTH-1:0]     m_axi_awsize_o     ,
  output [`AXI_BURST_WIDTH-1:0]    m_axi_awburst_o    ,
  output                           m_axi_awlock_o     ,
  output [`AXI_CACHE_WIDTH-1:0]    m_axi_awcache_o    ,
  output [`AXI_PROT_WIDTH-1:0]     m_axi_awprot_o     ,
  output [`AXI_QOS_WIDTH-1:0]      m_axi_awqos_o      ,
  output [`AXI_REGION_WIDTH-1:0]   m_axi_awregion_o   ,
  output [`AXI_ATOP_WIDTH-1:0]     m_axi_awatop_o     ,
  output [`AXI_USER_WIDTH-1:0]     m_axi_awuser_o     ,
  
 input                            m_axi_wready_i     ,
  output                           m_axi_wvalid_o     ,
  output [`AXI_DATA_WIDTH-1:0]     m_axi_wdata_o      ,
  output [(`AXI_DATA_WIDTH/8)-1:0] m_axi_wstrb_o      ,
  output                           m_axi_wlast_o      ,
  output [`AXI_USER_WIDTH-1:0]     m_axi_wuser_o      ,

  output                           m_axi_bready_o     ,
  input                            m_axi_bvalid_i     ,
  input  [`AXI_ID_WIDTH-1:0]       m_axi_bid_i        ,
  input  [`AXI_RESP_WIDTH-1:0]     m_axi_bresp_i      ,
  input  [`AXI_USER_WIDTH-1:0]     m_axi_buser_i      ,
  
  input                            m_axi_arready_i    ,
  output                           m_axi_arvalid_o    ,
  output [`AXI_ID_WIDTH-1:0]       m_axi_arid_o       ,
  output [`AXI_ADDR_WIDTH-1:0]     m_axi_araddr_o     ,
  output [`AXI_LEN_WIDTH-1:0]      m_axi_arlen_o      ,
  output [`AXI_SIZE_WIDTH-1:0]     m_axi_arsize_o     ,
  output [`AXI_BURST_WIDTH-1:0]    m_axi_arburst_o    ,
  output                           m_axi_arlock_o     ,
  output [`AXI_CACHE_WIDTH-1:0]    m_axi_arcache_o    ,
  output [`AXI_PROT_WIDTH-1:0]     m_axi_arprot_o     ,
  output [`AXI_QOS_WIDTH-1:0]      m_axi_arqos_o      ,
  output [`AXI_REGION_WIDTH-1:0]   m_axi_arregion_o   ,
  output [`AXI_USER_WIDTH-1:0]     m_axi_aruser_o     ,
  
  output                           m_axi_rready_o     ,
  input                            m_axi_rvalid_i     ,
  input  [`AXI_ID_WIDTH-1:0]       m_axi_rid_i        ,
  input  [`AXI_DATA_WIDTH-1:0]     m_axi_rdata_i      ,
  input  [`AXI_RESP_WIDTH-1:0]     m_axi_rresp_i      ,
  input                            m_axi_rlast_i      ,
  input  [`AXI_USER_WIDTH-1:0]     m_axi_ruser_i       
  ); 
  
  wire host_req_valid;
  wire host_req_ready;
  wire [`WG_ID_WIDTH-1:0] host_req_wg_id;
  wire [`WF_COUNT_WIDTH-1:0] host_req_num_wf;
  wire [`WAVE_ITEM_WIDTH-1:0] host_req_wf_size;
  wire [`MEM_ADDR_WIDTH-1:0] host_req_start_pc;
  wire [`WG_SIZE_X_WIDTH*3-1:0] host_req_kernel_size_3d;
  wire [`MEM_ADDR_WIDTH-1:0] host_req_pds_baseaddr;
  wire [`MEM_ADDR_WIDTH-1:0] host_req_csr_knl;
  wire [`VGPR_ID_WIDTH:0] host_req_vgpr_size_total;
  wire [`SGPR_ID_WIDTH:0] host_req_sgpr_size_total;
  wire [`LDS_ID_WIDTH:0] host_req_lds_size_total;
  //wire [`GDS_ID_WIDTH:0] host_req_gds_size_total;
  wire [`VGPR_ID_WIDTH:0] host_req_vgpr_size_per_wf;
  wire [`SGPR_ID_WIDTH:0] host_req_sgpr_size_per_wf;
  wire [15:0] host_req_pds_size_per_wf;
  wire [`MEM_ADDR_WIDTH-1:0] host_req_gds_baseaddr;
  
  wire host_rsp_valid;
  wire host_rsp_ready;
  wire [`WG_ID_WIDTH-1:0] host_rsp_inflight_wg_buffer_host_wf_done_wg_id;
  
  wire busy_o;               
  wire req_i;                
  wire type_i;               
  wire [3:0] amo_i;                
  wire gnt_o;                
  wire [`AXI_ADDR_WIDTH-1:0] addr_i;               
  wire we_i;                 
  wire [(1024/`AXI_DATA_WIDTH)-1:0][`AXI_DATA_WIDTH-1:0] wdata_i;              
  wire [(1024/`AXI_DATA_WIDTH)-1:0][(`AXI_DATA_WIDTH/8)-1:0] be_i;                 
  wire [2:0] size_i;               
  wire [`AXI_ID_WIDTH-1:0] id_i;                 
  wire valid_o;             
  wire [(1024/`AXI_DATA_WIDTH)-1:0][`AXI_DATA_WIDTH-1:0] rdata_o;              
  wire [`AXI_ID_WIDTH-1:0] id_o;                 
  wire [`AXI_DATA_WIDTH-1:0] critical_word_o;      
  wire critical_word_valid_o;
  
    wire [`NUM_L2CACHE-1:0] top_out_a_valid;
  wire [`NUM_L2CACHE-1:0] top_out_a_ready;
  wire [`NUM_L2CACHE*`OP_BITS-1:0] top_out_a_opcode;
  //wire [`NUM_L2CACHE*`SIZE_BITS-1:0] top_out_a_size;
  wire [`NUM_L2CACHE*`SOURCE_BITS-1:0] top_out_a_source;
  wire [`NUM_L2CACHE*`ADDRESS_BITS-1:0] top_out_a_address;
  wire [`NUM_L2CACHE*`MASK_BITS-1:0] top_out_a_mask;
  wire [`NUM_L2CACHE*`DATA_BITS-1:0] top_out_a_data;
  //wire [`NUM_L2CACHE*3-1:0] top_out_a_param;
  
  wire [`NUM_L2CACHE-1:0] top_out_d_valid;
  //wire [`NUM_L2CACHE-1:0] top_out_d_ready;
  wire [`NUM_L2CACHE*`OP_BITS-1:0] top_out_d_opcode;
  //wire [`NUM_L2CACHE*`SIZE_BITS-1:0] top_out_d_size;
  wire [`NUM_L2CACHE*`SOURCE_BITS-1:0] top_out_d_source;
  wire [`NUM_L2CACHE*`DATA_BITS-1:0] top_out_d_data;
  //wire [`NUM_L2CACHE*3-1:0] top_out_d_param;

  reg [`OP_BITS-1:0] mem_rsp_opcode;
  reg [`SIZE_BITS-1:0] mem_rsp_source;
  reg [`DATA_BITS-1:0] l2cache_req_data;
  reg [`MASK_BITS-1:0] l2cache_req_mask;
  
    always @(posedge clk or negedge rst_n) begin
    if(!rst_n) begin
      mem_rsp_opcode <= {`OP_BITS{1'd0}};
      mem_rsp_source <= {`SIZE_BITS{1'd0}};
    end 
    else begin
      mem_rsp_opcode <= (m_axi_rvalid_i) ? 'h1 : ((m_axi_bvalid_i) ? 'h0 : mem_rsp_opcode); //opcode==1 read,opcode==0 write
      mem_rsp_source <= (m_axi_rvalid_i) ? m_axi_rid_i : ((m_axi_bvalid_i) ? m_axi_bid_i : mem_rsp_source);
    end 
  end 

  always @(posedge clk or negedge rst_n) begin
    if(!rst_n) begin
      l2cache_req_data <= {`DATA_BITS{1'd0}}; 
      l2cache_req_mask <= {`MASK_BITS{1'd0}}; 
    end
    else begin
      l2cache_req_data <= (top_out_a_valid) ? top_out_a_data : l2cache_req_data; 
      l2cache_req_mask <= (top_out_a_valid) ? top_out_a_mask : l2cache_req_mask;
    end 
  end 
  
    assign req_i = top_out_a_valid;  
  assign top_out_a_ready = !busy_o; //there are no read or write in progress
  assign type_i = 1'd1; //0->single req  1->cacheline req
  assign amo_i = 4'd0;
  assign addr_i = top_out_a_address;
  assign we_i = (top_out_a_opcode != 'h4); //opcode==0 write,opcode==4 read
  assign wdata_i = (top_out_a_valid && top_out_a_ready && gnt_o) ? top_out_a_data : l2cache_req_data;
  assign be_i =  (top_out_a_valid && top_out_a_ready && gnt_o) ? top_out_a_mask : l2cache_req_mask;
  assign size_i = 3'd3; //8bytes
  assign id_i = top_out_a_source;

  assign top_out_d_valid = valid_o;
  assign top_out_d_opcode = mem_rsp_opcode; 
  //assign top_out_d_size = 'h0; //dont care
  assign top_out_d_source = mem_rsp_source;
  assign top_out_d_data = rdata_o;
  //assign top_out_d_param = 'h0; //dont care
  
  axi4lite_2_cta #(
    .AXILITE_ADDR_WIDTH(`AXILITE_ADDR_WIDTH),
    .AXILITE_DATA_WIDTH(`AXILITE_DATA_WIDTH),
    .AXILITE_PROT_WIDTH(`AXILITE_PROT_WIDTH),
    .AXILITE_RESP_WIDTH(`AXILITE_RESP_WIDTH),  
    .AXILITE_STRB_WIDTH(`AXILITE_STRB_WIDTH)
    ) axi2cta(
  .clk                                             (clk                                           ),
    .rst_n                                           (rst_n                                         ),

    .host_rsp_ready_o                                (host_rsp_ready                                ),
    .host_rsp_valid_i                                (host_rsp_valid                                ),
    .host_rsp_inflight_wg_buffer_host_wf_done_wg_id_i(host_rsp_inflight_wg_buffer_host_wf_done_wg_id),

   .host_req_ready_i                                (host_req_ready                                ),
    .host_req_valid_o                                (host_req_valid                                ),
    .host_req_wg_id_o                                (host_req_wg_id                                ),
    .host_req_num_wf_o                               (host_req_num_wf                               ),
    .host_req_wf_size_o                              (host_req_wf_size                              ),
    
    .host_req_start_pc_o                             (host_req_start_pc                             ),
    .host_req_kernel_size_3d_o                       (host_req_kernel_size_3d                       ),
    .host_req_pds_baseaddr_o                         (host_req_pds_baseaddr                         ),
    .host_req_csr_knl_o                              (host_req_csr_knl                              ),
    .host_req_vgpr_size_total_o                      (host_req_vgpr_size_total                      ),
    .host_req_sgpr_size_total_o                      (host_req_sgpr_size_total                      ),
    .host_req_lds_size_total_o                       (host_req_lds_size_total                       ),

    //.host_req_gds_size_total_o                       (host_req_gds_size_total                       ),
    .host_req_vgpr_size_per_wf_o                     (host_req_vgpr_size_per_wf                     ),
    .host_req_sgpr_size_per_wf_o                     (host_req_sgpr_size_per_wf                     ),
    .host_req_gds_baseaddr_o                         (host_req_gds_baseaddr                         ),
    .host_req_pds_size_per_wf_o         (host_req_pds_size_per_wf),

    .s_axilite_awready_o                             (s_axilite_awready_o                           ),
    .s_axilite_awvalid_i                             (s_axilite_awvalid_i                           ),
    .s_axilite_awaddr_i                              (s_axilite_awaddr_i                            ),
    .s_axilite_awprot_i                              (s_axilite_awprot_i                            ),

    .s_axilite_wready_o                              (s_axilite_wready_o                            ),
    .s_axilite_wvalid_i                              (s_axilite_wvalid_i                            ),
    .s_axilite_wdata_i                               (s_axilite_wdata_i                             ),
    .s_axilite_wstrb_i                               (s_axilite_wstrb_i                             ),

   .s_axilite_bready_i                              (s_axilite_bready_i                            ),
    .s_axilite_bvalid_o                              (s_axilite_bvalid_o                            ),
    .s_axilite_bresp_o                               (s_axilite_bresp_o                             ),

    .s_axilite_arready_o                             (s_axilite_arready_o                           ),
    .s_axilite_arvalid_i                             (s_axilite_arvalid_i                           ),
    .s_axilite_araddr_i                              (s_axilite_araddr_i                            ),
    .s_axilite_arprot_i                              (s_axilite_arprot_i                            ),

   .s_axilite_rready_i                              (s_axilite_rready_i                            ),
    .s_axilite_rdata_o                               (s_axilite_rdata_o                             ),
    .s_axilite_rresp_o                               (s_axilite_rresp_o                             ),
    .s_axilite_rvalid_o                              (s_axilite_rvalid_o                            )
    );
    
     GPU gpgpu_top(
    .clock                                             (clk                                           ),
    .reset                                           (~rst_n                                         ),
       
   .io_host_req_valid                                (host_req_valid                                ),
    .io_host_req_ready                                (host_req_ready                                ),
    .io_host_req_bits_host_wg_id                                (host_req_wg_id                                ),
    .io_host_req_bits_host_num_wf                               (host_req_num_wf                               ),
    .io_host_req_bits_host_wf_size                              (host_req_wf_size                              ),
    
   .io_host_req_bits_host_start_pc                             (host_req_start_pc                             ),
    .io_host_req_bits_host_kernel_size_3d_0                       (host_req_kernel_size_3d[(`WG_SIZE_X_WIDTH*(0+1)-1)-:`WG_SIZE_X_WIDTH]                       ),
    .io_host_req_bits_host_kernel_size_3d_1                       (host_req_kernel_size_3d[(`WG_SIZE_X_WIDTH*(1+1)-1)-:`WG_SIZE_X_WIDTH]                       ),
    .io_host_req_bits_host_kernel_size_3d_2                       (host_req_kernel_size_3d[(`WG_SIZE_X_WIDTH*(2+1)-1)-:`WG_SIZE_X_WIDTH]                       ),
    .io_host_req_bits_host_pds_baseaddr                         (host_req_pds_baseaddr                         ),
   
    .io_host_req_bits_host_csr_knl                              (host_req_csr_knl                              ),
    .io_host_req_bits_host_vgpr_size_total                      (host_req_vgpr_size_total                      ),
    .io_host_req_bits_host_sgpr_size_total                      (host_req_sgpr_size_total                      ),
    .io_host_req_bits_host_lds_size_total                       (host_req_lds_size_total                       ),
    
    //.host_req_gds_size_total_i    //                   (host_req_gds_size_total                       ),
    .io_host_req_bits_host_vgpr_size_per_wf                     (host_req_vgpr_size_per_wf                     ),
    .io_host_req_bits_host_sgpr_size_per_wf                     (host_req_sgpr_size_per_wf                     ),
    .io_host_req_bits_host_gds_baseaddr                         (host_req_gds_baseaddr                         ),
    
     .io_host_req_bits_host_pds_size_per_wf          (host_req_pds_size_per_wf),                                                                                 
    .io_host_rsp_ready                                (host_rsp_ready                                ),
    .io_host_rsp_valid                                (host_rsp_valid                                ),
    .io_host_rsp_bits_inflight_wg_buffer_host_wf_done_wg_id(host_rsp_inflight_wg_buffer_host_wf_done_wg_id),
   
         .io_out_a_0_valid                                   (top_out_a_valid                               ),
    .io_out_a_0_ready                                   (top_out_a_ready                               ),
    .io_out_a_0_bits_opcode                                  (top_out_a_opcode                              ),
    //.out_a_size_o   //                                 (top_out_a_size                                ),
    
     .io_out_a_0_bits_source                                  (top_out_a_source                              ),
    .io_out_a_0_bits_address                                 (top_out_a_address                             ),
    .io_out_a_0_bits_mask                                    (top_out_a_mask                                ),
    .io_out_a_0_bits_data                                    (top_out_a_data                                ),
    //.out_a_param_o  //                                 (top_out_a_param                               ),

   .io_out_d_0_valid                                   (top_out_d_valid                               ),
    //.out_d_ready_o//                                   (top_out_d_ready                               ),
    .io_out_d_0_bits_opcode                                  (top_out_d_opcode                              ),
    //.out_d_size_i  //                                  (top_out_d_size                                ),
    .io_out_d_0_bits_source                                  (top_out_d_source                              ),
    .io_out_d_0_bits_data                                    (top_out_d_data                                )
    //.out_d_param_i  //                                 (top_out_d_param                               )
    );
    
  axi4_adapter_top #(
    .DATA_WIDTH            (1024                     ),
    .CACHELINE_BYTE_OFFSET (3                      ),
    .AXI_ADDR_WIDTH        (`AXI_ADDR_WIDTH        ),
    .AXI_DATA_WIDTH        (`AXI_DATA_WIDTH        ),
    .AXI_ID_WIDTH          (`AXI_ID_WIDTH          ),
    .AXI_LEN_WIDTH         (`AXI_LEN_WIDTH         ),
    .AXI_SIZE_WIDTH        (`AXI_SIZE_WIDTH        ),
    .AXI_BURST_WIDTH       (`AXI_BURST_WIDTH       ),
    .AXI_CACHE_WIDTH       (`AXI_CACHE_WIDTH       ),
    .AXI_PROT_WIDTH        (`AXI_PROT_WIDTH        ),
    .AXI_QOS_WIDTH         (`AXI_QOS_WIDTH         ),
    .AXI_REGION_WIDTH      (`AXI_REGION_WIDTH      ),
    .AXI_USER_WIDTH        (`AXI_USER_WIDTH        ),
    .AXI_ATOP_WIDTH        (`AXI_ATOP_WIDTH        ),
    .AXI_RESP_WIDTH        (`AXI_RESP_WIDTH        ) 
    ) l2_2_mem(
    .clk                  (clk                  ), 
    .rst_n                (rst_n                ),

    .busy_o               (busy_o               ),
    .req_i                (req_i                ),
    .type_i               (type_i               ),
    .amo_i                (amo_i                ),
    .gnt_o                (gnt_o                ),
    .addr_i               (addr_i               ),
    .we_i                 (we_i                 ),
    .wdata_i              (wdata_i              ),
    .be_i                 (be_i                 ),
    .size_i               (size_i               ),
    .id_i                 (id_i                 ),
    
       .valid_o              (valid_o              ),
    .rdata_o              (rdata_o              ),
    .id_o                 (id_o                 ),
                                                
    .critical_word_o      (critical_word_o      ),
    .critical_word_valid_o(critical_word_valid_o),
    
      .m_axi_awready_i      (m_axi_awready_i      ),
    .m_axi_awvalid_o      (m_axi_awvalid_o      ),
    .m_axi_awid_o         (m_axi_awid_o         ),
    .m_axi_awaddr_o       (m_axi_awaddr_o       ),
    .m_axi_awlen_o        (m_axi_awlen_o        ),
    .m_axi_awsize_o       (m_axi_awsize_o       ),
    .m_axi_awburst_o      (m_axi_awburst_o      ),
    .m_axi_awlock_o       (m_axi_awlock_o       ),
    .m_axi_awcache_o      (m_axi_awcache_o      ),
    .m_axi_awprot_o       (m_axi_awprot_o       ),
    .m_axi_awqos_o        (m_axi_awqos_o        ),
    .m_axi_awregion_o     (m_axi_awregion_o     ),
    .m_axi_awatop_o       (m_axi_awatop_o       ),
    .m_axi_awuser_o       (m_axi_awuser_o       ),
    
        .m_axi_wready_i       (m_axi_wready_i       ),
    .m_axi_wvalid_o       (m_axi_wvalid_o       ),
    .m_axi_wdata_o        (m_axi_wdata_o        ),
    .m_axi_wstrb_o        (m_axi_wstrb_o        ),
    .m_axi_wlast_o        (m_axi_wlast_o        ),
    .m_axi_wuser_o        (m_axi_wuser_o        ),

     .m_axi_bready_o       (m_axi_bready_o       ),
    .m_axi_bvalid_i       (m_axi_bvalid_i       ),
    .m_axi_bid_i          (m_axi_bid_i          ),
    .m_axi_bresp_i        (m_axi_bresp_i        ),
    .m_axi_buser_i        (m_axi_buser_i        ),
    
    .m_axi_arready_i      (m_axi_arready_i      ),
    .m_axi_arvalid_o      (m_axi_arvalid_o      ),
    .m_axi_arid_o         (m_axi_arid_o         ),
    .m_axi_araddr_o       (m_axi_araddr_o       ),
    .m_axi_arlen_o        (m_axi_arlen_o        ),
    .m_axi_arsize_o       (m_axi_arsize_o       ),
    .m_axi_arburst_o      (m_axi_arburst_o      ),
    .m_axi_arlock_o       (m_axi_arlock_o       ),
    
    .m_axi_arcache_o      (m_axi_arcache_o      ),
    .m_axi_arprot_o       (m_axi_arprot_o       ),
    .m_axi_arqos_o        (m_axi_arqos_o        ),
    .m_axi_arregion_o     (m_axi_arregion_o     ),
    .m_axi_aruser_o       (m_axi_aruser_o       ),
    
    .m_axi_rready_o       (m_axi_rready_o       ),
    .m_axi_rvalid_i       (m_axi_rvalid_i       ),
    .m_axi_rid_i          (m_axi_rid_i          ),
    .m_axi_rdata_i        (m_axi_rdata_i        ),
    .m_axi_rresp_i        (m_axi_rresp_i        ),
    .m_axi_rlast_i        (m_axi_rlast_i        ),
    .m_axi_ruser_i        (m_axi_ruser_i        )
    );

endmodule
