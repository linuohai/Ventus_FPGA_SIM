// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module FracDivSqrt(	// ventus/src/pipeline/FloatDivSqrt.scala:16:7
  input         clock,	// ventus/src/pipeline/FloatDivSqrt.scala:16:7
                reset,	// ventus/src/pipeline/FloatDivSqrt.scala:16:7
                io_in_valid,	// ventus/src/pipeline/FloatDivSqrt.scala:17:14
  input  [27:0] io_in_bits_a,	// ventus/src/pipeline/FloatDivSqrt.scala:17:14
                io_in_bits_b,	// ventus/src/pipeline/FloatDivSqrt.scala:17:14
  input         io_in_bits_isDiv,	// ventus/src/pipeline/FloatDivSqrt.scala:17:14
  output        io_out_valid,	// ventus/src/pipeline/FloatDivSqrt.scala:17:14
  output [27:0] io_out_bits_quot,	// ventus/src/pipeline/FloatDivSqrt.scala:17:14
  output        io_out_bits_isZeroRem	// ventus/src/pipeline/FloatDivSqrt.scala:17:14
);

  reg  [1:0]  state;	// ventus/src/pipeline/FloatDivSqrt.scala:33:22
  wire [31:0] _csa_io_out_0;	// ventus/src/pipeline/FloatDivSqrt.scala:57:19
  wire [31:0] _csa_io_out_1;	// ventus/src/pipeline/FloatDivSqrt.scala:57:19
  wire [30:0] _conv_io_QM;	// ventus/src/pipeline/FloatDivSqrt.scala:56:20
  wire [30:0] _conv_io_Q;	// ventus/src/pipeline/FloatDivSqrt.scala:56:20
  wire [30:0] _conv_io_F;	// ventus/src/pipeline/FloatDivSqrt.scala:56:20
  wire [2:0]  _table_io_q;	// ventus/src/pipeline/FloatDivSqrt.scala:55:21
  wire        _conv_io_resetDiv_T = ~(|state) & io_in_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/pipeline/FloatDivSqrt.scala:33:22, :35:38
  reg         isDivReg;	// ventus/src/pipeline/FloatDivSqrt.scala:29:27
  reg  [27:0] divisor;	// ventus/src/pipeline/FloatDivSqrt.scala:30:26
  wire        _conv_io_enable_T = state == 2'h1;	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :33:22, :35:56
  reg  [3:0]  cnt;	// ventus/src/pipeline/FloatDivSqrt.scala:35:22
  reg         firstCycle;	// ventus/src/pipeline/FloatDivSqrt.scala:38:27
  reg  [31:0] ws;	// ventus/src/pipeline/FloatDivSqrt.scala:53:19
  reg  [31:0] wc;	// ventus/src/pipeline/FloatDivSqrt.scala:53:19
  reg         remSignReg;	// ventus/src/pipeline/FloatDivSqrt.scala:105:29
  reg         isZeroRemReg;	// ventus/src/pipeline/FloatDivSqrt.scala:106:31
  wire [30:0] _io_out_bits_quot_T_2 =
    (remSignReg ? _conv_io_QM : _conv_io_Q) >> ~isDivReg;	// ventus/src/pipeline/FloatDivSqrt.scala:29:27, :56:20, :105:29, :109:{26,62,65}
  always @(posedge clock) begin	// ventus/src/pipeline/FloatDivSqrt.scala:16:7
    automatic logic [3:0] _cnt_next_T_1;	// ventus/src/pipeline/FloatDivSqrt.scala:36:50
    automatic logic [3:0] cnt_next;	// ventus/src/pipeline/FloatDivSqrt.scala:36:18
    _cnt_next_T_1 = cnt - 4'h1;	// ventus/src/pipeline/FloatDivSqrt.scala:35:22, :36:50
    cnt_next = (|state) ? _cnt_next_T_1 : 4'hE;	// ventus/src/pipeline/FloatDivSqrt.scala:33:22, :35:38, :36:{18,50}
    if (_conv_io_resetDiv_T) begin	// src/main/scala/chisel3/util/Decoupled.scala:51:35
      isDivReg <= io_in_bits_isDiv;	// ventus/src/pipeline/FloatDivSqrt.scala:29:27
      divisor <= io_in_bits_b;	// ventus/src/pipeline/FloatDivSqrt.scala:30:26
      ws <=
        io_in_bits_isDiv
          ? {4'h0, io_in_bits_a}
          : {{2'h0, io_in_bits_a} - 30'h10000000, 2'h0};	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :36:50, :53:19, :94:{23,42}, :98:14
      wc <= 32'h0;	// ventus/src/pipeline/FloatDivSqrt.scala:53:19, :81:51
    end
    else if (_conv_io_enable_T) begin	// ventus/src/pipeline/FloatDivSqrt.scala:35:56
      ws <= (|cnt_next) ? {_csa_io_out_0[29:0], 2'h0} : _csa_io_out_0;	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :36:18, :45:20, :53:19, :57:19, :101:{14,59}
      wc <= (|cnt_next) ? {_csa_io_out_1[28:0], 3'h0} : {_csa_io_out_1[30:0], 1'h0};	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :36:{18,50}, :45:20, :53:19, :57:19, :102:{14,62}
    end
    if (~(|state) | _conv_io_enable_T) begin	// ventus/src/pipeline/FloatDivSqrt.scala:33:22, :35:{38,48,56}
      if (|state)	// ventus/src/pipeline/FloatDivSqrt.scala:33:22, :35:38
        cnt <= _cnt_next_T_1;	// ventus/src/pipeline/FloatDivSqrt.scala:35:22, :36:50
      else	// ventus/src/pipeline/FloatDivSqrt.scala:35:38
        cnt <= 4'hE;	// ventus/src/pipeline/FloatDivSqrt.scala:35:22, :36:18
    end
    firstCycle <= _conv_io_resetDiv_T;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/pipeline/FloatDivSqrt.scala:38:27
    if (state == 2'h2) begin	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :33:22, :105:55
      automatic logic [31:0] _rem_T;	// ventus/src/pipeline/FloatDivSqrt.scala:104:16
      _rem_T = ws + wc;	// ventus/src/pipeline/FloatDivSqrt.scala:53:19, :104:16
      remSignReg <= _rem_T[31];	// ventus/src/pipeline/FloatDivSqrt.scala:104:16, :105:{29,38}
      isZeroRemReg <= _rem_T == 32'h0;	// ventus/src/pipeline/FloatDivSqrt.scala:81:51, :104:16, :106:{31,35}
    end
    if (reset)	// ventus/src/pipeline/FloatDivSqrt.scala:16:7
      state <= 2'h0;	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :33:22
    else if (|state) begin	// ventus/src/pipeline/FloatDivSqrt.scala:33:22, :35:38
      if (state == 2'h1) begin	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :33:22, :40:16
        if (~(|cnt_next))	// ventus/src/pipeline/FloatDivSqrt.scala:36:18, :45:20
          state <= 2'h2;	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :33:22
      end
      else if (state == 2'h2)	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :33:22, :40:16
        state <= 2'h3;	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :33:22
      else if ((&state) & (&state))	// ventus/src/pipeline/FloatDivSqrt.scala:33:22, :40:16, :49:{24,32}, :108:25
        state <= 2'h0;	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :33:22
    end
    else if (_conv_io_resetDiv_T)	// src/main/scala/chisel3/util/Decoupled.scala:51:35
      state <= 2'h1;	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :33:22
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// ventus/src/pipeline/FloatDivSqrt.scala:16:7
    `ifdef FIRRTL_BEFORE_INITIAL	// ventus/src/pipeline/FloatDivSqrt.scala:16:7
      `FIRRTL_BEFORE_INITIAL	// ventus/src/pipeline/FloatDivSqrt.scala:16:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// ventus/src/pipeline/FloatDivSqrt.scala:16:7
      automatic logic [31:0] _RANDOM[0:3];	// ventus/src/pipeline/FloatDivSqrt.scala:16:7
      `ifdef INIT_RANDOM_PROLOG_	// ventus/src/pipeline/FloatDivSqrt.scala:16:7
        `INIT_RANDOM_PROLOG_	// ventus/src/pipeline/FloatDivSqrt.scala:16:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// ventus/src/pipeline/FloatDivSqrt.scala:16:7
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;	// ventus/src/pipeline/FloatDivSqrt.scala:16:7
        end	// ventus/src/pipeline/FloatDivSqrt.scala:16:7
        isDivReg = _RANDOM[2'h0][0];	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :29:27
        divisor = _RANDOM[2'h0][28:1];	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :29:27, :30:26
        state = _RANDOM[2'h0][30:29];	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :29:27, :33:22
        cnt = {_RANDOM[2'h0][31], _RANDOM[2'h1][2:0]};	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :29:27, :35:22
        firstCycle = _RANDOM[2'h1][3];	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :35:22, :38:27
        ws = {_RANDOM[2'h1][31:4], _RANDOM[2'h2][3:0]};	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :35:22, :53:19
        wc = {_RANDOM[2'h2][31:4], _RANDOM[2'h3][3:0]};	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :53:19
        remSignReg = _RANDOM[2'h3][4];	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :53:19, :105:29
        isZeroRemReg = _RANDOM[2'h3][5];	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :53:19, :106:31
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// ventus/src/pipeline/FloatDivSqrt.scala:16:7
      `FIRRTL_AFTER_INITIAL	// ventus/src/pipeline/FloatDivSqrt.scala:16:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  SrtTable table_0 (	// ventus/src/pipeline/FloatDivSqrt.scala:55:21
    .io_d
      (isDivReg
         ? divisor[26:24]
         : firstCycle ? 3'h5 : _conv_io_Q[28] ? 3'h7 : _conv_io_Q[26:24]),	// ventus/src/pipeline/FloatDivSqrt.scala:29:27, :30:26, :38:27, :56:20, :60:21, :61:{44,59}, :62:{19,50,73}, :63:22, :67:20
    .io_y (isDivReg ? ws[30:23] + wc[30:23] : ws[31:24] + wc[31:24]),	// ventus/src/pipeline/FloatDivSqrt.scala:29:27, :53:19, :64:{18,33,37}, :65:{17,32,36}, :68:20
    .io_q (_table_io_q)
  );
  OnTheFlyConv conv (	// ventus/src/pipeline/FloatDivSqrt.scala:56:20
    .clock        (clock),
    .io_resetSqrt (_conv_io_resetDiv_T & ~io_in_bits_isDiv),	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/pipeline/FloatDivSqrt.scala:70:{35,38}
    .io_resetDiv  (_conv_io_resetDiv_T & io_in_bits_isDiv),	// src/main/scala/chisel3/util/Decoupled.scala:51:35, ventus/src/pipeline/FloatDivSqrt.scala:71:34
    .io_enable    (_conv_io_enable_T),	// ventus/src/pipeline/FloatDivSqrt.scala:35:56
    .io_qi        (_table_io_q),	// ventus/src/pipeline/FloatDivSqrt.scala:55:21
    .io_QM        (_conv_io_QM),
    .io_Q         (_conv_io_Q),
    .io_F         (_conv_io_F)
  );
  CSA32 csa (	// ventus/src/pipeline/FloatDivSqrt.scala:57:19
    .io_in_0  (ws),	// ventus/src/pipeline/FloatDivSqrt.scala:53:19
    .io_in_1
      (isDivReg & ~(_table_io_q[2]) ? {wc[31:2], wc[1:0] | _table_io_q[1:0]} : wc),	// ventus/src/pipeline/FloatDivSqrt.scala:29:27, :53:19, :55:21, :89:{22,32,34,45,52,63}
    .io_in_2
      (isDivReg
         ? (_table_io_q == 3'h2
              ? {3'h7, ~divisor, 1'h0}
              : _table_io_q == 3'h1
                  ? {4'hF, ~divisor}
                  : _table_io_q == 3'h6
                      ? {3'h0, divisor, 1'h0}
                      : (&_table_io_q) ? {4'h0, divisor} : 32'h0)
         : {1'h0, _conv_io_F}),	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :29:27, :30:26, :36:50, :55:21, :56:20, :62:50, :76:7, :77:7, :78:14, :79:11, :81:{39,51}, :86:26, :90:22
    .io_out_0 (_csa_io_out_0),
    .io_out_1 (_csa_io_out_1)
  );
  assign io_out_valid = &state;	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :33:22, :108:25
  assign io_out_bits_quot = _io_out_bits_quot_T_2[27:0];	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :109:{20,62}
  assign io_out_bits_isZeroRem = isZeroRemReg;	// ventus/src/pipeline/FloatDivSqrt.scala:16:7, :106:31
endmodule

