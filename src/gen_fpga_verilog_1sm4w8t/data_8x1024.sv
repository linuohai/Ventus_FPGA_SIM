// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// VCS coverage exclude_file
module data_8x1024(	// ventus/src/pipeline/MSHR.scala:31:17
  input  [2:0]    R0_addr,
  input           R0_en,
                  R0_clk,
  output [1023:0] R0_data,
  input  [2:0]    W0_addr,
  input           W0_en,
                  W0_clk,
  input  [1023:0] W0_data,
  input  [31:0]   W0_mask
);

  reg [1023:0] Memory[0:7];	// ventus/src/pipeline/MSHR.scala:31:17
  always @(posedge W0_clk) begin	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[0])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h0 +: 32] <= W0_data[31:0];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[1])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h20 +: 32] <= W0_data[63:32];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[2])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h40 +: 32] <= W0_data[95:64];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[3])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h60 +: 32] <= W0_data[127:96];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[4])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h80 +: 32] <= W0_data[159:128];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[5])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'hA0 +: 32] <= W0_data[191:160];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[6])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'hC0 +: 32] <= W0_data[223:192];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[7])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'hE0 +: 32] <= W0_data[255:224];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[8])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h100 +: 32] <= W0_data[287:256];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[9])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h120 +: 32] <= W0_data[319:288];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[10])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h140 +: 32] <= W0_data[351:320];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[11])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h160 +: 32] <= W0_data[383:352];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[12])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h180 +: 32] <= W0_data[415:384];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[13])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h1A0 +: 32] <= W0_data[447:416];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[14])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h1C0 +: 32] <= W0_data[479:448];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[15])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h1E0 +: 32] <= W0_data[511:480];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[16])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h200 +: 32] <= W0_data[543:512];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[17])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h220 +: 32] <= W0_data[575:544];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[18])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h240 +: 32] <= W0_data[607:576];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[19])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h260 +: 32] <= W0_data[639:608];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[20])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h280 +: 32] <= W0_data[671:640];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[21])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h2A0 +: 32] <= W0_data[703:672];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[22])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h2C0 +: 32] <= W0_data[735:704];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[23])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h2E0 +: 32] <= W0_data[767:736];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[24])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h300 +: 32] <= W0_data[799:768];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[25])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h320 +: 32] <= W0_data[831:800];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[26])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h340 +: 32] <= W0_data[863:832];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[27])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h360 +: 32] <= W0_data[895:864];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[28])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h380 +: 32] <= W0_data[927:896];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[29])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h3A0 +: 32] <= W0_data[959:928];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[30])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h3C0 +: 32] <= W0_data[991:960];	// ventus/src/pipeline/MSHR.scala:31:17
    if (W0_en & W0_mask[31])	// ventus/src/pipeline/MSHR.scala:31:17
      Memory[W0_addr][32'h3E0 +: 32] <= W0_data[1023:992];	// ventus/src/pipeline/MSHR.scala:31:17
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// ventus/src/pipeline/MSHR.scala:31:17
    reg [1023:0] _RANDOM_MEM;	// ventus/src/pipeline/MSHR.scala:31:17
    initial begin	// ventus/src/pipeline/MSHR.scala:31:17
      `INIT_RANDOM_PROLOG_	// ventus/src/pipeline/MSHR.scala:31:17
      `ifdef RANDOMIZE_MEM_INIT	// ventus/src/pipeline/MSHR.scala:31:17
        for (logic [3:0] i = 4'h0; i < 4'h8; i += 4'h1) begin
          for (logic [10:0] j = 11'h0; j < 11'h400; j += 11'h20) begin
            _RANDOM_MEM[j +: 32] = `RANDOM;	// ventus/src/pipeline/MSHR.scala:31:17
          end	// ventus/src/pipeline/MSHR.scala:31:17
          Memory[i[2:0]] = _RANDOM_MEM;	// ventus/src/pipeline/MSHR.scala:31:17
        end	// ventus/src/pipeline/MSHR.scala:31:17
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 1024'bx;	// ventus/src/pipeline/MSHR.scala:31:17
endmodule

