// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module PCcontrol(	// ventus/src/pipeline/PCcontrol.scala:16:7
  input         clock,	// ventus/src/pipeline/PCcontrol.scala:16:7
                reset,	// ventus/src/pipeline/PCcontrol.scala:16:7
  input  [31:0] io_New_PC,	// ventus/src/pipeline/PCcontrol.scala:17:12
  input         io_PC_replay,	// ventus/src/pipeline/PCcontrol.scala:17:12
  input  [1:0]  io_PC_src,	// ventus/src/pipeline/PCcontrol.scala:17:12
  output [31:0] io_PC_next,	// ventus/src/pipeline/PCcontrol.scala:17:12
  output [1:0]  io_mask_o,	// ventus/src/pipeline/PCcontrol.scala:17:12
  input  [1:0]  io_mask_i	// ventus/src/pipeline/PCcontrol.scala:17:12
);

  reg [31:0] pout;	// ventus/src/pipeline/PCcontrol.scala:26:19
  reg [1:0]  mask;	// ventus/src/pipeline/PCcontrol.scala:27:15
  always @(posedge clock) begin	// ventus/src/pipeline/PCcontrol.scala:16:7
    automatic logic [31:0] pc_req_tmp_1;	// ventus/src/pipeline/PCcontrol.scala:31:25
    pc_req_tmp_1 = io_New_PC & 32'hFFFFFFF8;	// ventus/src/pipeline/PCcontrol.scala:31:{25,28}
    if (reset)	// ventus/src/pipeline/PCcontrol.scala:16:7
      pout <= 32'h0;	// ventus/src/pipeline/PCcontrol.scala:26:19
    else if (io_PC_replay) begin	// ventus/src/pipeline/PCcontrol.scala:17:12
    end
    else begin	// ventus/src/pipeline/PCcontrol.scala:17:12
      automatic logic [3:0][31:0] _GEN;	// ventus/src/pipeline/PCcontrol.scala:43:{23,30}, :44:9, :46:{23,30}, :49:9, :51:{23,30}, :52:9, :55:9
      _GEN = {{io_New_PC}, {pout + 32'h8}, {pc_req_tmp_1}, {pout}};	// ventus/src/pipeline/PCcontrol.scala:26:19, :31:25, :43:{23,30}, :44:{9,15}, :46:{23,30}, :49:9, :51:{23,30}, :52:9, :55:9
      pout <= _GEN[io_PC_src];	// ventus/src/pipeline/PCcontrol.scala:26:19, :43:{23,30}, :44:9, :46:{23,30}, :49:9, :51:{23,30}, :52:9, :55:9
    end
    if (io_PC_replay) begin	// ventus/src/pipeline/PCcontrol.scala:17:12
    end
    else begin	// ventus/src/pipeline/PCcontrol.scala:17:12
      automatic logic [3:0][1:0] _GEN_0;	// ventus/src/pipeline/PCcontrol.scala:43:{23,30}, :45:9, :46:{23,30}, :50:9, :51:{23,30}, :53:9, :56:9
      _GEN_0 =
        {{io_mask_i},
         {2'h3},
         {{pc_req_tmp_1 + 32'h4 >= io_New_PC, pc_req_tmp_1 >= io_New_PC}},
         {mask}};	// ventus/src/pipeline/PCcontrol.scala:27:15, :31:25, :34:{36,48}, :36:26, :43:{23,30}, :45:9, :46:{23,30}, :50:9, :51:{23,30}, :53:9, :56:9
      mask <= _GEN_0[io_PC_src];	// ventus/src/pipeline/PCcontrol.scala:27:15, :43:{23,30}, :45:9, :46:{23,30}, :50:9, :51:{23,30}, :53:9, :56:9
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// ventus/src/pipeline/PCcontrol.scala:16:7
    `ifdef FIRRTL_BEFORE_INITIAL	// ventus/src/pipeline/PCcontrol.scala:16:7
      `FIRRTL_BEFORE_INITIAL	// ventus/src/pipeline/PCcontrol.scala:16:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// ventus/src/pipeline/PCcontrol.scala:16:7
      automatic logic [31:0] _RANDOM[0:1];	// ventus/src/pipeline/PCcontrol.scala:16:7
      `ifdef INIT_RANDOM_PROLOG_	// ventus/src/pipeline/PCcontrol.scala:16:7
        `INIT_RANDOM_PROLOG_	// ventus/src/pipeline/PCcontrol.scala:16:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// ventus/src/pipeline/PCcontrol.scala:16:7
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// ventus/src/pipeline/PCcontrol.scala:16:7
        end	// ventus/src/pipeline/PCcontrol.scala:16:7
        pout = _RANDOM[1'h0];	// ventus/src/pipeline/PCcontrol.scala:16:7, :26:19
        mask = _RANDOM[1'h1][1:0];	// ventus/src/pipeline/PCcontrol.scala:16:7, :27:15
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// ventus/src/pipeline/PCcontrol.scala:16:7
      `FIRRTL_AFTER_INITIAL	// ventus/src/pipeline/PCcontrol.scala:16:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_PC_next = pout;	// ventus/src/pipeline/PCcontrol.scala:16:7, :26:19
  assign io_mask_o = mask;	// ventus/src/pipeline/PCcontrol.scala:16:7, :27:15
endmodule

