// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Queue1_DirectoryResult_lite_victim(	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  input           clock,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
                  reset,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  output          io_enq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input           io_enq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [2:0]    io_enq_bits_opcode,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [6:0]    io_enq_bits_size,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [14:0]   io_enq_bits_source,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [18:0]   io_enq_bits_tag,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [6:0]    io_enq_bits_offset,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [4:0]    io_enq_bits_put,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [1023:0] io_enq_bits_data,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [127:0]  io_enq_bits_mask,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [2:0]    io_enq_bits_param,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [31:0]   io_enq_bits_spike_info_pc,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                  io_enq_bits_spike_info_vaddr,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [5:0]    io_enq_bits_set,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input           io_enq_bits_hit,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [3:0]    io_enq_bits_way,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input           io_enq_bits_dirty,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                  io_enq_bits_flush,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                  io_enq_bits_last_flush,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [18:0]   io_enq_bits_victim_tag,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input           io_deq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output          io_deq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [2:0]    io_deq_bits_opcode,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [6:0]    io_deq_bits_size,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [14:0]   io_deq_bits_source,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [18:0]   io_deq_bits_tag,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [6:0]    io_deq_bits_offset,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [4:0]    io_deq_bits_put,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [1023:0] io_deq_bits_data,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [127:0]  io_deq_bits_mask,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [2:0]    io_deq_bits_param,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [5:0]    io_deq_bits_set,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output          io_deq_bits_hit,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [3:0]    io_deq_bits_way,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output          io_deq_bits_dirty,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
                  io_deq_bits_last_flush,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [18:0]   io_deq_bits_victim_tag	// src/main/scala/chisel3/util/Decoupled.scala:255:14
);

  reg [1307:0] ram;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  reg          full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27
  always @(posedge clock) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    automatic logic do_enq;	// src/main/scala/chisel3/util/Decoupled.scala:51:35
    do_enq = ~full & io_enq_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27, :286:19
    if (do_enq)	// src/main/scala/chisel3/util/Decoupled.scala:51:35
      ram <=
        {io_enq_bits_victim_tag,
         io_enq_bits_last_flush,
         io_enq_bits_flush,
         io_enq_bits_dirty,
         io_enq_bits_way,
         io_enq_bits_hit,
         io_enq_bits_set,
         io_enq_bits_spike_info_vaddr,
         io_enq_bits_spike_info_pc,
         io_enq_bits_param,
         io_enq_bits_mask,
         io_enq_bits_data,
         io_enq_bits_put,
         io_enq_bits_offset,
         io_enq_bits_tag,
         io_enq_bits_source,
         io_enq_bits_size,
         io_enq_bits_opcode};	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    if (reset)	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      full <= 1'h0;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
    else if (~(do_enq == (io_deq_ready & full)))	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27, :276:{15,27}, :277:16
      full <= do_enq;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      automatic logic [31:0] _RANDOM[0:40];	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        for (logic [5:0] i = 6'h0; i < 6'h29; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        end	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        ram =
          {_RANDOM[6'h0][31:1],
           _RANDOM[6'h1],
           _RANDOM[6'h2],
           _RANDOM[6'h3],
           _RANDOM[6'h4],
           _RANDOM[6'h5],
           _RANDOM[6'h6],
           _RANDOM[6'h7],
           _RANDOM[6'h8],
           _RANDOM[6'h9],
           _RANDOM[6'hA],
           _RANDOM[6'hB],
           _RANDOM[6'hC],
           _RANDOM[6'hD],
           _RANDOM[6'hE],
           _RANDOM[6'hF],
           _RANDOM[6'h10],
           _RANDOM[6'h11],
           _RANDOM[6'h12],
           _RANDOM[6'h13],
           _RANDOM[6'h14],
           _RANDOM[6'h15],
           _RANDOM[6'h16],
           _RANDOM[6'h17],
           _RANDOM[6'h18],
           _RANDOM[6'h19],
           _RANDOM[6'h1A],
           _RANDOM[6'h1B],
           _RANDOM[6'h1C],
           _RANDOM[6'h1D],
           _RANDOM[6'h1E],
           _RANDOM[6'h1F],
           _RANDOM[6'h20],
           _RANDOM[6'h21],
           _RANDOM[6'h22],
           _RANDOM[6'h23],
           _RANDOM[6'h24],
           _RANDOM[6'h25],
           _RANDOM[6'h26],
           _RANDOM[6'h27],
           _RANDOM[6'h28][28:0]};	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
        full = _RANDOM[6'h0][0];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91, :259:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_enq_ready = ~full;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27, :286:19
  assign io_deq_valid = full;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
  assign io_deq_bits_opcode = ram[2:0];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_size = ram[9:3];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_source = ram[24:10];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_tag = ram[43:25];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_offset = ram[50:44];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_put = ram[55:51];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_data = ram[1079:56];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_mask = ram[1207:1080];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_param = ram[1210:1208];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_set = ram[1280:1275];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_hit = ram[1281];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_way = ram[1285:1282];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_dirty = ram[1286];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_last_flush = ram[1288];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
  assign io_deq_bits_victim_tag = ram[1307:1289];	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :256:91
endmodule

